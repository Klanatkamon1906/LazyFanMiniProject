
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b080  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b318  0800b318  0001b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b358  0800b358  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b360  0800b360  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b364  0800b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800b368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800b3f0  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800b450  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c7e0  24000148  0800b4b0  00020148  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400c928  0800b4b0  0002c928  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029ad7  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004206  00000000  00000000  00049c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001330  00000000  00000000  0004de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011e8  00000000  00000000  0004f188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b842  00000000  00000000  00050370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e60  00000000  00000000  0008bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001832a3  00000000  00000000  000a5a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00228cb5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005268  00000000  00000000  00228d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000148 	.word	0x24000148
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b300 	.word	0x0800b300

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400014c 	.word	0x2400014c
 80002d4:	0800b300 	.word	0x0800b300

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <BMPDecoder>:
} Convert8_32;

#define IMG_W 128
#define IMG_H 128
static stateBMP State = 0;
void BMPDecoder(uint8_t dataIn, uint8_t *array) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]

	static Convert8_32 size, StartPoint, HeaderSize, PW, PH, BPS;
	static uint32_t Substate, offset, imageSize;

	switch (State) {
 8000710:	4b98      	ldr	r3, [pc, #608]	; (8000974 <BMPDecoder+0x270>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b0c      	cmp	r3, #12
 8000716:	f200 81ac 	bhi.w	8000a72 <BMPDecoder+0x36e>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <BMPDecoder+0x1c>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000755 	.word	0x08000755
 8000724:	0800076f 	.word	0x0800076f
 8000728:	0800078b 	.word	0x0800078b
 800072c:	080007b7 	.word	0x080007b7
 8000730:	080007d9 	.word	0x080007d9
 8000734:	08000805 	.word	0x08000805
 8000738:	08000841 	.word	0x08000841
 800073c:	0800086d 	.word	0x0800086d
 8000740:	08000899 	.word	0x08000899
 8000744:	080008bb 	.word	0x080008bb
 8000748:	080008e7 	.word	0x080008e7
 800074c:	08000909 	.word	0x08000909
 8000750:	08000a33 	.word	0x08000a33
	case BMP_idle:

		if (dataIn == 0x42) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b42      	cmp	r3, #66	; 0x42
 8000758:	d102      	bne.n	8000760 <BMPDecoder+0x5c>
			State = BMP_Header_2;
 800075a:	4b86      	ldr	r3, [pc, #536]	; (8000974 <BMPDecoder+0x270>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]

		}
		Substate = 0;
 8000760:	4b85      	ldr	r3, [pc, #532]	; (8000978 <BMPDecoder+0x274>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
		offset = 0;
 8000766:	4b85      	ldr	r3, [pc, #532]	; (800097c <BMPDecoder+0x278>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
		break;
 800076c:	e181      	b.n	8000a72 <BMPDecoder+0x36e>

	case BMP_Header_2:
		if (dataIn == 0x4D) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b4d      	cmp	r3, #77	; 0x4d
 8000772:	d106      	bne.n	8000782 <BMPDecoder+0x7e>
			State = BMP_Size_4;
 8000774:	4b7f      	ldr	r3, [pc, #508]	; (8000974 <BMPDecoder+0x270>)
 8000776:	2202      	movs	r2, #2
 8000778:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 800077a:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <BMPDecoder+0x274>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
		} else {
			State = BMP_idle;
		}
		break;
 8000780:	e177      	b.n	8000a72 <BMPDecoder+0x36e>
			State = BMP_idle;
 8000782:	4b7c      	ldr	r3, [pc, #496]	; (8000974 <BMPDecoder+0x270>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		break;
 8000788:	e173      	b.n	8000a72 <BMPDecoder+0x36e>
	case BMP_Size_4:
		size.U8[Substate] = dataIn;
 800078a:	4b7b      	ldr	r3, [pc, #492]	; (8000978 <BMPDecoder+0x274>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	497c      	ldr	r1, [pc, #496]	; (8000980 <BMPDecoder+0x27c>)
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000794:	4b78      	ldr	r3, [pc, #480]	; (8000978 <BMPDecoder+0x274>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a77      	ldr	r2, [pc, #476]	; (8000978 <BMPDecoder+0x274>)
 800079c:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <BMPDecoder+0x274>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	f040 8150 	bne.w	8000a48 <BMPDecoder+0x344>
			State = BMP_Reserved0_4;
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <BMPDecoder+0x270>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007ae:	4b72      	ldr	r3, [pc, #456]	; (8000978 <BMPDecoder+0x274>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b4:	e148      	b.n	8000a48 <BMPDecoder+0x344>
	case BMP_Reserved0_4:
		Substate++;
 80007b6:	4b70      	ldr	r3, [pc, #448]	; (8000978 <BMPDecoder+0x274>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a6e      	ldr	r2, [pc, #440]	; (8000978 <BMPDecoder+0x274>)
 80007be:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007c0:	4b6d      	ldr	r3, [pc, #436]	; (8000978 <BMPDecoder+0x274>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	f040 8141 	bne.w	8000a4c <BMPDecoder+0x348>
			State = BMP_Imagestartpoint_4;
 80007ca:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <BMPDecoder+0x270>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007d0:	4b69      	ldr	r3, [pc, #420]	; (8000978 <BMPDecoder+0x274>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80007d6:	e139      	b.n	8000a4c <BMPDecoder+0x348>

	case BMP_Imagestartpoint_4:
		StartPoint.U8[Substate] = dataIn;
 80007d8:	4b67      	ldr	r3, [pc, #412]	; (8000978 <BMPDecoder+0x274>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4969      	ldr	r1, [pc, #420]	; (8000984 <BMPDecoder+0x280>)
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007e2:	4b65      	ldr	r3, [pc, #404]	; (8000978 <BMPDecoder+0x274>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a63      	ldr	r2, [pc, #396]	; (8000978 <BMPDecoder+0x274>)
 80007ea:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007ec:	4b62      	ldr	r3, [pc, #392]	; (8000978 <BMPDecoder+0x274>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	f040 812d 	bne.w	8000a50 <BMPDecoder+0x34c>
			State = BMP_SizeHeader_4;
 80007f6:	4b5f      	ldr	r3, [pc, #380]	; (8000974 <BMPDecoder+0x270>)
 80007f8:	2205      	movs	r2, #5
 80007fa:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <BMPDecoder+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		}
		break;
 8000802:	e125      	b.n	8000a50 <BMPDecoder+0x34c>

	case BMP_SizeHeader_4:
		HeaderSize.U8[Substate] = dataIn;
 8000804:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <BMPDecoder+0x274>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	495f      	ldr	r1, [pc, #380]	; (8000988 <BMPDecoder+0x284>)
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800080e:	4b5a      	ldr	r3, [pc, #360]	; (8000978 <BMPDecoder+0x274>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a58      	ldr	r2, [pc, #352]	; (8000978 <BMPDecoder+0x274>)
 8000816:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000818:	4b57      	ldr	r3, [pc, #348]	; (8000978 <BMPDecoder+0x274>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b04      	cmp	r3, #4
 800081e:	f040 8119 	bne.w	8000a54 <BMPDecoder+0x350>
			if (HeaderSize.U32 == 40) {
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <BMPDecoder+0x284>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b28      	cmp	r3, #40	; 0x28
 8000828:	d106      	bne.n	8000838 <BMPDecoder+0x134>
				State = BMP_PicWidth_4;
 800082a:	4b52      	ldr	r3, [pc, #328]	; (8000974 <BMPDecoder+0x270>)
 800082c:	2206      	movs	r2, #6
 800082e:	701a      	strb	r2, [r3, #0]
				Substate = 0;
 8000830:	4b51      	ldr	r3, [pc, #324]	; (8000978 <BMPDecoder+0x274>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
			} else {
				State = BMP_idle;
			}
		}
		break;
 8000836:	e10d      	b.n	8000a54 <BMPDecoder+0x350>
				State = BMP_idle;
 8000838:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <BMPDecoder+0x270>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
		break;
 800083e:	e109      	b.n	8000a54 <BMPDecoder+0x350>
	case BMP_PicWidth_4:
		PW.U8[Substate] = dataIn;
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <BMPDecoder+0x274>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4951      	ldr	r1, [pc, #324]	; (800098c <BMPDecoder+0x288>)
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <BMPDecoder+0x274>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	4a49      	ldr	r2, [pc, #292]	; (8000978 <BMPDecoder+0x274>)
 8000852:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <BMPDecoder+0x274>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b04      	cmp	r3, #4
 800085a:	f040 80fd 	bne.w	8000a58 <BMPDecoder+0x354>
			State = BMP_PicHeight_4;
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <BMPDecoder+0x270>)
 8000860:	2207      	movs	r2, #7
 8000862:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <BMPDecoder+0x274>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		}
		break;
 800086a:	e0f5      	b.n	8000a58 <BMPDecoder+0x354>
	case BMP_PicHeight_4:
		PH.U8[Substate] = dataIn;
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <BMPDecoder+0x274>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4947      	ldr	r1, [pc, #284]	; (8000990 <BMPDecoder+0x28c>)
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <BMPDecoder+0x274>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <BMPDecoder+0x274>)
 800087e:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <BMPDecoder+0x274>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b04      	cmp	r3, #4
 8000886:	f040 80e9 	bne.w	8000a5c <BMPDecoder+0x358>
			State = BMP_ColorPlanes_2;
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <BMPDecoder+0x270>)
 800088c:	2208      	movs	r2, #8
 800088e:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <BMPDecoder+0x274>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
		}
		break;
 8000896:	e0e1      	b.n	8000a5c <BMPDecoder+0x358>
	case BMP_ColorPlanes_2:

		Substate++;
 8000898:	4b37      	ldr	r3, [pc, #220]	; (8000978 <BMPDecoder+0x274>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <BMPDecoder+0x274>)
 80008a0:	6013      	str	r3, [r2, #0]
		if (Substate == 2) {
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <BMPDecoder+0x274>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	f040 80da 	bne.w	8000a60 <BMPDecoder+0x35c>
			State = BMP_BitPerPixel_2;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <BMPDecoder+0x270>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <BMPDecoder+0x274>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80008b8:	e0d2      	b.n	8000a60 <BMPDecoder+0x35c>
	case BMP_BitPerPixel_2:
		BPS.U8[Substate] = dataIn;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <BMPDecoder+0x274>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4935      	ldr	r1, [pc, #212]	; (8000994 <BMPDecoder+0x290>)
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <BMPDecoder+0x274>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <BMPDecoder+0x274>)
 80008cc:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <BMPDecoder+0x274>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	f040 80c6 	bne.w	8000a64 <BMPDecoder+0x360>
			State = BMP_Notused1_n;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <BMPDecoder+0x270>)
 80008da:	220a      	movs	r2, #10
 80008dc:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <BMPDecoder+0x274>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e4:	e0be      	b.n	8000a64 <BMPDecoder+0x360>
	case BMP_Notused1_n:
		if (offset == StartPoint.U32) {
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <BMPDecoder+0x280>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <BMPDecoder+0x278>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f040 80ba 	bne.w	8000a68 <BMPDecoder+0x364>
			State = BMP_Pixeldata_n;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <BMPDecoder+0x270>)
 80008f6:	220b      	movs	r2, #11
 80008f8:	701a      	strb	r2, [r3, #0]
			array[0] = dataIn;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	701a      	strb	r2, [r3, #0]
			Substate = 1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <BMPDecoder+0x274>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		}
		break;
 8000906:	e0af      	b.n	8000a68 <BMPDecoder+0x364>
	case BMP_Pixeldata_n:
		if ((Substate / (IMG_W * 3)) < PH.U32) {
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <BMPDecoder+0x274>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <BMPDecoder+0x294>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0a1a      	lsrs	r2, r3, #8
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <BMPDecoder+0x28c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d268      	bcs.n	80009ee <BMPDecoder+0x2ea>

			if ((Substate % (IMG_W * 3)) < (PW.U32 * 3)) {
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <BMPDecoder+0x274>)
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <BMPDecoder+0x294>)
 8000922:	fba3 2301 	umull	r2, r3, r3, r1
 8000926:	0a1a      	lsrs	r2, r3, #8
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	01db      	lsls	r3, r3, #7
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <BMPDecoder+0x288>)
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	429a      	cmp	r2, r3
 800093e:	d209      	bcs.n	8000954 <BMPDecoder+0x250>
				array[Substate++] = dataIn;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <BMPDecoder+0x274>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	490c      	ldr	r1, [pc, #48]	; (8000978 <BMPDecoder+0x274>)
 8000948:	600a      	str	r2, [r1, #0]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e054      	b.n	80009fe <BMPDecoder+0x2fa>
			}
			else if(((Substate) % 4))
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <BMPDecoder+0x274>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d026      	beq.n	80009ae <BMPDecoder+0x2aa>
			{
				array[Substate++] = dataIn;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <BMPDecoder+0x274>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	4904      	ldr	r1, [pc, #16]	; (8000978 <BMPDecoder+0x274>)
 8000968:	600a      	str	r2, [r1, #0]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e044      	b.n	80009fe <BMPDecoder+0x2fa>
 8000974:	24000164 	.word	0x24000164
 8000978:	24000168 	.word	0x24000168
 800097c:	2400016c 	.word	0x2400016c
 8000980:	24000170 	.word	0x24000170
 8000984:	24000174 	.word	0x24000174
 8000988:	24000178 	.word	0x24000178
 800098c:	2400017c 	.word	0x2400017c
 8000990:	24000180 	.word	0x24000180
 8000994:	24000184 	.word	0x24000184
 8000998:	aaaaaaab 	.word	0xaaaaaaab
			}
			else
			{
				while ((Substate % (IMG_W * 3)) != 0) {
					array[Substate++] = 0; 	//fill blankdata with black
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <BMPDecoder+0x384>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	4939      	ldr	r1, [pc, #228]	; (8000a88 <BMPDecoder+0x384>)
 80009a4:	600a      	str	r2, [r1, #0]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
				while ((Substate % (IMG_W * 3)) != 0) {
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <BMPDecoder+0x384>)
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <BMPDecoder+0x388>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	0a1a      	lsrs	r2, r3, #8
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	01db      	lsls	r3, r3, #7
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d1e9      	bne.n	800099c <BMPDecoder+0x298>
				}
				array[Substate++] = dataIn;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <BMPDecoder+0x384>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	492e      	ldr	r1, [pc, #184]	; (8000a88 <BMPDecoder+0x384>)
 80009d0:	600a      	str	r2, [r1, #0]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e010      	b.n	80009fe <BMPDecoder+0x2fa>
			}
		} else {
			while (Substate / (IMG_W * 3) < IMG_H) {
				array[Substate++] = 0; 	//fill blankdata with black
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <BMPDecoder+0x384>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	4929      	ldr	r1, [pc, #164]	; (8000a88 <BMPDecoder+0x384>)
 80009e4:	600a      	str	r2, [r1, #0]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			while (Substate / (IMG_W * 3) < IMG_H) {
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <BMPDecoder+0x384>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80009f6:	d3f1      	bcc.n	80009dc <BMPDecoder+0x2d8>
			}

			State = BMP_Notused2_n;
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <BMPDecoder+0x38c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	701a      	strb	r2, [r3, #0]

		}
		if (offset >= size.U32-1) {
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <BMPDecoder+0x390>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <BMPDecoder+0x394>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d82f      	bhi.n	8000a6c <BMPDecoder+0x368>
							State = BMP_idle;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <BMPDecoder+0x38c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a12:	e008      	b.n	8000a26 <BMPDecoder+0x322>
										array[Substate++] = 0; 	//fill blankdata with black
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <BMPDecoder+0x384>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	491b      	ldr	r1, [pc, #108]	; (8000a88 <BMPDecoder+0x384>)
 8000a1c:	600a      	str	r2, [r1, #0]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <BMPDecoder+0x384>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a2e:	d3f1      	bcc.n	8000a14 <BMPDecoder+0x310>
									}
						}
		break;
 8000a30:	e01c      	b.n	8000a6c <BMPDecoder+0x368>
	case BMP_Notused2_n:
		if (offset >= size.U32-1) {
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <BMPDecoder+0x390>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <BMPDecoder+0x394>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d817      	bhi.n	8000a70 <BMPDecoder+0x36c>
			State = BMP_idle;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <BMPDecoder+0x38c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000a46:	e013      	b.n	8000a70 <BMPDecoder+0x36c>
		break;
 8000a48:	bf00      	nop
 8000a4a:	e012      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e010      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a50:	bf00      	nop
 8000a52:	e00e      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a54:	bf00      	nop
 8000a56:	e00c      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e00a      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e008      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a60:	bf00      	nop
 8000a62:	e006      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a64:	bf00      	nop
 8000a66:	e004      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e002      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a70:	bf00      	nop

	}
	offset++;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <BMPDecoder+0x394>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <BMPDecoder+0x394>)
 8000a7a:	6013      	str	r3, [r2, #0]

}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	24000168 	.word	0x24000168
 8000a8c:	aaaaaaab 	.word	0xaaaaaaab
 8000a90:	24000164 	.word	0x24000164
 8000a94:	24000170 	.word	0x24000170
 8000a98:	2400016c 	.word	0x2400016c

08000a9c <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6858      	ldr	r0, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f004 ff01 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f001 f99e 	bl	8001df8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6858      	ldr	r0, [r3, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f004 fef5 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6898      	ldr	r0, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	f004 feec 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f001 f989 	bl	8001df8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6898      	ldr	r0, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	f004 fee0 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68d8      	ldr	r0, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	f004 fed7 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	2204      	movs	r2, #4
 8000b12:	4938      	ldr	r1, [pc, #224]	; (8000bf4 <LCD_init+0x158>)
 8000b14:	f007 fcca 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68d8      	ldr	r0, [r3, #12]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	f004 fec7 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	4931      	ldr	r1, [pc, #196]	; (8000bf8 <LCD_init+0x15c>)
 8000b34:	f007 fcba 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68d8      	ldr	r0, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	f004 feb7 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2201      	movs	r2, #1
 8000b52:	492a      	ldr	r1, [pc, #168]	; (8000bfc <LCD_init+0x160>)
 8000b54:	f007 fcaa 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68d8      	ldr	r0, [r3, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f004 fea7 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2204      	movs	r2, #4
 8000b72:	4923      	ldr	r1, [pc, #140]	; (8000c00 <LCD_init+0x164>)
 8000b74:	f007 fc9a 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68d8      	ldr	r0, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	f004 fe97 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2201      	movs	r2, #1
 8000b92:	491c      	ldr	r1, [pc, #112]	; (8000c04 <LCD_init+0x168>)
 8000b94:	f007 fc8a 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68d8      	ldr	r0, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f004 fe87 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4915      	ldr	r1, [pc, #84]	; (8000c08 <LCD_init+0x16c>)
 8000bb4:	f007 fc7a 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68d8      	ldr	r0, [r3, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f004 fe77 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LCD_init+0x170>)
 8000bd4:	f007 fc6a 	bl	80084ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68d8      	ldr	r0, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f004 fe67 	bl	80058b8 <HAL_GPIO_WritePin>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000008 	.word	0x24000008
 8000bf8:	2400000c 	.word	0x2400000c
 8000bfc:	2400000d 	.word	0x2400000d
 8000c00:	2400000e 	.word	0x2400000e
 8000c04:	24000012 	.word	0x24000012
 8000c08:	24000013 	.word	0x24000013
 8000c0c:	24000017 	.word	0x24000017

08000c10 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c20:	4903      	ldr	r1, [pc, #12]	; (8000c30 <LCD_flush+0x20>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f007 fe34 	bl	8008890 <HAL_SPI_Transmit_DMA>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	24000188 	.word	0x24000188

08000c34 <LCDBufferAddr>:

uint8_t* LCDBufferAddr()
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	return Framememory;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <LCDBufferAddr+0x10>)
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	24000188 	.word	0x24000188

08000c48 <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	88db      	ldrh	r3, [r3, #6]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	f00a fa90 	bl	800b17c <calloc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	889b      	ldrh	r3, [r3, #4]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f00a fa86 	bl	800b17c <calloc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	81da      	strh	r2, [r3, #14]

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	88db      	ldrh	r3, [r3, #6]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f008 faf2 	bl	8009290 <HAL_UART_Receive_DMA>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	88db      	ldrh	r3, [r3, #6]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <UARTGetRxHead+0x114>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d068      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <UARTGetRxHead+0x118>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d061      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <UARTGetRxHead+0x11c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d05a      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <UARTGetRxHead+0x120>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d053      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <UARTGetRxHead+0x124>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d04c      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <UARTGetRxHead+0x128>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d045      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <UARTGetRxHead+0x12c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d03e      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <UARTGetRxHead+0x130>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d037      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <UARTGetRxHead+0x134>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d030      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <UARTGetRxHead+0x138>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d029      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <UARTGetRxHead+0x13c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d022      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <UARTGetRxHead+0x140>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01b      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <UARTGetRxHead+0x144>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d014      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <UARTGetRxHead+0x148>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <UARTGetRxHead+0x14c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d006      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <UARTGetRxHead+0x150>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <UARTGetRxHead+0xfa>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	e004      	b.n	8000db8 <UARTGetRxHead+0x104>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	1acb      	subs	r3, r1, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40020010 	.word	0x40020010
 8000dcc:	40020028 	.word	0x40020028
 8000dd0:	40020040 	.word	0x40020040
 8000dd4:	40020058 	.word	0x40020058
 8000dd8:	40020070 	.word	0x40020070
 8000ddc:	40020088 	.word	0x40020088
 8000de0:	400200a0 	.word	0x400200a0
 8000de4:	400200b8 	.word	0x400200b8
 8000de8:	40020410 	.word	0x40020410
 8000dec:	40020428 	.word	0x40020428
 8000df0:	40020440 	.word	0x40020440
 8000df4:	40020458 	.word	0x40020458
 8000df8:	40020470 	.word	0x40020470
 8000dfc:	40020488 	.word	0x40020488
 8000e00:	400204a0 	.word	0x400204a0
 8000e04:	400204b8 	.word	0x400204b8

08000e08 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	8a9b      	ldrh	r3, [r3, #20]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff49 	bl	8000cb4 <UARTGetRxHead>
 8000e22:	4603      	mov	r3, r0
 8000e24:	429c      	cmp	r4, r3
 8000e26:	d013      	beq.n	8000e50 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	8a92      	ldrh	r2, [r2, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	8a9b      	ldrh	r3, [r3, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	88d2      	ldrh	r2, [r2, #6]
 8000e40:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e44:	fb02 f201 	mul.w	r2, r2, r1
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e66:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000e68:	bf00      	nop
 8000e6a:	4b71      	ldr	r3, [pc, #452]	; (8001030 <main+0x1d4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <main+0x24>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	60fa      	str	r2, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dcf4      	bgt.n	8000e6a <main+0xe>
		;
	if (timeout < 0) {
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da01      	bge.n	8000e8a <main+0x2e>
		Error_Handler();
 8000e86:	f000 fb59 	bl	800153c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f000 ff23 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f8df 	bl	8001050 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e92:	4b67      	ldr	r3, [pc, #412]	; (8001030 <main+0x1d4>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a65      	ldr	r2, [pc, #404]	; (8001030 <main+0x1d4>)
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b63      	ldr	r3, [pc, #396]	; (8001030 <main+0x1d4>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f004 fd1b 	bl	80058ec <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f004 fd31 	bl	8005920 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000ec4:	bf00      	nop
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <main+0x1d4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <main+0x80>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	60fa      	str	r2, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	dcf4      	bgt.n	8000ec6 <main+0x6a>
		;
	if (timeout < 0) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da01      	bge.n	8000ee6 <main+0x8a>
		Error_Handler();
 8000ee2:	f000 fb2b 	bl	800153c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa89 	bl	80013fc <MX_GPIO_Init>
  MX_ETH_Init();
 8000eea:	f000 f935 	bl	8001158 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000eee:	f000 f9d7 	bl	80012a0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000ef2:	f000 fa53 	bl	800139c <MX_DMA_Init>
  MX_SPI1_Init();
 8000ef6:	f000 f97b 	bl	80011f0 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efa:	f000 fa1d 	bl	8001338 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  	  	  // LCD init
	ST7735.hspi = &hspi1;
 8000efe:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <main+0x1d8>)
 8000f00:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <main+0x1dc>)
 8000f02:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000f04:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <main+0x1d8>)
 8000f06:	4a4d      	ldr	r2, [pc, #308]	; (800103c <main+0x1e0>)
 8000f08:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <main+0x1d8>)
 8000f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f10:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000f12:	4b48      	ldr	r3, [pc, #288]	; (8001034 <main+0x1d8>)
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <main+0x1e0>)
 8000f16:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000f18:	4b46      	ldr	r3, [pc, #280]	; (8001034 <main+0x1d8>)
 8000f1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f1e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000f20:	4b44      	ldr	r3, [pc, #272]	; (8001034 <main+0x1d8>)
 8000f22:	4a47      	ldr	r2, [pc, #284]	; (8001040 <main+0x1e4>)
 8000f24:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <main+0x1d8>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8000f2e:	4841      	ldr	r0, [pc, #260]	; (8001034 <main+0x1d8>)
 8000f30:	f7ff fdb4 	bl	8000a9c <LCD_init>
	LCD_flush(&ST7735);
 8000f34:	483f      	ldr	r0, [pc, #252]	; (8001034 <main+0x1d8>)
 8000f36:	f7ff fe6b 	bl	8000c10 <LCD_flush>
		// UART init
	UART2.huart = &huart3;
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <main+0x1e8>)
 8000f3c:	4a42      	ldr	r2, [pc, #264]	; (8001048 <main+0x1ec>)
 8000f3e:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <main+0x1e8>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <main+0x1e8>)
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000f4c:	483d      	ldr	r0, [pc, #244]	; (8001044 <main+0x1e8>)
 8000f4e:	f7ff fe7b 	bl	8000c48 <UARTInit>
	UARTResetStart(&UART2);
 8000f52:	483c      	ldr	r0, [pc, #240]	; (8001044 <main+0x1e8>)
 8000f54:	f7ff fe9d 	bl	8000c92 <UARTResetStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int16_t read = UARTReadChar(&UART2) ;
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <main+0x1e8>)
 8000f5a:	f7ff ff55 	bl	8000e08 <UARTReadChar>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	817b      	strh	r3, [r7, #10]
		if(read != -1)
 8000f62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6a:	d008      	beq.n	8000f7e <main+0x122>
			{
				BMPDecoder(read, LCDBufferAddr());	//LCD
 8000f6c:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000f70:	f7ff fe60 	bl	8000c34 <LCDBufferAddr>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fbc3 	bl	8000704 <BMPDecoder>
			}

		if(sharedMemory->SystemState)// if PIR detect movement
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <main+0x1f0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0e7      	beq.n	8000f58 <main+0xfc>
		{
			HAL_GPIO_WritePin(L1_GPIO_Port,L1_Pin,GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	482b      	ldr	r0, [pc, #172]	; (800103c <main+0x1e0>)
 8000f8e:	f004 fc93 	bl	80058b8 <HAL_GPIO_WritePin>

			if(HAL_HSEM_FastTake(1) == HAL_OK)
 8000f92:	2001      	movs	r0, #1
 8000f94:	f004 fcaa 	bl	80058ec <HAL_HSEM_FastTake>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d140      	bne.n	8001020 <main+0x1c4>
			  {
			  switch(sharedMemory->ButtonState){ // check button HC-35 status light
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <main+0x1f0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d83d      	bhi.n	8001024 <main+0x1c8>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <main+0x154>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08001025 	.word	0x08001025
 8000fb4:	08000fc1 	.word	0x08000fc1
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	08001001 	.word	0x08001001
			  case 0:
				  break;
			  case 1:// Low speed status light & LCD display
				  HAL_GPIO_WritePin(L2_GPIO_Port,L2_Pin,GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <main+0x1e0>)
 8000fc6:	f004 fc77 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L3_GPIO_Port,L3_Pin,GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	481b      	ldr	r0, [pc, #108]	; (800103c <main+0x1e0>)
 8000fd0:	f004 fc72 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L4_GPIO_Port,L4_Pin,GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <main+0x1e0>)
 8000fda:	f004 fc6d 	bl	80058b8 <HAL_GPIO_WritePin>

//				  memcpy(Framememory,Speed01,sizeof(Speed01));
				  break;
 8000fde:	e022      	b.n	8001026 <main+0x1ca>
			  case 2:// Mid speed status light & LCD display
				  HAL_GPIO_WritePin(L2_GPIO_Port,L2_Pin,GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0x1e0>)
 8000fe6:	f004 fc67 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L3_GPIO_Port,L3_Pin,GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <main+0x1e0>)
 8000ff0:	f004 fc62 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L4_GPIO_Port,L4_Pin,GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <main+0x1e0>)
 8000ffa:	f004 fc5d 	bl	80058b8 <HAL_GPIO_WritePin>

//				  memcpy(Framememory,Speed02,sizeof(Speed02));
				  break;
 8000ffe:	e012      	b.n	8001026 <main+0x1ca>
			  case 3:// High speed status light & LCD display
				  HAL_GPIO_WritePin(L2_GPIO_Port,L2_Pin,GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2120      	movs	r1, #32
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <main+0x1e0>)
 8001006:	f004 fc57 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L3_GPIO_Port,L3_Pin,GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2110      	movs	r1, #16
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <main+0x1e0>)
 8001010:	f004 fc52 	bl	80058b8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(L4_GPIO_Port,L4_Pin,GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2108      	movs	r1, #8
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <main+0x1e0>)
 800101a:	f004 fc4d 	bl	80058b8 <HAL_GPIO_WritePin>

//				  memcpy(Framememory,Speed03,sizeof(Speed03));
				  break;
 800101e:	e002      	b.n	8001026 <main+0x1ca>
			  default:
				  break;
			  }
		  }
 8001020:	bf00      	nop
 8001022:	e000      	b.n	8001026 <main+0x1ca>
				  break;
 8001024:	bf00      	nop
			  // Unlock HSEM1
			  HAL_HSEM_Release(1,0);
 8001026:	2100      	movs	r1, #0
 8001028:	2001      	movs	r0, #1
 800102a:	f004 fc79 	bl	8005920 <HAL_HSEM_Release>
	while (1) {
 800102e:	e793      	b.n	8000f58 <main+0xfc>
 8001030:	58024400 	.word	0x58024400
 8001034:	2400c188 	.word	0x2400c188
 8001038:	2400c758 	.word	0x2400c758
 800103c:	58020c00 	.word	0x58020c00
 8001040:	58021800 	.word	0x58021800
 8001044:	2400c1a4 	.word	0x2400c1a4
 8001048:	2400c248 	.word	0x2400c248
 800104c:	24000018 	.word	0x24000018

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b09c      	sub	sp, #112	; 0x70
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	224c      	movs	r2, #76	; 0x4c
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00a f8be 	bl	800b1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00a f8b8 	bl	800b1e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001070:	2004      	movs	r0, #4
 8001072:	f004 fdb1 	bl	8005bd8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <SystemClock_Config+0xfc>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a33      	ldr	r2, [pc, #204]	; (800114c <SystemClock_Config+0xfc>)
 8001080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <SystemClock_Config+0xfc>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <SystemClock_Config+0x100>)
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <SystemClock_Config+0x100>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <SystemClock_Config+0x100>)
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a8:	bf00      	nop
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <SystemClock_Config+0xfc>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b6:	d1f8      	bne.n	80010aa <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <SystemClock_Config+0x104>)
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f023 0303 	bic.w	r3, r3, #3
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <SystemClock_Config+0x104>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010de:	2378      	movs	r3, #120	; 0x78
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80010e6:	2306      	movs	r3, #6
 80010e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010ee:	230c      	movs	r3, #12
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fdd4 	bl	8005cac <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800110a:	f000 fa17 	bl	800153c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	233f      	movs	r3, #63	; 0x3f
 8001110:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800111a:	2308      	movs	r3, #8
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800111e:	2340      	movs	r3, #64	; 0x40
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800112c:	2340      	movs	r3, #64	; 0x40
 800112e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f005 f9c9 	bl	80064cc <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001140:	f000 f9fc 	bl	800153c <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3770      	adds	r7, #112	; 0x70
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58024800 	.word	0x58024800
 8001150:	58000400 	.word	0x58000400
 8001154:	58024400 	.word	0x58024400

08001158 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_ETH_Init+0x80>)
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <MX_ETH_Init+0x84>)
 8001160:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_ETH_Init+0x88>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_ETH_Init+0x88>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_ETH_Init+0x88>)
 8001170:	22e1      	movs	r2, #225	; 0xe1
 8001172:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_ETH_Init+0x88>)
 8001176:	2200      	movs	r2, #0
 8001178:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_ETH_Init+0x88>)
 800117c:	2200      	movs	r2, #0
 800117e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_ETH_Init+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_ETH_Init+0x80>)
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_ETH_Init+0x88>)
 800118a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_ETH_Init+0x80>)
 800118e:	2201      	movs	r2, #1
 8001190:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_ETH_Init+0x80>)
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <MX_ETH_Init+0x8c>)
 8001196:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_ETH_Init+0x80>)
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_ETH_Init+0x90>)
 800119c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_ETH_Init+0x80>)
 80011a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_ETH_Init+0x80>)
 80011a8:	f003 fdc0 	bl	8004d2c <HAL_ETH_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011b2:	f000 f9c3 	bl	800153c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011b6:	2234      	movs	r2, #52	; 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_ETH_Init+0x94>)
 80011bc:	f00a f810 	bl	800b1e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_ETH_Init+0x94>)
 80011c2:	2221      	movs	r2, #33	; 0x21
 80011c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_ETH_Init+0x94>)
 80011c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_ETH_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2400c7e0 	.word	0x2400c7e0
 80011dc:	40028000 	.word	0x40028000
 80011e0:	2400c1bc 	.word	0x2400c1bc
 80011e4:	240000e8 	.word	0x240000e8
 80011e8:	24000088 	.word	0x24000088
 80011ec:	2400c868 	.word	0x2400c868

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_SPI1_Init+0xa8>)
 80011f6:	4a29      	ldr	r2, [pc, #164]	; (800129c <MX_SPI1_Init+0xac>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_SPI1_Init+0xa8>)
 80011fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001208:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_SPI1_Init+0xa8>)
 800120c:	2207      	movs	r2, #7
 800120e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_SPI1_Init+0xa8>)
 800121e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001226:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800122a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_SPI1_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_SPI1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_SPI1_Init+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_SPI1_Init+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_SPI1_Init+0xa8>)
 800126c:	2200      	movs	r2, #0
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001278:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_SPI1_Init+0xa8>)
 8001286:	f007 f80f 	bl	80082a8 <HAL_SPI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001290:	f000 f954 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2400c758 	.word	0x2400c758
 800129c:	40013000 	.word	0x40013000

080012a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <MX_USART3_UART_Init+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ea:	f007 ff80 	bl	80091ee <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 f922 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012fc:	f009 fbb6 	bl	800aa6c <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001306:	f000 f919 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800130e:	f009 fbeb 	bl	800aae8 <HAL_UARTEx_SetRxFifoThreshold>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 f910 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800131e:	f009 fb6c 	bl	800a9fa <HAL_UARTEx_DisableFifoMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 f908 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2400c248 	.word	0x2400c248
 8001334:	40004800 	.word	0x40004800

08001338 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001340:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001344:	2209      	movs	r2, #9
 8001346:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134a:	2202      	movs	r2, #2
 800134c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001356:	2202      	movs	r2, #2
 8001358:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	2201      	movs	r2, #1
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2201      	movs	r2, #1
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	f004 fae2 	bl	8005948 <HAL_PCD_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800138a:	f000 f8d7 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2400c2d8 	.word	0x2400c2d8
 8001398:	40080000 	.word	0x40080000

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_DMA_Init+0x5c>)
 80013a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <MX_DMA_Init+0x5c>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_DMA_Init+0x5c>)
 80013b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	200b      	movs	r0, #11
 80013c6:	f000 fe36 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013ca:	200b      	movs	r0, #11
 80013cc:	f000 fe4d 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	200c      	movs	r0, #12
 80013d6:	f000 fe2e 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013da:	200c      	movs	r0, #12
 80013dc:	f000 fe45 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	200d      	movs	r0, #13
 80013e6:	f000 fe26 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013ea:	200d      	movs	r0, #13
 80013ec:	f000 fe3d 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58024400 	.word	0x58024400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <MX_GPIO_Init+0x134>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <MX_GPIO_Init+0x134>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <MX_GPIO_Init+0x134>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <MX_GPIO_Init+0x134>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <MX_GPIO_Init+0x134>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MX_GPIO_Init+0x134>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <MX_GPIO_Init+0x134>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a36      	ldr	r2, [pc, #216]	; (8001530 <MX_GPIO_Init+0x134>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <MX_GPIO_Init+0x134>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_GPIO_Init+0x134>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <MX_GPIO_Init+0x134>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_GPIO_Init+0x134>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <MX_GPIO_Init+0x134>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <MX_GPIO_Init+0x134>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_GPIO_Init+0x134>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_GPIO_Init+0x134>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <MX_GPIO_Init+0x134>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_GPIO_Init+0x134>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|L4_Pin|L3_Pin|L2_Pin
 80014c6:	2201      	movs	r2, #1
 80014c8:	f244 0178 	movw	r1, #16504	; 0x4078
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <MX_GPIO_Init+0x138>)
 80014ce:	f004 f9f3 	bl	80058b8 <HAL_GPIO_WritePin>
                          |L1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <MX_GPIO_Init+0x138>)
 80014da:	f004 f9ed 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_GPIO_Init+0x13c>)
 80014e6:	f004 f9e7 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin L4_Pin L3_Pin
                           L2_Pin L1_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|L4_Pin|L3_Pin
 80014ea:	f24c 0378 	movw	r3, #49272	; 0xc078
 80014ee:	61fb      	str	r3, [r7, #28]
                          |L2_Pin|L1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0x138>)
 8001504:	f004 f828 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001522:	f004 f819 	bl	8005558 <HAL_GPIO_Init>

}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	58024400 	.word	0x58024400
 8001534:	58020c00 	.word	0x58020c00
 8001538:	58021800 	.word	0x58021800

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x30>)
 8001550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x30>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x30>)
 8001560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a59      	ldr	r2, [pc, #356]	; (8001700 <HAL_ETH_MspInit+0x184>)
 800159a:	4293      	cmp	r3, r2
 800159c:	f040 80ab 	bne.w	80016f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a6:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_ETH_MspInit+0x188>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a40      	ldr	r2, [pc, #256]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_ETH_MspInit+0x188>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_ETH_MspInit+0x188>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4a39      	ldr	r2, [pc, #228]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_ETH_MspInit+0x188>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_ETH_MspInit+0x188>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_ETH_MspInit+0x188>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_ETH_MspInit+0x188>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001672:	2332      	movs	r3, #50	; 0x32
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001682:	230b      	movs	r3, #11
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	481e      	ldr	r0, [pc, #120]	; (8001708 <HAL_ETH_MspInit+0x18c>)
 800168e:	f003 ff63 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001692:	2386      	movs	r3, #134	; 0x86
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a2:	230b      	movs	r3, #11
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <HAL_ETH_MspInit+0x190>)
 80016ae:	f003 ff53 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c4:	230b      	movs	r3, #11
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <HAL_ETH_MspInit+0x194>)
 80016d0:	f003 ff42 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e6:	230b      	movs	r3, #11
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <HAL_ETH_MspInit+0x198>)
 80016f2:	f003 ff31 	bl	8005558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3738      	adds	r7, #56	; 0x38
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40028000 	.word	0x40028000
 8001704:	58024400 	.word	0x58024400
 8001708:	58020800 	.word	0x58020800
 800170c:	58020000 	.word	0x58020000
 8001710:	58020400 	.word	0x58020400
 8001714:	58021800 	.word	0x58021800

08001718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0ba      	sub	sp, #232	; 0xe8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	22bc      	movs	r2, #188	; 0xbc
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f009 fd51 	bl	800b1e0 <memset>
  if(hspi->Instance==SPI1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_SPI_MspInit+0x174>)
 8001744:	4293      	cmp	r3, r2
 8001746:	f040 809c 	bne.w	8001882 <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001750:	2300      	movs	r3, #0
 8001752:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fa43 	bl	8006be4 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001764:	f7ff feea 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001768:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_SPI_MspInit+0x178>)
 800176a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800176e:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_SPI_MspInit+0x178>)
 8001770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_SPI_MspInit+0x178>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_SPI_MspInit+0x178>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a40      	ldr	r2, [pc, #256]	; (8001890 <HAL_SPI_MspInit+0x178>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_SPI_MspInit+0x178>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <HAL_SPI_MspInit+0x178>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a39      	ldr	r2, [pc, #228]	; (8001890 <HAL_SPI_MspInit+0x178>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_SPI_MspInit+0x178>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017c2:	2320      	movs	r3, #32
 80017c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2305      	movs	r3, #5
 80017dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e4:	4619      	mov	r1, r3
 80017e6:	482b      	ldr	r0, [pc, #172]	; (8001894 <HAL_SPI_MspInit+0x17c>)
 80017e8:	f003 feb6 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017ec:	2320      	movs	r3, #32
 80017ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001804:	2305      	movs	r3, #5
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800180e:	4619      	mov	r1, r3
 8001810:	4821      	ldr	r0, [pc, #132]	; (8001898 <HAL_SPI_MspInit+0x180>)
 8001812:	f003 fea1 	bl	8005558 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_SPI_MspInit+0x188>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_SPI_MspInit+0x184>)
 800181e:	2226      	movs	r2, #38	; 0x26
 8001820:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_SPI_MspInit+0x184>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001834:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_SPI_MspInit+0x184>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001848:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_SPI_MspInit+0x184>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <HAL_SPI_MspInit+0x184>)
 8001858:	f000 fc22 	bl	80020a0 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8001862:	f7ff fe6b 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_SPI_MspInit+0x184>)
 800186a:	679a      	str	r2, [r3, #120]	; 0x78
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_SPI_MspInit+0x184>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2023      	movs	r0, #35	; 0x23
 8001878:	f000 fbdd 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800187c:	2023      	movs	r0, #35	; 0x23
 800187e:	f000 fbf4 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	37e8      	adds	r7, #232	; 0xe8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40013000 	.word	0x40013000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020000 	.word	0x58020000
 8001898:	58020400 	.word	0x58020400
 800189c:	2400c89c 	.word	0x2400c89c
 80018a0:	40020010 	.word	0x40020010

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b8      	sub	sp, #224	; 0xe0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	22bc      	movs	r2, #188	; 0xbc
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 fc8b 	bl	800b1e0 <memset>
  if(huart->Instance==USART3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_UART_MspInit+0x188>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	f040 80a6 	bne.w	8001a22 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018d6:	2302      	movs	r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 f97d 	bl	8006be4 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018f0:	f7ff fe24 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 80018f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_UART_MspInit+0x18c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194a:	2307      	movs	r3, #7
 800194c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001954:	4619      	mov	r1, r3
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <HAL_UART_MspInit+0x190>)
 8001958:	f003 fdfe 	bl	8005558 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800195e:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <HAL_UART_MspInit+0x198>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001964:	222d      	movs	r2, #45	; 0x2d
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_UART_MspInit+0x194>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <HAL_UART_MspInit+0x194>)
 800199e:	f000 fb7f 	bl	80020a0 <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80019a8:	f7ff fdc8 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_UART_MspInit+0x194>)
 80019b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_UART_MspInit+0x194>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_UART_MspInit+0x1a0>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019c0:	222e      	movs	r2, #46	; 0x2e
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019f6:	4812      	ldr	r0, [pc, #72]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 80019f8:	f000 fb52 	bl	80020a0 <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001a02:	f7ff fd9b 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 8001a0a:	679a      	str	r2, [r3, #120]	; 0x78
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_UART_MspInit+0x19c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2027      	movs	r0, #39	; 0x27
 8001a18:	f000 fb0d 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a1c:	2027      	movs	r0, #39	; 0x27
 8001a1e:	f000 fb24 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	37e0      	adds	r7, #224	; 0xe0
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40004800 	.word	0x40004800
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020c00 	.word	0x58020c00
 8001a38:	2400c1d0 	.word	0x2400c1d0
 8001a3c:	40020028 	.word	0x40020028
 8001a40:	2400c6e0 	.word	0x2400c6e0
 8001a44:	40020040 	.word	0x40020040

08001a48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0b8      	sub	sp, #224	; 0xe0
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	22bc      	movs	r2, #188	; 0xbc
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f009 fbb9 	bl	800b1e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <HAL_PCD_MspInit+0x108>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d166      	bne.n	8001b46 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001a82:	2312      	movs	r3, #18
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001a92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001a98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001a9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f89a 	bl	8006be4 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001ab6:	f7ff fd41 	bl	800153c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001aba:	f004 f8e7 	bl	8005c8c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001adc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001af6:	230a      	movs	r3, #10
 8001af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b00:	4619      	mov	r1, r3
 8001b02:	4815      	ldr	r0, [pc, #84]	; (8001b58 <HAL_PCD_MspInit+0x110>)
 8001b04:	f003 fd28 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HAL_PCD_MspInit+0x110>)
 8001b24:	f003 fd18 	bl	8005558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001b30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_PCD_MspInit+0x10c>)
 8001b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	37e0      	adds	r7, #224	; 0xe0
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40080000 	.word	0x40080000
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58020000 	.word	0x58020000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f906 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8001bb6:	f001 fd9b 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2400c89c 	.word	0x2400c89c

08001bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8001bca:	f001 fd91 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2400c1d0 	.word	0x2400c1d0

08001bd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream2_IRQHandler+0x10>)
 8001bde:	f001 fd87 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2400c6e0 	.word	0x2400c6e0

08001bec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <SPI1_IRQHandler+0x10>)
 8001bf2:	f006 ff93 	bl	8008b1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2400c758 	.word	0x2400c758

08001c00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART3_IRQHandler+0x10>)
 8001c06:	f007 fb89 	bl	800931c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2400c248 	.word	0x2400c248

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f009 faa2 	bl	800b18c <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	24080000 	.word	0x24080000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	2400c1c4 	.word	0x2400c1c4
 8001c7c:	2400c928 	.word	0x2400c928

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c84:	f7fe fca4 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f009 fa73 	bl	800b198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff f8d3 	bl	8000e5c <main>
  bx  lr
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cc0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001cc4:	0800b368 	.word	0x0800b368
  ldr r2, =_sbss
 8001cc8:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8001ccc:	2400c928 	.word	0x2400c928

08001cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC3_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 f9a0 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce0:	f004 fdaa 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_Init+0x6c>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_Init+0x6c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x70>)
 8001d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_Init+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f814 	bl	8001d4c <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e002      	b.n	8001d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff fc0b 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	0800b318 	.word	0x0800b318
 8001d44:	24000004 	.word	0x24000004
 8001d48:	24000000 	.word	0x24000000

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_InitTick+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e021      	b.n	8001da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_InitTick+0x64>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_InitTick+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f985 	bl	8002086 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f94f 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x68>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	24000020 	.word	0x24000020
 8001db0:	24000000 	.word	0x24000000
 8001db4:	2400001c 	.word	0x2400001c

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	24000020 	.word	0x24000020
 8001ddc:	2400c914 	.word	0x2400c914

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2400c914 	.word	0x2400c914

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000020 	.word	0x24000020

08001e40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetREVID+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0c1b      	lsrs	r3, r3, #16
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	5c001000 	.word	0x5c001000

08001e58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e68:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	58000400 	.word	0x58000400

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	05fa0000 	.word	0x05fa0000

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff40 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff33 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa4 	bl	8001fdc <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fe9a 	bl	8001de0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e316      	b.n	80026e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a66      	ldr	r2, [pc, #408]	; (8002258 <HAL_DMA_Init+0x1b8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_DMA_Init+0x1bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_DMA_Init+0x1c0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a62      	ldr	r2, [pc, #392]	; (8002264 <HAL_DMA_Init+0x1c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_DMA_Init+0x1c8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5f      	ldr	r2, [pc, #380]	; (800226c <HAL_DMA_Init+0x1cc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <HAL_DMA_Init+0x1d0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <HAL_DMA_Init+0x1d4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <HAL_DMA_Init+0x1d8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_DMA_Init+0x1dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_DMA_Init+0x1e0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a56      	ldr	r2, [pc, #344]	; (8002284 <HAL_DMA_Init+0x1e4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a54      	ldr	r2, [pc, #336]	; (8002288 <HAL_DMA_Init+0x1e8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_DMA_Init+0x1ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_DMA_Init+0x1f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a50      	ldr	r2, [pc, #320]	; (8002294 <HAL_DMA_Init+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0xbc>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Init+0xbe>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 813b 	beq.w	80023da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a37      	ldr	r2, [pc, #220]	; (8002258 <HAL_DMA_Init+0x1b8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d04a      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a36      	ldr	r2, [pc, #216]	; (800225c <HAL_DMA_Init+0x1bc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d045      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_DMA_Init+0x1c0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d040      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a33      	ldr	r2, [pc, #204]	; (8002264 <HAL_DMA_Init+0x1c4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d03b      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a31      	ldr	r2, [pc, #196]	; (8002268 <HAL_DMA_Init+0x1c8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a30      	ldr	r2, [pc, #192]	; (800226c <HAL_DMA_Init+0x1cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2e      	ldr	r2, [pc, #184]	; (8002270 <HAL_DMA_Init+0x1d0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02c      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_DMA_Init+0x1d4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d027      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_DMA_Init+0x1d8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2a      	ldr	r2, [pc, #168]	; (800227c <HAL_DMA_Init+0x1dc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01d      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_DMA_Init+0x1e0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_DMA_Init+0x1e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_DMA_Init+0x1e8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <HAL_DMA_Init+0x1ec>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Init+0x1f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_DMA_Init+0x1f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <HAL_DMA_Init+0x186>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e007      	b.n	8002236 <HAL_DMA_Init+0x196>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002236:	e02f      	b.n	8002298 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff fdd2 	bl	8001de0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d928      	bls.n	8002298 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e246      	b.n	80026e6 <HAL_DMA_Init+0x646>
 8002258:	40020010 	.word	0x40020010
 800225c:	40020028 	.word	0x40020028
 8002260:	40020040 	.word	0x40020040
 8002264:	40020058 	.word	0x40020058
 8002268:	40020070 	.word	0x40020070
 800226c:	40020088 	.word	0x40020088
 8002270:	400200a0 	.word	0x400200a0
 8002274:	400200b8 	.word	0x400200b8
 8002278:	40020410 	.word	0x40020410
 800227c:	40020428 	.word	0x40020428
 8002280:	40020440 	.word	0x40020440
 8002284:	40020458 	.word	0x40020458
 8002288:	40020470 	.word	0x40020470
 800228c:	40020488 	.word	0x40020488
 8002290:	400204a0 	.word	0x400204a0
 8002294:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1c8      	bne.n	8002238 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4b83      	ldr	r3, [pc, #524]	; (80024c0 <HAL_DMA_Init+0x420>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4313      	orrs	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022fc:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <HAL_DMA_Init+0x424>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <HAL_DMA_Init+0x428>)
 8002302:	4013      	ands	r3, r2
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d328      	bcc.n	800235c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b28      	cmp	r3, #40	; 0x28
 8002310:	d903      	bls.n	800231a <HAL_DMA_Init+0x27a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b2e      	cmp	r3, #46	; 0x2e
 8002318:	d917      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b3e      	cmp	r3, #62	; 0x3e
 8002320:	d903      	bls.n	800232a <HAL_DMA_Init+0x28a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b42      	cmp	r3, #66	; 0x42
 8002328:	d90f      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b46      	cmp	r3, #70	; 0x46
 8002330:	d903      	bls.n	800233a <HAL_DMA_Init+0x29a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b48      	cmp	r3, #72	; 0x48
 8002338:	d907      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b4e      	cmp	r3, #78	; 0x4e
 8002340:	d905      	bls.n	800234e <HAL_DMA_Init+0x2ae>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b52      	cmp	r3, #82	; 0x52
 8002348:	d801      	bhi.n	800234e <HAL_DMA_Init+0x2ae>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_DMA_Init+0x2b0>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b04      	cmp	r3, #4
 8002384:	d117      	bne.n	80023b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f002 fb3d 	bl	8004a18 <DMA_CheckFifoParam>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e197      	b.n	80026e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f002 fa78 	bl	80048b4 <DMA_CalcBaseAndBitshift>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e0cd      	b.n	8002576 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_DMA_Init+0x42c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a39      	ldr	r2, [pc, #228]	; (80024d0 <HAL_DMA_Init+0x430>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x434>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_DMA_Init+0x438>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_DMA_Init+0x43c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x38a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <HAL_DMA_Init+0x440>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_DMA_Init+0x444>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_DMA_Init+0x448>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_DMA_Init+0x38e>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_DMA_Init+0x390>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8097 	beq.w	8002564 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_DMA_Init+0x42c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d021      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_DMA_Init+0x430>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01c      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_DMA_Init+0x434>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d017      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_DMA_Init+0x438>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d012      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_DMA_Init+0x43c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_DMA_Init+0x440>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_DMA_Init+0x444>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_DMA_Init+0x448>)
 8002482:	4293      	cmp	r3, r2
 8002484:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_DMA_Init+0x44c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d020      	beq.n	80024f0 <HAL_DMA_Init+0x450>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b80      	cmp	r3, #128	; 0x80
 80024b4:	d102      	bne.n	80024bc <HAL_DMA_Init+0x41c>
 80024b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ba:	e01a      	b.n	80024f2 <HAL_DMA_Init+0x452>
 80024bc:	2300      	movs	r3, #0
 80024be:	e018      	b.n	80024f2 <HAL_DMA_Init+0x452>
 80024c0:	fe10803f 	.word	0xfe10803f
 80024c4:	5c001000 	.word	0x5c001000
 80024c8:	ffff0000 	.word	0xffff0000
 80024cc:	58025408 	.word	0x58025408
 80024d0:	5802541c 	.word	0x5802541c
 80024d4:	58025430 	.word	0x58025430
 80024d8:	58025444 	.word	0x58025444
 80024dc:	58025458 	.word	0x58025458
 80024e0:	5802546c 	.word	0x5802546c
 80024e4:	58025480 	.word	0x58025480
 80024e8:	58025494 	.word	0x58025494
 80024ec:	fffe000f 	.word	0xfffe000f
 80024f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002510:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002520:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <HAL_DMA_Init+0x650>)
 8002538:	4413      	add	r3, r2
 800253a:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_DMA_Init+0x654>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f002 f9b3 	bl	80048b4 <DMA_CalcBaseAndBitshift>
 800254e:	4603      	mov	r3, r0
 8002550:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2201      	movs	r2, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	e008      	b.n	8002576 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0b7      	b.n	80026e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <HAL_DMA_Init+0x658>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d072      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <HAL_DMA_Init+0x65c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d06d      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_DMA_Init+0x660>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d068      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <HAL_DMA_Init+0x664>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d063      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a59      	ldr	r2, [pc, #356]	; (8002708 <HAL_DMA_Init+0x668>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d05e      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_DMA_Init+0x66c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d059      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a56      	ldr	r2, [pc, #344]	; (8002710 <HAL_DMA_Init+0x670>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d054      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_DMA_Init+0x674>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04f      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a53      	ldr	r2, [pc, #332]	; (8002718 <HAL_DMA_Init+0x678>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <HAL_DMA_Init+0x67c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_DMA_Init+0x680>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_DMA_Init+0x684>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_DMA_Init+0x688>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_DMA_Init+0x68c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_DMA_Init+0x690>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_DMA_Init+0x694>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_DMA_Init+0x698>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_DMA_Init+0x69c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_DMA_Init+0x6a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a42      	ldr	r2, [pc, #264]	; (8002744 <HAL_DMA_Init+0x6a4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a41      	ldr	r2, [pc, #260]	; (8002748 <HAL_DMA_Init+0x6a8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_DMA_Init+0x6ac>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <HAL_DMA_Init+0x6b0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_DMA_Init+0x6b4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_DMA_Init+0x5ca>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_DMA_Init+0x5cc>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d032      	beq.n	80026d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f002 fa4d 	bl	8004b10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d102      	bne.n	8002684 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002698:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_DMA_Init+0x624>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d80c      	bhi.n	80026c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f002 faca 	bl	8004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e008      	b.n	80026d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	a7fdabf8 	.word	0xa7fdabf8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
 8002738:	58025408 	.word	0x58025408
 800273c:	5802541c 	.word	0x5802541c
 8002740:	58025430 	.word	0x58025430
 8002744:	58025444 	.word	0x58025444
 8002748:	58025458 	.word	0x58025458
 800274c:	5802546c 	.word	0x5802546c
 8002750:	58025480 	.word	0x58025480
 8002754:	58025494 	.word	0x58025494

08002758 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e226      	b.n	8002bc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Start_IT+0x2a>
 800277e:	2302      	movs	r3, #2
 8002780:	e21f      	b.n	8002bc2 <HAL_DMA_Start_IT+0x46a>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 820a 	bne.w	8002bac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a68      	ldr	r2, [pc, #416]	; (800294c <HAL_DMA_Start_IT+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d04a      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a66      	ldr	r2, [pc, #408]	; (8002950 <HAL_DMA_Start_IT+0x1f8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d045      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_DMA_Start_IT+0x1fc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d040      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a63      	ldr	r2, [pc, #396]	; (8002958 <HAL_DMA_Start_IT+0x200>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d03b      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a62      	ldr	r2, [pc, #392]	; (800295c <HAL_DMA_Start_IT+0x204>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d036      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_DMA_Start_IT+0x208>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5f      	ldr	r2, [pc, #380]	; (8002964 <HAL_DMA_Start_IT+0x20c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d02c      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_DMA_Start_IT+0x210>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d027      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5c      	ldr	r2, [pc, #368]	; (800296c <HAL_DMA_Start_IT+0x214>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5a      	ldr	r2, [pc, #360]	; (8002970 <HAL_DMA_Start_IT+0x218>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01d      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_DMA_Start_IT+0x21c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a57      	ldr	r2, [pc, #348]	; (8002978 <HAL_DMA_Start_IT+0x220>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_DMA_Start_IT+0x224>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_DMA_Start_IT+0x228>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a53      	ldr	r2, [pc, #332]	; (8002984 <HAL_DMA_Start_IT+0x22c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_DMA_Start_IT+0x230>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <HAL_DMA_Start_IT+0x100>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e007      	b.n	8002868 <HAL_DMA_Start_IT+0x110>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 fe74 	bl	800455c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a34      	ldr	r2, [pc, #208]	; (800294c <HAL_DMA_Start_IT+0x1f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d04a      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_DMA_Start_IT+0x1f8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d045      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_DMA_Start_IT+0x1fc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d040      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a30      	ldr	r2, [pc, #192]	; (8002958 <HAL_DMA_Start_IT+0x200>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d03b      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_DMA_Start_IT+0x204>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d036      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <HAL_DMA_Start_IT+0x208>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d031      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <HAL_DMA_Start_IT+0x20c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02c      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <HAL_DMA_Start_IT+0x210>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d027      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_DMA_Start_IT+0x214>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d022      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_DMA_Start_IT+0x218>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d01d      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_DMA_Start_IT+0x21c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d018      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_DMA_Start_IT+0x220>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <HAL_DMA_Start_IT+0x224>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <HAL_DMA_Start_IT+0x228>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_DMA_Start_IT+0x22c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_DMA_Start_IT+0x230>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_DMA_Start_IT+0x1c0>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_DMA_Start_IT+0x1c2>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 021e 	bic.w	r2, r3, #30
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0216 	orr.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03e      	beq.n	80029b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0208 	orr.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e035      	b.n	80029b8 <HAL_DMA_Start_IT+0x260>
 800294c:	40020010 	.word	0x40020010
 8002950:	40020028 	.word	0x40020028
 8002954:	40020040 	.word	0x40020040
 8002958:	40020058 	.word	0x40020058
 800295c:	40020070 	.word	0x40020070
 8002960:	40020088 	.word	0x40020088
 8002964:	400200a0 	.word	0x400200a0
 8002968:	400200b8 	.word	0x400200b8
 800296c:	40020410 	.word	0x40020410
 8002970:	40020428 	.word	0x40020428
 8002974:	40020440 	.word	0x40020440
 8002978:	40020458 	.word	0x40020458
 800297c:	40020470 	.word	0x40020470
 8002980:	40020488 	.word	0x40020488
 8002984:	400204a0 	.word	0x400204a0
 8002988:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 020e 	bic.w	r2, r3, #14
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 020a 	orr.w	r2, r2, #10
 800299e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0204 	orr.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_DMA_Start_IT+0x474>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d072      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a82      	ldr	r2, [pc, #520]	; (8002bd0 <HAL_DMA_Start_IT+0x478>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d06d      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_DMA_Start_IT+0x47c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d068      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <HAL_DMA_Start_IT+0x480>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d063      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_DMA_Start_IT+0x484>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d05e      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <HAL_DMA_Start_IT+0x488>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d059      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_DMA_Start_IT+0x48c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d054      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_DMA_Start_IT+0x490>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04f      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_DMA_Start_IT+0x494>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a76      	ldr	r2, [pc, #472]	; (8002bf0 <HAL_DMA_Start_IT+0x498>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_DMA_Start_IT+0x49c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_DMA_Start_IT+0x4a0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_DMA_Start_IT+0x4a4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	; (8002c00 <HAL_DMA_Start_IT+0x4a8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_DMA_Start_IT+0x4ac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6d      	ldr	r2, [pc, #436]	; (8002c08 <HAL_DMA_Start_IT+0x4b0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6b      	ldr	r2, [pc, #428]	; (8002c0c <HAL_DMA_Start_IT+0x4b4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_DMA_Start_IT+0x4b8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a68      	ldr	r2, [pc, #416]	; (8002c14 <HAL_DMA_Start_IT+0x4bc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_DMA_Start_IT+0x4c0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_DMA_Start_IT+0x4c4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <HAL_DMA_Start_IT+0x4c8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <HAL_DMA_Start_IT+0x4cc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_DMA_Start_IT+0x4d0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x354>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_Start_IT+0x356>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a37      	ldr	r2, [pc, #220]	; (8002bcc <HAL_DMA_Start_IT+0x474>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04a      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a36      	ldr	r2, [pc, #216]	; (8002bd0 <HAL_DMA_Start_IT+0x478>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d045      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <HAL_DMA_Start_IT+0x47c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <HAL_DMA_Start_IT+0x480>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03b      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <HAL_DMA_Start_IT+0x484>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d036      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_DMA_Start_IT+0x488>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_DMA_Start_IT+0x48c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02c      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <HAL_DMA_Start_IT+0x490>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_DMA_Start_IT+0x494>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_DMA_Start_IT+0x498>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01d      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_DMA_Start_IT+0x49c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_DMA_Start_IT+0x4a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_DMA_Start_IT+0x4a4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <HAL_DMA_Start_IT+0x4a8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_DMA_Start_IT+0x4ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_DMA_Start_IT+0x4b0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <HAL_DMA_Start_IT+0x442>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e012      	b.n	8002bc0 <HAL_DMA_Start_IT+0x468>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e009      	b.n	8002bc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	58025408 	.word	0x58025408
 8002c10:	5802541c 	.word	0x5802541c
 8002c14:	58025430 	.word	0x58025430
 8002c18:	58025444 	.word	0x58025444
 8002c1c:	58025458 	.word	0x58025458
 8002c20:	5802546c 	.word	0x5802546c
 8002c24:	58025480 	.word	0x58025480
 8002c28:	58025494 	.word	0x58025494

08002c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff f8d4 	bl	8001de0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e2dc      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e2cd      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <HAL_DMA_Abort+0x214>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d04a      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <HAL_DMA_Abort+0x218>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d045      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a73      	ldr	r2, [pc, #460]	; (8002e48 <HAL_DMA_Abort+0x21c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d040      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a71      	ldr	r2, [pc, #452]	; (8002e4c <HAL_DMA_Abort+0x220>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03b      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a70      	ldr	r2, [pc, #448]	; (8002e50 <HAL_DMA_Abort+0x224>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d036      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_DMA_Abort+0x228>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d031      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6d      	ldr	r2, [pc, #436]	; (8002e58 <HAL_DMA_Abort+0x22c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02c      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6b      	ldr	r2, [pc, #428]	; (8002e5c <HAL_DMA_Abort+0x230>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6a      	ldr	r2, [pc, #424]	; (8002e60 <HAL_DMA_Abort+0x234>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a68      	ldr	r2, [pc, #416]	; (8002e64 <HAL_DMA_Abort+0x238>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <HAL_DMA_Abort+0x23c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <HAL_DMA_Abort+0x240>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a64      	ldr	r2, [pc, #400]	; (8002e70 <HAL_DMA_Abort+0x244>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a62      	ldr	r2, [pc, #392]	; (8002e74 <HAL_DMA_Abort+0x248>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_DMA_Abort+0x24c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_DMA_Abort+0x250>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Abort+0xda>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_DMA_Abort+0xdc>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 021e 	bic.w	r2, r2, #30
 8002d1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00a      	b.n	8002d4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 020e 	bic.w	r2, r2, #14
 8002d42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <HAL_DMA_Abort+0x214>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d072      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <HAL_DMA_Abort+0x218>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d06d      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_DMA_Abort+0x21c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d068      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a37      	ldr	r2, [pc, #220]	; (8002e4c <HAL_DMA_Abort+0x220>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d063      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <HAL_DMA_Abort+0x224>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d05e      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_DMA_Abort+0x228>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d059      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_DMA_Abort+0x22c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d054      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_DMA_Abort+0x230>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04f      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <HAL_DMA_Abort+0x234>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_DMA_Abort+0x238>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_DMA_Abort+0x23c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_DMA_Abort+0x240>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <HAL_DMA_Abort+0x244>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_DMA_Abort+0x248>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_DMA_Abort+0x24c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_DMA_Abort+0x250>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_DMA_Abort+0x254>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_DMA_Abort+0x258>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_DMA_Abort+0x25c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_DMA_Abort+0x260>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_DMA_Abort+0x264>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_DMA_Abort+0x268>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_DMA_Abort+0x26c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_DMA_Abort+0x270>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d132      	bne.n	8002ea0 <HAL_DMA_Abort+0x274>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e031      	b.n	8002ea2 <HAL_DMA_Abort+0x276>
 8002e3e:	bf00      	nop
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8
 8002e80:	58025408 	.word	0x58025408
 8002e84:	5802541c 	.word	0x5802541c
 8002e88:	58025430 	.word	0x58025430
 8002e8c:	58025444 	.word	0x58025444
 8002e90:	58025458 	.word	0x58025458
 8002e94:	5802546c 	.word	0x5802546c
 8002e98:	58025480 	.word	0x58025480
 8002e9c:	58025494 	.word	0x58025494
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_DMA_Abort+0x444>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6b      	ldr	r2, [pc, #428]	; (8003074 <HAL_DMA_Abort+0x448>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_DMA_Abort+0x44c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a68      	ldr	r2, [pc, #416]	; (800307c <HAL_DMA_Abort+0x450>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a67      	ldr	r2, [pc, #412]	; (8003080 <HAL_DMA_Abort+0x454>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a65      	ldr	r2, [pc, #404]	; (8003084 <HAL_DMA_Abort+0x458>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a64      	ldr	r2, [pc, #400]	; (8003088 <HAL_DMA_Abort+0x45c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a62      	ldr	r2, [pc, #392]	; (800308c <HAL_DMA_Abort+0x460>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a61      	ldr	r2, [pc, #388]	; (8003090 <HAL_DMA_Abort+0x464>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5f      	ldr	r2, [pc, #380]	; (8003094 <HAL_DMA_Abort+0x468>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_DMA_Abort+0x46c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a5c      	ldr	r2, [pc, #368]	; (800309c <HAL_DMA_Abort+0x470>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_DMA_Abort+0x474>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <HAL_DMA_Abort+0x478>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_DMA_Abort+0x47c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_DMA_Abort+0x480>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_Abort+0x33c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e007      	b.n	8002f78 <HAL_DMA_Abort+0x34c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f78:	e013      	b.n	8002fa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7a:	f7fe ff31 	bl	8001de0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d90c      	bls.n	8002fa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12d      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <HAL_DMA_Abort+0x444>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04a      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_DMA_Abort+0x448>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d045      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <HAL_DMA_Abort+0x44c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_DMA_Abort+0x450>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d03b      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_DMA_Abort+0x454>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d036      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_DMA_Abort+0x458>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_DMA_Abort+0x45c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d02c      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_DMA_Abort+0x460>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_DMA_Abort+0x464>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_DMA_Abort+0x468>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_DMA_Abort+0x46c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_DMA_Abort+0x422>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_DMA_Abort+0x470>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_DMA_Abort+0x474>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_DMA_Abort+0x478>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_Abort+0x422>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_DMA_Abort+0x47c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_DMA_Abort+0x480>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_DMA_Abort+0x426>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_DMA_Abort+0x428>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02b      	beq.n	80030b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	e02a      	b.n	80030c6 <HAL_DMA_Abort+0x49a>
 8003070:	40020010 	.word	0x40020010
 8003074:	40020028 	.word	0x40020028
 8003078:	40020040 	.word	0x40020040
 800307c:	40020058 	.word	0x40020058
 8003080:	40020070 	.word	0x40020070
 8003084:	40020088 	.word	0x40020088
 8003088:	400200a0 	.word	0x400200a0
 800308c:	400200b8 	.word	0x400200b8
 8003090:	40020410 	.word	0x40020410
 8003094:	40020428 	.word	0x40020428
 8003098:	40020440 	.word	0x40020440
 800309c:	40020458 	.word	0x40020458
 80030a0:	40020470 	.word	0x40020470
 80030a4:	40020488 	.word	0x40020488
 80030a8:	400204a0 	.word	0x400204a0
 80030ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_DMA_Abort+0x5dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d072      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4d      	ldr	r2, [pc, #308]	; (800320c <HAL_DMA_Abort+0x5e0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d06d      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_DMA_Abort+0x5e4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d068      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <HAL_DMA_Abort+0x5e8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d063      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a49      	ldr	r2, [pc, #292]	; (8003218 <HAL_DMA_Abort+0x5ec>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d05e      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a47      	ldr	r2, [pc, #284]	; (800321c <HAL_DMA_Abort+0x5f0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d059      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_DMA_Abort+0x5f4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d054      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a44      	ldr	r2, [pc, #272]	; (8003224 <HAL_DMA_Abort+0x5f8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04f      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_DMA_Abort+0x5fc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04a      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_DMA_Abort+0x600>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d045      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_DMA_Abort+0x604>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d040      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_DMA_Abort+0x608>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d03b      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <HAL_DMA_Abort+0x60c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d036      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3b      	ldr	r2, [pc, #236]	; (800323c <HAL_DMA_Abort+0x610>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_DMA_Abort+0x614>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d02c      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a38      	ldr	r2, [pc, #224]	; (8003244 <HAL_DMA_Abort+0x618>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d027      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a37      	ldr	r2, [pc, #220]	; (8003248 <HAL_DMA_Abort+0x61c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a35      	ldr	r2, [pc, #212]	; (800324c <HAL_DMA_Abort+0x620>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01d      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_DMA_Abort+0x624>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_DMA_Abort+0x628>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_DMA_Abort+0x62c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2f      	ldr	r2, [pc, #188]	; (800325c <HAL_DMA_Abort+0x630>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <HAL_DMA_Abort+0x634>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <HAL_DMA_Abort+0x638>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Abort+0x58e>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Abort+0x590>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	40020040 	.word	0x40020040
 8003214:	40020058 	.word	0x40020058
 8003218:	40020070 	.word	0x40020070
 800321c:	40020088 	.word	0x40020088
 8003220:	400200a0 	.word	0x400200a0
 8003224:	400200b8 	.word	0x400200b8
 8003228:	40020410 	.word	0x40020410
 800322c:	40020428 	.word	0x40020428
 8003230:	40020440 	.word	0x40020440
 8003234:	40020458 	.word	0x40020458
 8003238:	40020470 	.word	0x40020470
 800323c:	40020488 	.word	0x40020488
 8003240:	400204a0 	.word	0x400204a0
 8003244:	400204b8 	.word	0x400204b8
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e205      	b.n	8003686 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e1fa      	b.n	8003686 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a8c      	ldr	r2, [pc, #560]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a8b      	ldr	r2, [pc, #556]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d045      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d040      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a88      	ldr	r2, [pc, #544]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03b      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a86      	ldr	r2, [pc, #536]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d036      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a85      	ldr	r2, [pc, #532]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d031      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02c      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a82      	ldr	r2, [pc, #520]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7f      	ldr	r2, [pc, #508]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01d      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7c      	ldr	r2, [pc, #496]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a79      	ldr	r2, [pc, #484]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a76      	ldr	r2, [pc, #472]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Abort_IT+0xcc>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_DMA_Abort_IT+0xce>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d065      	beq.n	8003406 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5e      	ldr	r2, [pc, #376]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4e      	ldr	r2, [pc, #312]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4c      	ldr	r2, [pc, #304]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a49      	ldr	r2, [pc, #292]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_Abort_IT+0x18c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e147      	b.n	8003684 <HAL_DMA_Abort_IT+0x41c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e13e      	b.n	8003684 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 020e 	bic.w	r2, r2, #14
 8003414:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a16      	ldr	r2, [pc, #88]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d128      	bne.n	8003508 <HAL_DMA_Abort_IT+0x2a0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e027      	b.n	8003518 <HAL_DMA_Abort_IT+0x2b0>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_DMA_Abort_IT+0x428>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d072      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5b      	ldr	r2, [pc, #364]	; (8003694 <HAL_DMA_Abort_IT+0x42c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d06d      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a59      	ldr	r2, [pc, #356]	; (8003698 <HAL_DMA_Abort_IT+0x430>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d068      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_DMA_Abort_IT+0x434>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d063      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <HAL_DMA_Abort_IT+0x438>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d05e      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_DMA_Abort_IT+0x43c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d059      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a53      	ldr	r2, [pc, #332]	; (80036a8 <HAL_DMA_Abort_IT+0x440>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d054      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_DMA_Abort_IT+0x444>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d04f      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_DMA_Abort_IT+0x448>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d04a      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_DMA_Abort_IT+0x44c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d045      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_DMA_Abort_IT+0x450>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d040      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_DMA_Abort_IT+0x454>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d03b      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_DMA_Abort_IT+0x458>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d036      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_DMA_Abort_IT+0x45c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d031      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a47      	ldr	r2, [pc, #284]	; (80036c8 <HAL_DMA_Abort_IT+0x460>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02c      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a46      	ldr	r2, [pc, #280]	; (80036cc <HAL_DMA_Abort_IT+0x464>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d027      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a44      	ldr	r2, [pc, #272]	; (80036d0 <HAL_DMA_Abort_IT+0x468>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d022      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a43      	ldr	r2, [pc, #268]	; (80036d4 <HAL_DMA_Abort_IT+0x46c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01d      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a41      	ldr	r2, [pc, #260]	; (80036d8 <HAL_DMA_Abort_IT+0x470>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a40      	ldr	r2, [pc, #256]	; (80036dc <HAL_DMA_Abort_IT+0x474>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <HAL_DMA_Abort_IT+0x478>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_DMA_Abort_IT+0x47c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_DMA_Abort_IT+0x480>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_DMA_Abort_IT+0x484>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_DMA_Abort_IT+0x3a4>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_DMA_Abort_IT+0x3a6>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003640:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003662:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	58025408 	.word	0x58025408
 80036d4:	5802541c 	.word	0x5802541c
 80036d8:	58025430 	.word	0x58025430
 80036dc:	58025444 	.word	0x58025444
 80036e0:	58025458 	.word	0x58025458
 80036e4:	5802546c 	.word	0x5802546c
 80036e8:	58025480 	.word	0x58025480
 80036ec:	58025494 	.word	0x58025494

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036fc:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_DMA_IRQHandler+0x1ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <HAL_DMA_IRQHandler+0x1b0>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5f      	ldr	r2, [pc, #380]	; (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5d      	ldr	r2, [pc, #372]	; (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	; (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5a      	ldr	r2, [pc, #360]	; (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a59      	ldr	r2, [pc, #356]	; (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a56      	ldr	r2, [pc, #344]	; (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a54      	ldr	r2, [pc, #336]	; (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a53      	ldr	r2, [pc, #332]	; (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_IRQHandler+0xd6>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 842b 	beq.w	8004024 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2208      	movs	r2, #8
 80037d8:	409a      	lsls	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a2 	beq.w	8003928 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d12f      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e02e      	b.n	80038f8 <HAL_DMA_IRQHandler+0x208>
 800389a:	bf00      	nop
 800389c:	24000000 	.word	0x24000000
 80038a0:	1b4e81b5 	.word	0x1b4e81b5
 80038a4:	40020010 	.word	0x40020010
 80038a8:	40020028 	.word	0x40020028
 80038ac:	40020040 	.word	0x40020040
 80038b0:	40020058 	.word	0x40020058
 80038b4:	40020070 	.word	0x40020070
 80038b8:	40020088 	.word	0x40020088
 80038bc:	400200a0 	.word	0x400200a0
 80038c0:	400200b8 	.word	0x400200b8
 80038c4:	40020410 	.word	0x40020410
 80038c8:	40020428 	.word	0x40020428
 80038cc:	40020440 	.word	0x40020440
 80038d0:	40020458 	.word	0x40020458
 80038d4:	40020470 	.word	0x40020470
 80038d8:	40020488 	.word	0x40020488
 80038dc:	400204a0 	.word	0x400204a0
 80038e0:	400204b8 	.word	0x400204b8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a67      	ldr	r2, [pc, #412]	; (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a66      	ldr	r2, [pc, #408]	; (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a64      	ldr	r2, [pc, #400]	; (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_DMA_IRQHandler+0x408>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a61      	ldr	r2, [pc, #388]	; (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a60      	ldr	r2, [pc, #384]	; (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_DMA_IRQHandler+0x414>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5b      	ldr	r2, [pc, #364]	; (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5a      	ldr	r2, [pc, #360]	; (8003b10 <HAL_DMA_IRQHandler+0x420>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_DMA_IRQHandler+0x424>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_DMA_IRQHandler+0x428>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a55      	ldr	r2, [pc, #340]	; (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a54      	ldr	r2, [pc, #336]	; (8003b20 <HAL_DMA_IRQHandler+0x430>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_DMA_IRQHandler+0x434>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10a      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x304>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e003      	b.n	80039fc <HAL_DMA_IRQHandler+0x30c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0202 	orr.w	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2204      	movs	r2, #4
 8003a26:	409a      	lsls	r2, r3
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808f 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <HAL_DMA_IRQHandler+0x408>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_DMA_IRQHandler+0x414>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_DMA_IRQHandler+0x420>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_DMA_IRQHandler+0x424>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_DMA_IRQHandler+0x428>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_DMA_IRQHandler+0x430>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_DMA_IRQHandler+0x434>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d12a      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x438>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e023      	b.n	8003b30 <HAL_DMA_IRQHandler+0x440>
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2210      	movs	r2, #16
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a6 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a85      	ldr	r2, [pc, #532]	; (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a83      	ldr	r2, [pc, #524]	; (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a82      	ldr	r2, [pc, #520]	; (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a80      	ldr	r2, [pc, #512]	; (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7f      	ldr	r2, [pc, #508]	; (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	; (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	; (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a79      	ldr	r2, [pc, #484]	; (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	; (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a76      	ldr	r2, [pc, #472]	; (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a74      	ldr	r2, [pc, #464]	; (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a70      	ldr	r2, [pc, #448]	; (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6e      	ldr	r2, [pc, #440]	; (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x52c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e009      	b.n	8003c30 <HAL_DMA_IRQHandler+0x540>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d024      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e01f      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
 8003c82:	e016      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0208 	bic.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2220      	movs	r2, #32
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8110 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d12b      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x6d0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e02a      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x6e4>
 8003d7e:	bf00      	nop
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8087 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d139      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x736>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	223f      	movs	r2, #63	; 0x3f
 8003e40:	409a      	lsls	r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 834a 	beq.w	80044f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
          }
          return;
 8003e68:	e344      	b.n	80044f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d018      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
 8003e96:	e027      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	e01e      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0210 	bic.w	r2, r2, #16
 8003ec6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8306 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8088 	beq.w	8004010 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2204      	movs	r2, #4
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_DMA_IRQHandler+0xa08>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a79      	ldr	r2, [pc, #484]	; (80040fc <HAL_DMA_IRQHandler+0xa0c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d045      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a77      	ldr	r2, [pc, #476]	; (8004100 <HAL_DMA_IRQHandler+0xa10>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a76      	ldr	r2, [pc, #472]	; (8004104 <HAL_DMA_IRQHandler+0xa14>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d03b      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a74      	ldr	r2, [pc, #464]	; (8004108 <HAL_DMA_IRQHandler+0xa18>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d036      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	; (800410c <HAL_DMA_IRQHandler+0xa1c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d031      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a71      	ldr	r2, [pc, #452]	; (8004110 <HAL_DMA_IRQHandler+0xa20>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02c      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a70      	ldr	r2, [pc, #448]	; (8004114 <HAL_DMA_IRQHandler+0xa24>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d027      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_DMA_IRQHandler+0xa28>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d022      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6d      	ldr	r2, [pc, #436]	; (800411c <HAL_DMA_IRQHandler+0xa2c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_DMA_IRQHandler+0xa30>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6a      	ldr	r2, [pc, #424]	; (8004124 <HAL_DMA_IRQHandler+0xa34>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a68      	ldr	r2, [pc, #416]	; (8004128 <HAL_DMA_IRQHandler+0xa38>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a67      	ldr	r2, [pc, #412]	; (800412c <HAL_DMA_IRQHandler+0xa3c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	; (8004130 <HAL_DMA_IRQHandler+0xa40>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a64      	ldr	r2, [pc, #400]	; (8004134 <HAL_DMA_IRQHandler+0xa44>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x8ca>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d307      	bcc.n	8003fe6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f2      	bne.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fe6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2203      	movs	r2, #3
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004006:	e003      	b.n	8004010 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8272 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e26c      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a43      	ldr	r2, [pc, #268]	; (8004138 <HAL_DMA_IRQHandler+0xa48>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a42      	ldr	r2, [pc, #264]	; (800413c <HAL_DMA_IRQHandler+0xa4c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <HAL_DMA_IRQHandler+0xa50>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3f      	ldr	r2, [pc, #252]	; (8004144 <HAL_DMA_IRQHandler+0xa54>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3d      	ldr	r2, [pc, #244]	; (8004148 <HAL_DMA_IRQHandler+0xa58>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_DMA_IRQHandler+0xa5c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <HAL_DMA_IRQHandler+0xa60>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a39      	ldr	r2, [pc, #228]	; (8004154 <HAL_DMA_IRQHandler+0xa64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_DMA_IRQHandler+0x988>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_DMA_IRQHandler+0x98a>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 823f 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2204      	movs	r2, #4
 8004092:	409a      	lsls	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80cd 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80c7 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2204      	movs	r2, #4
 80040b4:	409a      	lsls	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d049      	beq.n	8004158 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8210 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e0:	e20a      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8206 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f4:	e200      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
 80040f6:	bf00      	nop
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	58025408 	.word	0x58025408
 800413c:	5802541c 	.word	0x5802541c
 8004140:	58025430 	.word	0x58025430
 8004144:	58025444 	.word	0x58025444
 8004148:	58025458 	.word	0x58025458
 800414c:	5802546c 	.word	0x5802546c
 8004150:	58025480 	.word	0x58025480
 8004154:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d160      	bne.n	8004224 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a8c      	ldr	r2, [pc, #560]	; (8004398 <HAL_DMA_IRQHandler+0xca8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d04a      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a8a      	ldr	r2, [pc, #552]	; (800439c <HAL_DMA_IRQHandler+0xcac>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d045      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a89      	ldr	r2, [pc, #548]	; (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d040      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a87      	ldr	r2, [pc, #540]	; (80043a4 <HAL_DMA_IRQHandler+0xcb4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d03b      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a86      	ldr	r2, [pc, #536]	; (80043a8 <HAL_DMA_IRQHandler+0xcb8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d036      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a84      	ldr	r2, [pc, #528]	; (80043ac <HAL_DMA_IRQHandler+0xcbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d031      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a83      	ldr	r2, [pc, #524]	; (80043b0 <HAL_DMA_IRQHandler+0xcc0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d02c      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a81      	ldr	r2, [pc, #516]	; (80043b4 <HAL_DMA_IRQHandler+0xcc4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a80      	ldr	r2, [pc, #512]	; (80043b8 <HAL_DMA_IRQHandler+0xcc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a7e      	ldr	r2, [pc, #504]	; (80043bc <HAL_DMA_IRQHandler+0xccc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01d      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7d      	ldr	r2, [pc, #500]	; (80043c0 <HAL_DMA_IRQHandler+0xcd0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_DMA_IRQHandler+0xcd4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7a      	ldr	r2, [pc, #488]	; (80043c8 <HAL_DMA_IRQHandler+0xcd8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_DMA_IRQHandler+0xcdc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a77      	ldr	r2, [pc, #476]	; (80043d0 <HAL_DMA_IRQHandler+0xce0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_DMA_IRQHandler+0xce4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <HAL_DMA_IRQHandler+0xb24>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e007      	b.n	8004224 <HAL_DMA_IRQHandler+0xb34>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8165 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004236:	e15f      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2202      	movs	r2, #2
 8004242:	409a      	lsls	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c5 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80bf 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2202      	movs	r2, #2
 8004264:	409a      	lsls	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 813a 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004290:	e134      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8130 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a4:	e12a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d168      	bne.n	8004382 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a38      	ldr	r2, [pc, #224]	; (8004398 <HAL_DMA_IRQHandler+0xca8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a37      	ldr	r2, [pc, #220]	; (800439c <HAL_DMA_IRQHandler+0xcac>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_DMA_IRQHandler+0xcb4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <HAL_DMA_IRQHandler+0xcb8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_DMA_IRQHandler+0xcbc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <HAL_DMA_IRQHandler+0xcc0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <HAL_DMA_IRQHandler+0xcc4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_DMA_IRQHandler+0xcc8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_DMA_IRQHandler+0xccc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_DMA_IRQHandler+0xcd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_DMA_IRQHandler+0xcd4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_DMA_IRQHandler+0xcd8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <HAL_DMA_IRQHandler+0xcdc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_DMA_IRQHandler+0xce0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_DMA_IRQHandler+0xce4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <HAL_DMA_IRQHandler+0xc72>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0214 	bic.w	r2, r2, #20
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e007      	b.n	8004372 <HAL_DMA_IRQHandler+0xc82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020a 	bic.w	r2, r2, #10
 8004370:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80b8 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004394:	e0b2      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
 8004396:	bf00      	nop
 8004398:	40020010 	.word	0x40020010
 800439c:	40020028 	.word	0x40020028
 80043a0:	40020040 	.word	0x40020040
 80043a4:	40020058 	.word	0x40020058
 80043a8:	40020070 	.word	0x40020070
 80043ac:	40020088 	.word	0x40020088
 80043b0:	400200a0 	.word	0x400200a0
 80043b4:	400200b8 	.word	0x400200b8
 80043b8:	40020410 	.word	0x40020410
 80043bc:	40020428 	.word	0x40020428
 80043c0:	40020440 	.word	0x40020440
 80043c4:	40020458 	.word	0x40020458
 80043c8:	40020470 	.word	0x40020470
 80043cc:	40020488 	.word	0x40020488
 80043d0:	400204a0 	.word	0x400204a0
 80043d4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8088 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8082 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a41      	ldr	r2, [pc, #260]	; (8004504 <HAL_DMA_IRQHandler+0xe14>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <HAL_DMA_IRQHandler+0xe18>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3e      	ldr	r2, [pc, #248]	; (800450c <HAL_DMA_IRQHandler+0xe1c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_DMA_IRQHandler+0xe20>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3b      	ldr	r2, [pc, #236]	; (8004514 <HAL_DMA_IRQHandler+0xe24>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_DMA_IRQHandler+0xe28>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_DMA_IRQHandler+0xe2c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_DMA_IRQHandler+0xe30>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <HAL_DMA_IRQHandler+0xe34>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_DMA_IRQHandler+0xe38>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <HAL_DMA_IRQHandler+0xe3c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_IRQHandler+0xe40>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_DMA_IRQHandler+0xe44>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_DMA_IRQHandler+0xe48>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	; (800453c <HAL_DMA_IRQHandler+0xe4c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <HAL_DMA_IRQHandler+0xe50>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_DMA_IRQHandler+0xdbc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 021c 	bic.w	r2, r2, #28
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e007      	b.n	80044bc <HAL_DMA_IRQHandler+0xdcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020e 	bic.w	r2, r2, #14
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e004      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8

08004544 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a84      	ldr	r2, [pc, #528]	; (800478c <DMA_SetConfig+0x230>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d072      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a82      	ldr	r2, [pc, #520]	; (8004790 <DMA_SetConfig+0x234>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d06d      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a81      	ldr	r2, [pc, #516]	; (8004794 <DMA_SetConfig+0x238>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d068      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7f      	ldr	r2, [pc, #508]	; (8004798 <DMA_SetConfig+0x23c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d063      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7e      	ldr	r2, [pc, #504]	; (800479c <DMA_SetConfig+0x240>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d05e      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7c      	ldr	r2, [pc, #496]	; (80047a0 <DMA_SetConfig+0x244>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d059      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7b      	ldr	r2, [pc, #492]	; (80047a4 <DMA_SetConfig+0x248>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d054      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a79      	ldr	r2, [pc, #484]	; (80047a8 <DMA_SetConfig+0x24c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04f      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a78      	ldr	r2, [pc, #480]	; (80047ac <DMA_SetConfig+0x250>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a76      	ldr	r2, [pc, #472]	; (80047b0 <DMA_SetConfig+0x254>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a75      	ldr	r2, [pc, #468]	; (80047b4 <DMA_SetConfig+0x258>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <DMA_SetConfig+0x25c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a72      	ldr	r2, [pc, #456]	; (80047bc <DMA_SetConfig+0x260>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a70      	ldr	r2, [pc, #448]	; (80047c0 <DMA_SetConfig+0x264>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6f      	ldr	r2, [pc, #444]	; (80047c4 <DMA_SetConfig+0x268>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6d      	ldr	r2, [pc, #436]	; (80047c8 <DMA_SetConfig+0x26c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6c      	ldr	r2, [pc, #432]	; (80047cc <DMA_SetConfig+0x270>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6a      	ldr	r2, [pc, #424]	; (80047d0 <DMA_SetConfig+0x274>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a69      	ldr	r2, [pc, #420]	; (80047d4 <DMA_SetConfig+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a67      	ldr	r2, [pc, #412]	; (80047d8 <DMA_SetConfig+0x27c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a66      	ldr	r2, [pc, #408]	; (80047dc <DMA_SetConfig+0x280>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a64      	ldr	r2, [pc, #400]	; (80047e0 <DMA_SetConfig+0x284>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a63      	ldr	r2, [pc, #396]	; (80047e4 <DMA_SetConfig+0x288>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <DMA_SetConfig+0x28c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <DMA_SetConfig+0x10e>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <DMA_SetConfig+0x110>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004678:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800468a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a3e      	ldr	r2, [pc, #248]	; (800478c <DMA_SetConfig+0x230>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <DMA_SetConfig+0x234>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <DMA_SetConfig+0x238>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <DMA_SetConfig+0x23c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a38      	ldr	r2, [pc, #224]	; (800479c <DMA_SetConfig+0x240>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a37      	ldr	r2, [pc, #220]	; (80047a0 <DMA_SetConfig+0x244>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <DMA_SetConfig+0x248>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a34      	ldr	r2, [pc, #208]	; (80047a8 <DMA_SetConfig+0x24c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a32      	ldr	r2, [pc, #200]	; (80047ac <DMA_SetConfig+0x250>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <DMA_SetConfig+0x254>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <DMA_SetConfig+0x258>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <DMA_SetConfig+0x25c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <DMA_SetConfig+0x260>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <DMA_SetConfig+0x1d0>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <DMA_SetConfig+0x264>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <DMA_SetConfig+0x268>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <DMA_SetConfig+0x26c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <DMA_SetConfig+0x1d4>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <DMA_SetConfig+0x1d6>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d05a      	beq.n	80047ec <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	223f      	movs	r2, #63	; 0x3f
 8004740:	409a      	lsls	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004754:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d108      	bne.n	8004778 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004776:	e087      	b.n	8004888 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]
}
 8004788:	e07e      	b.n	8004888 <DMA_SetConfig+0x32c>
 800478a:	bf00      	nop
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
 80047cc:	58025408 	.word	0x58025408
 80047d0:	5802541c 	.word	0x5802541c
 80047d4:	58025430 	.word	0x58025430
 80047d8:	58025444 	.word	0x58025444
 80047dc:	58025458 	.word	0x58025458
 80047e0:	5802546c 	.word	0x5802546c
 80047e4:	58025480 	.word	0x58025480
 80047e8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <DMA_SetConfig+0x338>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <DMA_SetConfig+0x2e0>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <DMA_SetConfig+0x33c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <DMA_SetConfig+0x2e0>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <DMA_SetConfig+0x340>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <DMA_SetConfig+0x2e0>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <DMA_SetConfig+0x344>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <DMA_SetConfig+0x2e0>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <DMA_SetConfig+0x348>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <DMA_SetConfig+0x2e0>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <DMA_SetConfig+0x34c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <DMA_SetConfig+0x2e0>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <DMA_SetConfig+0x350>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <DMA_SetConfig+0x2e0>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <DMA_SetConfig+0x354>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <DMA_SetConfig+0x2e4>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <DMA_SetConfig+0x2e6>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2201      	movs	r2, #1
 8004850:	409a      	lsls	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d108      	bne.n	8004878 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	60da      	str	r2, [r3, #12]
}
 8004876:	e007      	b.n	8004888 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494

080048b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a42      	ldr	r2, [pc, #264]	; (80049cc <DMA_CalcBaseAndBitshift+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04a      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a41      	ldr	r2, [pc, #260]	; (80049d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d045      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <DMA_CalcBaseAndBitshift+0x120>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d040      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <DMA_CalcBaseAndBitshift+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d03b      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <DMA_CalcBaseAndBitshift+0x128>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d036      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3b      	ldr	r2, [pc, #236]	; (80049e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d031      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <DMA_CalcBaseAndBitshift+0x130>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02c      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a38      	ldr	r2, [pc, #224]	; (80049e8 <DMA_CalcBaseAndBitshift+0x134>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d027      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a36      	ldr	r2, [pc, #216]	; (80049ec <DMA_CalcBaseAndBitshift+0x138>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a35      	ldr	r2, [pc, #212]	; (80049f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01d      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a33      	ldr	r2, [pc, #204]	; (80049f4 <DMA_CalcBaseAndBitshift+0x140>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a32      	ldr	r2, [pc, #200]	; (80049f8 <DMA_CalcBaseAndBitshift+0x144>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a30      	ldr	r2, [pc, #192]	; (80049fc <DMA_CalcBaseAndBitshift+0x148>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <DMA_CalcBaseAndBitshift+0x150>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <DMA_CalcBaseAndBitshift+0x154>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <DMA_CalcBaseAndBitshift+0xac>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <DMA_CalcBaseAndBitshift+0xae>
 8004960:	2300      	movs	r3, #0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d024      	beq.n	80049b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3b10      	subs	r3, #16
 800496e:	4a27      	ldr	r2, [pc, #156]	; (8004a0c <DMA_CalcBaseAndBitshift+0x158>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d908      	bls.n	80049a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <DMA_CalcBaseAndBitshift+0x160>)
 8004996:	4013      	ands	r3, r2
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	659a      	str	r2, [r3, #88]	; 0x58
 800499e:	e00d      	b.n	80049bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <DMA_CalcBaseAndBitshift+0x160>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
 80049ae:	e005      	b.n	80049bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40020010 	.word	0x40020010
 80049d0:	40020028 	.word	0x40020028
 80049d4:	40020040 	.word	0x40020040
 80049d8:	40020058 	.word	0x40020058
 80049dc:	40020070 	.word	0x40020070
 80049e0:	40020088 	.word	0x40020088
 80049e4:	400200a0 	.word	0x400200a0
 80049e8:	400200b8 	.word	0x400200b8
 80049ec:	40020410 	.word	0x40020410
 80049f0:	40020428 	.word	0x40020428
 80049f4:	40020440 	.word	0x40020440
 80049f8:	40020458 	.word	0x40020458
 80049fc:	40020470 	.word	0x40020470
 8004a00:	40020488 	.word	0x40020488
 8004a04:	400204a0 	.word	0x400204a0
 8004a08:	400204b8 	.word	0x400204b8
 8004a0c:	aaaaaaab 	.word	0xaaaaaaab
 8004a10:	0800b328 	.word	0x0800b328
 8004a14:	fffffc00 	.word	0xfffffc00

08004a18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d120      	bne.n	8004a6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d858      	bhi.n	8004ae6 <DMA_CheckFifoParam+0xce>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <DMA_CheckFifoParam+0x24>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a5f 	.word	0x08004a5f
 8004a44:	08004a4d 	.word	0x08004a4d
 8004a48:	08004ae7 	.word	0x08004ae7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d048      	beq.n	8004aea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a5c:	e045      	b.n	8004aea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a66:	d142      	bne.n	8004aee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a6c:	e03f      	b.n	8004aee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a76:	d123      	bne.n	8004ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d838      	bhi.n	8004af2 <DMA_CheckFifoParam+0xda>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <DMA_CheckFifoParam+0x70>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004a9f 	.word	0x08004a9f
 8004a90:	08004a99 	.word	0x08004a99
 8004a94:	08004ab1 	.word	0x08004ab1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9c:	e030      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aae:	e022      	b.n	8004af6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ab8:	d11f      	bne.n	8004afa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004abe:	e01c      	b.n	8004afa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d902      	bls.n	8004ace <DMA_CheckFifoParam+0xb6>
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d003      	beq.n	8004ad4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004acc:	e018      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad2:	e015      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ae4:	e00b      	b.n	8004afe <DMA_CheckFifoParam+0xe6>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e00a      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004aea:	bf00      	nop
 8004aec:	e008      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
    break;
 8004afe:	bf00      	nop
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a36      	ldr	r2, [pc, #216]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a35      	ldr	r2, [pc, #212]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a32      	ldr	r2, [pc, #200]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a30      	ldr	r2, [pc, #192]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3b08      	subs	r3, #8
 8004b80:	4a28      	ldr	r2, [pc, #160]	; (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bac:	e024      	b.n	8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3b10      	subs	r3, #16
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d806      	bhi.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d902      	bls.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004be8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494
 8004c24:	cccccccd 	.word	0xcccccccd
 8004c28:	16009600 	.word	0x16009600
 8004c2c:	58025880 	.word	0x58025880
 8004c30:	aaaaaaab 	.word	0xaaaaaaab
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	4002040f 	.word	0x4002040f
 8004c3c:	10008200 	.word	0x10008200
 8004c40:	40020880 	.word	0x40020880

08004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04a      	beq.n	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d847      	bhi.n	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	; (8004cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ccc:	671a      	str	r2, [r3, #112]	; 0x70
 8004cce:	e009      	b.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ce2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	58025408 	.word	0x58025408
 8004d00:	5802541c 	.word	0x5802541c
 8004d04:	58025430 	.word	0x58025430
 8004d08:	58025444 	.word	0x58025444
 8004d0c:	58025458 	.word	0x58025458
 8004d10:	5802546c 	.word	0x5802546c
 8004d14:	58025480 	.word	0x58025480
 8004d18:	58025494 	.word	0x58025494
 8004d1c:	1600963f 	.word	0x1600963f
 8004d20:	58025940 	.word	0x58025940
 8004d24:	1000823f 	.word	0x1000823f
 8004d28:	40020940 	.word	0x40020940

08004d2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0c6      	b.n	8004ecc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc fc18 	bl	800157c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2223      	movs	r2, #35	; 0x23
 8004d50:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d52:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <HAL_ETH_Init+0x1a8>)
 8004d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d58:	4a5e      	ldr	r2, [pc, #376]	; (8004ed4 <HAL_ETH_Init+0x1a8>)
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d62:	4b5c      	ldr	r3, [pc, #368]	; (8004ed4 <HAL_ETH_Init+0x1a8>)
 8004d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7a1b      	ldrb	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fd f86d 	bl	8001e58 <HAL_SYSCFG_ETHInterfaceSelect>
 8004d7e:	e003      	b.n	8004d88 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d84:	f7fd f868 	bl	8001e58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7fd f81e 	bl	8001de0 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004da6:	e00f      	b.n	8004dc8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004da8:	f7fd f81a 	bl	8001de0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004db6:	d907      	bls.n	8004dc8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	22e0      	movs	r2, #224	; 0xe0
 8004dc2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e081      	b.n	8004ecc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e6      	bne.n	8004da8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fac0 	bl	8005360 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004de0:	f001 fea4 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_ETH_Init+0x1ac>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	0c9a      	lsrs	r2, r3, #18
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3a01      	subs	r2, #1
 8004df4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa13 	bl	8005224 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004e14:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	22e0      	movs	r2, #224	; 0xe0
 8004e30:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e04a      	b.n	8004ecc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e3e:	4413      	add	r3, r2
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <HAL_ETH_Init+0x1b0>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6952      	ldr	r2, [r2, #20]
 8004e4a:	0052      	lsls	r2, r2, #1
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6809      	ldr	r1, [r1, #0]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e56:	440b      	add	r3, r1
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fad8 	bl	8005410 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fb1c 	bl	800549e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	3305      	adds	r3, #5
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	3303      	adds	r3, #3
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	061a      	lsls	r2, r3, #24
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	3302      	adds	r3, #2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ea4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004eb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004eb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	431bde83 	.word	0x431bde83
 8004edc:	ffff8001 	.word	0xffff8001

08004ee0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004ef2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	791b      	ldrb	r3, [r3, #4]
 8004ef8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004efa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	7b1b      	ldrb	r3, [r3, #12]
 8004f00:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004f02:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	7b5b      	ldrb	r3, [r3, #13]
 8004f08:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f0a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	7b9b      	ldrb	r3, [r3, #14]
 8004f10:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	7bdb      	ldrb	r3, [r3, #15]
 8004f18:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f1a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	7c12      	ldrb	r2, [r2, #16]
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d102      	bne.n	8004f2a <ETH_SetMACConfig+0x4a>
 8004f24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f28:	e000      	b.n	8004f2c <ETH_SetMACConfig+0x4c>
 8004f2a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f2c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7c52      	ldrb	r2, [r2, #17]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d102      	bne.n	8004f3c <ETH_SetMACConfig+0x5c>
 8004f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f3a:	e000      	b.n	8004f3e <ETH_SetMACConfig+0x5e>
 8004f3c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f3e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	7c9b      	ldrb	r3, [r3, #18]
 8004f44:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f46:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f4c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004f52:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7f1b      	ldrb	r3, [r3, #28]
 8004f58:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004f5a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	7f5b      	ldrb	r3, [r3, #29]
 8004f60:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f62:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	7f92      	ldrb	r2, [r2, #30]
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d102      	bne.n	8004f72 <ETH_SetMACConfig+0x92>
 8004f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f70:	e000      	b.n	8004f74 <ETH_SetMACConfig+0x94>
 8004f72:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f74:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	7fdb      	ldrb	r3, [r3, #31]
 8004f7a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f7c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d102      	bne.n	8004f8e <ETH_SetMACConfig+0xae>
 8004f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f8c:	e000      	b.n	8004f90 <ETH_SetMACConfig+0xb0>
 8004f8e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f90:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f96:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f9e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004fa0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b56      	ldr	r3, [pc, #344]	; (800510c <ETH_SetMACConfig+0x22c>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fcc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004fd6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fde:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fe0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d102      	bne.n	8004ff2 <ETH_SetMACConfig+0x112>
 8004fec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ff0:	e000      	b.n	8004ff4 <ETH_SetMACConfig+0x114>
 8004ff2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004ff4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b42      	ldr	r3, [pc, #264]	; (8005110 <ETH_SetMACConfig+0x230>)
 8005006:	4013      	ands	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	430b      	orrs	r3, r1
 8005010:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005018:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <ETH_SetMACConfig+0x234>)
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	430b      	orrs	r3, r1
 8005034:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800503c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005042:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800504a:	2a00      	cmp	r2, #0
 800504c:	d101      	bne.n	8005052 <ETH_SetMACConfig+0x172>
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	e000      	b.n	8005054 <ETH_SetMACConfig+0x174>
 8005052:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005054:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005066:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800506a:	4013      	ands	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	430b      	orrs	r3, r1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800507c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005084:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f023 0103 	bic.w	r1, r3, #3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	430a      	orrs	r2, r1
 800509e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80050aa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d101      	bne.n	80050ce <ETH_SetMACConfig+0x1ee>
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	e000      	b.n	80050d0 <ETH_SetMACConfig+0x1f0>
 80050ce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80050d0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80050d8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050da:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80050e2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80050f0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	00048083 	.word	0x00048083
 8005110:	c0f88000 	.word	0xc0f88000
 8005114:	fffffef0 	.word	0xfffffef0

08005118 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b38      	ldr	r3, [pc, #224]	; (8005210 <ETH_SetDMAConfig+0xf8>)
 800512e:	4013      	ands	r3, r2
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	6809      	ldr	r1, [r1, #0]
 8005138:	431a      	orrs	r2, r3
 800513a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800513e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	791b      	ldrb	r3, [r3, #4]
 8005144:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800514a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	7b1b      	ldrb	r3, [r3, #12]
 8005150:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f241 0304 	movw	r3, #4100	; 0x1004
 800515e:	4413      	add	r3, r2
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <ETH_SetDMAConfig+0xfc>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	431a      	orrs	r2, r3
 800516e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005172:	440b      	add	r3, r1
 8005174:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	7b5b      	ldrb	r3, [r3, #13]
 800517a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b22      	ldr	r3, [pc, #136]	; (8005218 <ETH_SetDMAConfig+0x100>)
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	431a      	orrs	r2, r3
 800519a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800519e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	7d1b      	ldrb	r3, [r3, #20]
 80051a8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80051aa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	7f5b      	ldrb	r3, [r3, #29]
 80051b0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f241 1304 	movw	r3, #4356	; 0x1104
 80051be:	4413      	add	r3, r2
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <ETH_SetDMAConfig+0x104>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6811      	ldr	r1, [r2, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80051d2:	440b      	add	r3, r1
 80051d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	7f1b      	ldrb	r3, [r3, #28]
 80051da:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f241 1308 	movw	r3, #4360	; 0x1108
 80051ec:	4413      	add	r3, r2
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <ETH_SetDMAConfig+0x108>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6811      	ldr	r1, [r2, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f241 1308 	movw	r3, #4360	; 0x1108
 8005200:	440b      	add	r3, r1
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	ffff87fd 	.word	0xffff87fd
 8005214:	ffff2ffe 	.word	0xffff2ffe
 8005218:	fffec000 	.word	0xfffec000
 800521c:	ffc0efef 	.word	0xffc0efef
 8005220:	7fc0ffff 	.word	0x7fc0ffff

08005224 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0a4      	sub	sp, #144	; 0x90
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005232:	2300      	movs	r3, #0
 8005234:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800526c:	2300      	movs	r3, #0
 800526e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800527c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005280:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005288:	2300      	movs	r3, #0
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800529e:	2300      	movs	r3, #0
 80052a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80052a6:	2300      	movs	r3, #0
 80052a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80052bc:	2320      	movs	r3, #32
 80052be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80052ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80052e0:	2302      	movs	r3, #2
 80052e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80052fe:	2300      	movs	r3, #0
 8005300:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fde6 	bl	8004ee0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005314:	2301      	movs	r3, #1
 8005316:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005318:	2301      	movs	r3, #1
 800531a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005326:	2300      	movs	r3, #0
 8005328:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800532e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005332:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800533c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005344:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fee1 	bl	8005118 <ETH_SetDMAConfig>
}
 8005356:	bf00      	nop
 8005358:	3790      	adds	r7, #144	; 0x90
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005370:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005378:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800537a:	f001 fbd7 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 800537e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a1e      	ldr	r2, [pc, #120]	; (80053fc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d908      	bls.n	800539a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d804      	bhi.n	800539a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e027      	b.n	80053ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d908      	bls.n	80053b4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d204      	bcs.n	80053b4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e01a      	b.n	80053ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a13      	ldr	r2, [pc, #76]	; (8005404 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d303      	bcc.n	80053c4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d911      	bls.n	80053e8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d908      	bls.n	80053de <ETH_MAC_MDIO_ClkConfig+0x7e>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a0f      	ldr	r2, [pc, #60]	; (800540c <ETH_MAC_MDIO_ClkConfig+0xac>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d804      	bhi.n	80053de <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e005      	b.n	80053ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e000      	b.n	80053ea <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80053e8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	01312cff 	.word	0x01312cff
 8005400:	02160ebf 	.word	0x02160ebf
 8005404:	03938700 	.word	0x03938700
 8005408:	05f5e0ff 	.word	0x05f5e0ff
 800540c:	08f0d17f 	.word	0x08f0d17f

08005410 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e01d      	b.n	800545a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68d9      	ldr	r1, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2200      	movs	r2, #0
 8005446:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	3206      	adds	r2, #6
 8005450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d9de      	bls.n	800541e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f241 132c 	movw	r3, #4396	; 0x112c
 800546e:	4413      	add	r3, r2
 8005470:	2203      	movs	r2, #3
 8005472:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68d9      	ldr	r1, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005480:	4413      	add	r3, r2
 8005482:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e024      	b.n	80054f6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6919      	ldr	r1, [r3, #16]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3310      	adds	r3, #16
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d9d7      	bls.n	80054ac <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005522:	4413      	add	r3, r2
 8005524:	2203      	movs	r2, #3
 8005526:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6919      	ldr	r1, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	f241 131c 	movw	r3, #4380	; 0x111c
 8005534:	4413      	add	r3, r2
 8005536:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f241 1328 	movw	r3, #4392	; 0x1128
 8005548:	4413      	add	r3, r2
 800554a:	6019      	str	r1, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_GPIO_Init+0x234>)
 8005568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800556a:	e194      	b.n	8005896 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2101      	movs	r1, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8186 	beq.w	8005890 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d00b      	beq.n	80055a4 <HAL_GPIO_Init+0x4c>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d007      	beq.n	80055a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005598:	2b11      	cmp	r3, #17
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b12      	cmp	r3, #18
 80055a2:	d130      	bne.n	8005606 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	2203      	movs	r2, #3
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4013      	ands	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055da:	2201      	movs	r2, #1
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0201 	and.w	r2, r3, #1
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0xee>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b12      	cmp	r3, #18
 8005644:	d123      	bne.n	800568e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	08da      	lsrs	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3208      	adds	r2, #8
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	220f      	movs	r2, #15
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	08da      	lsrs	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3208      	adds	r2, #8
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0203 	and.w	r2, r3, #3
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80e0 	beq.w	8005890 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056d0:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <HAL_GPIO_Init+0x238>)
 80056d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d6:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <HAL_GPIO_Init+0x238>)
 80056d8:	f043 0302 	orr.w	r3, r3, #2
 80056dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_GPIO_Init+0x238>)
 80056e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ee:	4a29      	ldr	r2, [pc, #164]	; (8005794 <HAL_GPIO_Init+0x23c>)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	089b      	lsrs	r3, r3, #2
 80056f4:	3302      	adds	r3, #2
 80056f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	220f      	movs	r2, #15
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43db      	mvns	r3, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4013      	ands	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a20      	ldr	r2, [pc, #128]	; (8005798 <HAL_GPIO_Init+0x240>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d052      	beq.n	80057c0 <HAL_GPIO_Init+0x268>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1f      	ldr	r2, [pc, #124]	; (800579c <HAL_GPIO_Init+0x244>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d031      	beq.n	8005786 <HAL_GPIO_Init+0x22e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <HAL_GPIO_Init+0x248>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d02b      	beq.n	8005782 <HAL_GPIO_Init+0x22a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_GPIO_Init+0x24c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d025      	beq.n	800577e <HAL_GPIO_Init+0x226>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <HAL_GPIO_Init+0x250>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01f      	beq.n	800577a <HAL_GPIO_Init+0x222>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_GPIO_Init+0x254>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d019      	beq.n	8005776 <HAL_GPIO_Init+0x21e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <HAL_GPIO_Init+0x258>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_GPIO_Init+0x21a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <HAL_GPIO_Init+0x25c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00d      	beq.n	800576e <HAL_GPIO_Init+0x216>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_GPIO_Init+0x260>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <HAL_GPIO_Init+0x212>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_GPIO_Init+0x264>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_GPIO_Init+0x20e>
 8005762:	2309      	movs	r3, #9
 8005764:	e02d      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 8005766:	230a      	movs	r3, #10
 8005768:	e02b      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 800576a:	2308      	movs	r3, #8
 800576c:	e029      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 800576e:	2307      	movs	r3, #7
 8005770:	e027      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 8005772:	2306      	movs	r3, #6
 8005774:	e025      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 8005776:	2305      	movs	r3, #5
 8005778:	e023      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 800577a:	2304      	movs	r3, #4
 800577c:	e021      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 800577e:	2303      	movs	r3, #3
 8005780:	e01f      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 8005782:	2302      	movs	r3, #2
 8005784:	e01d      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 8005786:	2301      	movs	r3, #1
 8005788:	e01b      	b.n	80057c2 <HAL_GPIO_Init+0x26a>
 800578a:	bf00      	nop
 800578c:	58000080 	.word	0x58000080
 8005790:	58024400 	.word	0x58024400
 8005794:	58000400 	.word	0x58000400
 8005798:	58020000 	.word	0x58020000
 800579c:	58020400 	.word	0x58020400
 80057a0:	58020800 	.word	0x58020800
 80057a4:	58020c00 	.word	0x58020c00
 80057a8:	58021000 	.word	0x58021000
 80057ac:	58021400 	.word	0x58021400
 80057b0:	58021800 	.word	0x58021800
 80057b4:	58021c00 	.word	0x58021c00
 80057b8:	58022000 	.word	0x58022000
 80057bc:	58022400 	.word	0x58022400
 80057c0:	2300      	movs	r3, #0
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	f002 0203 	and.w	r2, r2, #3
 80057c8:	0092      	lsls	r2, r2, #2
 80057ca:	4093      	lsls	r3, r2
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d2:	4938      	ldr	r1, [pc, #224]	; (80058b4 <HAL_GPIO_Init+0x35c>)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	3302      	adds	r3, #2
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800585a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f ae63 	bne.w	800556c <HAL_GPIO_Init+0x14>
  }
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	58000400 	.word	0x58000400

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058d4:	e003      	b.n	80058de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	041a      	lsls	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <HAL_HSEM_FastTake+0x2c>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3320      	adds	r3, #32
 80058fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <HAL_HSEM_FastTake+0x30>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	58026400 	.word	0x58026400
 800591c:	80000300 	.word	0x80000300

08005920 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800592a:	4906      	ldr	r1, [pc, #24]	; (8005944 <HAL_HSEM_Release+0x24>)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	58026400 	.word	0x58026400

08005948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	b08f      	sub	sp, #60	; 0x3c
 800594c:	af0a      	add	r7, sp, #40	; 0x28
 800594e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e116      	b.n	8005b88 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fc f867 	bl	8001a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f005 f99f 	bl	800acdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	687e      	ldr	r6, [r7, #4]
 80059a6:	466d      	mov	r5, sp
 80059a8:	f106 0410 	add.w	r4, r6, #16
 80059ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80059bc:	1d33      	adds	r3, r6, #4
 80059be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059c0:	6838      	ldr	r0, [r7, #0]
 80059c2:	f005 f91d 	bl	800ac00 <USB_CoreInit>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0d7      	b.n	8005b88 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f005 f98d 	bl	800acfe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e04a      	b.n	8005a80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059ea:	7bfa      	ldrb	r2, [r7, #15]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	333d      	adds	r3, #61	; 0x3d
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	333c      	adds	r3, #60	; 0x3c
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	b298      	uxth	r0, r3
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	3342      	adds	r3, #66	; 0x42
 8005a26:	4602      	mov	r2, r0
 8005a28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	333f      	adds	r3, #63	; 0x3f
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3344      	adds	r3, #68	; 0x44
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3348      	adds	r3, #72	; 0x48
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3350      	adds	r3, #80	; 0x50
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d3af      	bcc.n	80059ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
 8005a8e:	e044      	b.n	8005b1a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ad2:	7bfa      	ldrb	r2, [r7, #15]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ae8:	7bfa      	ldrb	r2, [r7, #15]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005afe:	7bfa      	ldrb	r2, [r7, #15]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	3301      	adds	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3b5      	bcc.n	8005a90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	687e      	ldr	r6, [r7, #4]
 8005b2c:	466d      	mov	r5, sp
 8005b2e:	f106 0410 	add.w	r4, r6, #16
 8005b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b42:	1d33      	adds	r3, r6, #4
 8005b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b46:	6838      	ldr	r0, [r7, #0]
 8005b48:	f005 f904 	bl	800ad54 <USB_DevInit>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e014      	b.n	8005b88 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f80a 	bl	8005b90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f005 faa6 	bl	800b0d2 <USB_DevDisconnect>

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	10000003 	.word	0x10000003

08005bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005be0:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d00a      	beq.n	8005c02 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bec:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e040      	b.n	8005c80 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e03e      	b.n	8005c80 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c0a:	491f      	ldr	r1, [pc, #124]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c12:	f7fc f8e5 	bl	8001de0 <HAL_GetTick>
 8005c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c18:	e009      	b.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c1a:	f7fc f8e1 	bl	8001de0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c28:	d901      	bls.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e028      	b.n	8005c80 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c2e:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b1e      	cmp	r3, #30
 8005c40:	d008      	beq.n	8005c54 <HAL_PWREx_ConfigSupply+0x7c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b2e      	cmp	r3, #46	; 0x2e
 8005c46:	d005      	beq.n	8005c54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b1d      	cmp	r3, #29
 8005c4c:	d002      	beq.n	8005c54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b2d      	cmp	r3, #45	; 0x2d
 8005c52:	d114      	bne.n	8005c7e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c54:	f7fc f8c4 	bl	8001de0 <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c5a:	e009      	b.n	8005c70 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c5c:	f7fc f8c0 	bl	8001de0 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c6a:	d901      	bls.n	8005c70 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e007      	b.n	8005c80 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d1ee      	bne.n	8005c5c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	58024800 	.word	0x58024800

08005c8c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	60d3      	str	r3, [r2, #12]
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	58024800 	.word	0x58024800

08005cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e3ff      	b.n	80064be <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8087 	beq.w	8005dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ccc:	4b99      	ldr	r3, [pc, #612]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cd6:	4b97      	ldr	r3, [pc, #604]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d007      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x46>
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	2b18      	cmp	r3, #24
 8005ce6:	d110      	bne.n	8005d0a <HAL_RCC_OscConfig+0x5e>
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf2:	4b90      	ldr	r3, [pc, #576]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d06c      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x12c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d168      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e3d9      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x76>
 8005d14:	4b87      	ldr	r3, [pc, #540]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a86      	ldr	r2, [pc, #536]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e02e      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x98>
 8005d2a:	4b82      	ldr	r3, [pc, #520]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a81      	ldr	r2, [pc, #516]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b7f      	ldr	r3, [pc, #508]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7e      	ldr	r2, [pc, #504]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e01d      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0xbc>
 8005d4e:	4b79      	ldr	r3, [pc, #484]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a78      	ldr	r2, [pc, #480]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b76      	ldr	r3, [pc, #472]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a75      	ldr	r2, [pc, #468]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d68:	4b72      	ldr	r3, [pc, #456]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a71      	ldr	r2, [pc, #452]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b6f      	ldr	r3, [pc, #444]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc f82a 	bl	8001de0 <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fc f826 	bl	8001de0 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e38d      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005da2:	4b64      	ldr	r3, [pc, #400]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xe4>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc f816 	bl	8001de0 <HAL_GetTick>
 8005db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fc f812 	bl	8001de0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e379      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dca:	4b5a      	ldr	r3, [pc, #360]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x10c>
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80ae 	beq.w	8005f44 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de8:	4b52      	ldr	r3, [pc, #328]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005df0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005df2:	4b50      	ldr	r3, [pc, #320]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_RCC_OscConfig+0x162>
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	2b18      	cmp	r3, #24
 8005e02:	d13a      	bne.n	8005e7a <HAL_RCC_OscConfig+0x1ce>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d135      	bne.n	8005e7a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e0e:	4b49      	ldr	r3, [pc, #292]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_RCC_OscConfig+0x17a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e34b      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e26:	f7fc f80b 	bl	8001e40 <HAL_GetREVID>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d817      	bhi.n	8005e64 <HAL_RCC_OscConfig+0x1b8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d108      	bne.n	8005e4e <HAL_RCC_OscConfig+0x1a2>
 8005e3c:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e44:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e4a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4c:	e07a      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4e:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	031b      	lsls	r3, r3, #12
 8005e5c:	4935      	ldr	r1, [pc, #212]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e62:	e06f      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	4930      	ldr	r1, [pc, #192]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e78:	e064      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d045      	beq.n	8005f0e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e82:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 0219 	bic.w	r2, r3, #25
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4929      	ldr	r1, [pc, #164]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb ffa4 	bl	8001de0 <HAL_GetTick>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9c:	f7fb ffa0 	bl	8001de0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e307      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	f7fb ffc1 	bl	8001e40 <HAL_GetREVID>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d817      	bhi.n	8005ef8 <HAL_RCC_OscConfig+0x24c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x236>
 8005ed0:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ed8:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	6053      	str	r3, [r2, #4]
 8005ee0:	e030      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
 8005ee2:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	031b      	lsls	r3, r3, #12
 8005ef0:	4910      	ldr	r1, [pc, #64]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	604b      	str	r3, [r1, #4]
 8005ef6:	e025      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	490b      	ldr	r1, [pc, #44]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]
 8005f0c:	e01a      	b.n	8005f44 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <HAL_RCC_OscConfig+0x288>)
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fb ff61 	bl	8001de0 <HAL_GetTick>
 8005f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f22:	f7fb ff5d 	bl	8001de0 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d903      	bls.n	8005f38 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e2c4      	b.n	80064be <HAL_RCC_OscConfig+0x812>
 8005f34:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f38:	4ba4      	ldr	r3, [pc, #656]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ee      	bne.n	8005f22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80a9 	beq.w	80060a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f52:	4b9e      	ldr	r3, [pc, #632]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f5c:	4b9b      	ldr	r3, [pc, #620]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d007      	beq.n	8005f78 <HAL_RCC_OscConfig+0x2cc>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b18      	cmp	r3, #24
 8005f6c:	d13a      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x338>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d135      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f78:	4b94      	ldr	r3, [pc, #592]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_OscConfig+0x2e4>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e296      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f90:	f7fb ff56 	bl	8001e40 <HAL_GetREVID>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d817      	bhi.n	8005fce <HAL_RCC_OscConfig+0x322>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d108      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x30c>
 8005fa6:	4b89      	ldr	r3, [pc, #548]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fae:	4a87      	ldr	r2, [pc, #540]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fb6:	e075      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fb8:	4b84      	ldr	r3, [pc, #528]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	069b      	lsls	r3, r3, #26
 8005fc6:	4981      	ldr	r1, [pc, #516]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fcc:	e06a      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fce:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	497b      	ldr	r1, [pc, #492]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe2:	e05f      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d042      	beq.n	8006072 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fec:	4b77      	ldr	r3, [pc, #476]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a76      	ldr	r2, [pc, #472]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fb fef2 	bl	8001de0 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006000:	f7fb feee 	bl	8001de0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e255      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006012:	4b6e      	ldr	r3, [pc, #440]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800601e:	f7fb ff0f 	bl	8001e40 <HAL_GetREVID>
 8006022:	4603      	mov	r3, r0
 8006024:	f241 0203 	movw	r2, #4099	; 0x1003
 8006028:	4293      	cmp	r3, r2
 800602a:	d817      	bhi.n	800605c <HAL_RCC_OscConfig+0x3b0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	2b20      	cmp	r3, #32
 8006032:	d108      	bne.n	8006046 <HAL_RCC_OscConfig+0x39a>
 8006034:	4b65      	ldr	r3, [pc, #404]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800603c:	4a63      	ldr	r2, [pc, #396]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800603e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006042:	6053      	str	r3, [r2, #4]
 8006044:	e02e      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
 8006046:	4b61      	ldr	r3, [pc, #388]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	069b      	lsls	r3, r3, #26
 8006054:	495d      	ldr	r1, [pc, #372]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006056:	4313      	orrs	r3, r2
 8006058:	604b      	str	r3, [r1, #4]
 800605a:	e023      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
 800605c:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	4958      	ldr	r1, [pc, #352]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e018      	b.n	80060a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006072:	4b56      	ldr	r3, [pc, #344]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a55      	ldr	r2, [pc, #340]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607e:	f7fb feaf 	bl	8001de0 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006086:	f7fb feab 	bl	8001de0 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e212      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006098:	4b4c      	ldr	r3, [pc, #304]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f0      	bne.n	8006086 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d036      	beq.n	800611e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b8:	4b44      	ldr	r3, [pc, #272]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 80060ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060bc:	4a43      	ldr	r2, [pc, #268]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fb fe8c 	bl	8001de0 <HAL_GetTick>
 80060c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060cc:	f7fb fe88 	bl	8001de0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e1ef      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060de:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 80060e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x420>
 80060ea:	e018      	b.n	800611e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ec:	4b37      	ldr	r3, [pc, #220]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	4a36      	ldr	r2, [pc, #216]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fb fe72 	bl	8001de0 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006100:	f7fb fe6e 	bl	8001de0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e1d5      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006112:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d036      	beq.n	8006198 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d019      	beq.n	8006166 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a25      	ldr	r2, [pc, #148]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800613c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800613e:	f7fb fe4f 	bl	8001de0 <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006146:	f7fb fe4b 	bl	8001de0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e1b2      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006158:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x49a>
 8006164:	e018      	b.n	8006198 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006166:	4b19      	ldr	r3, [pc, #100]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800616c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006172:	f7fb fe35 	bl	8001de0 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800617a:	f7fb fe31 	bl	8001de0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e198      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <HAL_RCC_OscConfig+0x520>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8085 	beq.w	80062b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_RCC_OscConfig+0x524>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <HAL_RCC_OscConfig+0x524>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061b2:	f7fb fe15 	bl	8001de0 <HAL_GetTick>
 80061b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b8:	e00c      	b.n	80061d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fb fe11 	bl	8001de0 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b64      	cmp	r3, #100	; 0x64
 80061c6:	d905      	bls.n	80061d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e178      	b.n	80064be <HAL_RCC_OscConfig+0x812>
 80061cc:	58024400 	.word	0x58024400
 80061d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d4:	4b96      	ldr	r3, [pc, #600]	; (8006430 <HAL_RCC_OscConfig+0x784>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ec      	beq.n	80061ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d106      	bne.n	80061f6 <HAL_RCC_OscConfig+0x54a>
 80061e8:	4b92      	ldr	r3, [pc, #584]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	4a91      	ldr	r2, [pc, #580]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70
 80061f4:	e02d      	b.n	8006252 <HAL_RCC_OscConfig+0x5a6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x56c>
 80061fe:	4b8d      	ldr	r3, [pc, #564]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a8c      	ldr	r2, [pc, #560]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
 800620a:	4b8a      	ldr	r3, [pc, #552]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	4a89      	ldr	r2, [pc, #548]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006210:	f023 0304 	bic.w	r3, r3, #4
 8006214:	6713      	str	r3, [r2, #112]	; 0x70
 8006216:	e01c      	b.n	8006252 <HAL_RCC_OscConfig+0x5a6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d10c      	bne.n	800623a <HAL_RCC_OscConfig+0x58e>
 8006220:	4b84      	ldr	r3, [pc, #528]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a83      	ldr	r2, [pc, #524]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
 800622c:	4b81      	ldr	r3, [pc, #516]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	4a80      	ldr	r2, [pc, #512]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	6713      	str	r3, [r2, #112]	; 0x70
 8006238:	e00b      	b.n	8006252 <HAL_RCC_OscConfig+0x5a6>
 800623a:	4b7e      	ldr	r3, [pc, #504]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a7d      	ldr	r2, [pc, #500]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
 8006246:	4b7b      	ldr	r3, [pc, #492]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a7a      	ldr	r2, [pc, #488]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d015      	beq.n	8006286 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fb fdc1 	bl	8001de0 <HAL_GetTick>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fb fdbd 	bl	8001de0 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e122      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006278:	4b6e      	ldr	r3, [pc, #440]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0ee      	beq.n	8006262 <HAL_RCC_OscConfig+0x5b6>
 8006284:	e014      	b.n	80062b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006286:	f7fb fdab 	bl	8001de0 <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800628c:	e00a      	b.n	80062a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fb fda7 	bl	8001de0 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e10c      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062a4:	4b63      	ldr	r3, [pc, #396]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ee      	bne.n	800628e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8101 	beq.w	80064bc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062ba:	4b5e      	ldr	r3, [pc, #376]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c2:	2b18      	cmp	r3, #24
 80062c4:	f000 80bc 	beq.w	8006440 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	f040 8095 	bne.w	80063fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d2:	4b58      	ldr	r3, [pc, #352]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a57      	ldr	r2, [pc, #348]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80062d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fb fd7f 	bl	8001de0 <HAL_GetTick>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e6:	f7fb fd7b 	bl	8001de0 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e0e2      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f8:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006304:	4b4b      	ldr	r3, [pc, #300]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006308:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <HAL_RCC_OscConfig+0x78c>)
 800630a:	4013      	ands	r3, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006314:	0112      	lsls	r2, r2, #4
 8006316:	430a      	orrs	r2, r1
 8006318:	4946      	ldr	r1, [pc, #280]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800631a:	4313      	orrs	r3, r2
 800631c:	628b      	str	r3, [r1, #40]	; 0x28
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	3b01      	subs	r3, #1
 8006324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	3b01      	subs	r3, #1
 800632e:	025b      	lsls	r3, r3, #9
 8006330:	b29b      	uxth	r3, r3
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	3b01      	subs	r3, #1
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	3b01      	subs	r3, #1
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800634e:	4939      	ldr	r1, [pc, #228]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006350:	4313      	orrs	r3, r2
 8006352:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006354:	4b37      	ldr	r3, [pc, #220]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a36      	ldr	r2, [pc, #216]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006360:	4b34      	ldr	r3, [pc, #208]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <HAL_RCC_OscConfig+0x790>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800636c:	00d2      	lsls	r2, r2, #3
 800636e:	4931      	ldr	r1, [pc, #196]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006370:	4313      	orrs	r3, r2
 8006372:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006374:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f023 020c 	bic.w	r2, r3, #12
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	492c      	ldr	r1, [pc, #176]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006382:	4313      	orrs	r3, r2
 8006384:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006386:	4b2b      	ldr	r3, [pc, #172]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f023 0202 	bic.w	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	4928      	ldr	r1, [pc, #160]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006394:	4313      	orrs	r3, r2
 8006396:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006398:	4b26      	ldr	r3, [pc, #152]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a25      	ldr	r2, [pc, #148]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 800639e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a4:	4b23      	ldr	r3, [pc, #140]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063b0:	4b20      	ldr	r3, [pc, #128]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a1f      	ldr	r2, [pc, #124]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a19      	ldr	r2, [pc, #100]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fd04 	bl	8001de0 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fb fd00 	bl	8001de0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e067      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x730>
 80063fa:	e05f      	b.n	80064bc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0c      	ldr	r2, [pc, #48]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb fcea 	bl	8001de0 <HAL_GetTick>
 800640c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006410:	f7fb fce6 	bl	8001de0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e04d      	b.n	80064be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006422:	4b04      	ldr	r3, [pc, #16]	; (8006434 <HAL_RCC_OscConfig+0x788>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x764>
 800642e:	e045      	b.n	80064bc <HAL_RCC_OscConfig+0x810>
 8006430:	58024800 	.word	0x58024800
 8006434:	58024400 	.word	0x58024400
 8006438:	fffffc0c 	.word	0xfffffc0c
 800643c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006440:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <HAL_RCC_OscConfig+0x81c>)
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006446:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <HAL_RCC_OscConfig+0x81c>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	d031      	beq.n	80064b8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f003 0203 	and.w	r2, r3, #3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d12a      	bne.n	80064b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d122      	bne.n	80064b8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d11a      	bne.n	80064b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d111      	bne.n	80064b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d108      	bne.n	80064b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	0e1b      	lsrs	r3, r3, #24
 80064aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d001      	beq.n	80064bc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	; 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	58024400 	.word	0x58024400

080064cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e19c      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e0:	4b8a      	ldr	r3, [pc, #552]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d910      	bls.n	8006510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ee:	4b87      	ldr	r3, [pc, #540]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 020f 	bic.w	r2, r3, #15
 80064f6:	4985      	ldr	r1, [pc, #532]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fe:	4b83      	ldr	r3, [pc, #524]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e184      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	4b7b      	ldr	r3, [pc, #492]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006528:	429a      	cmp	r2, r3
 800652a:	d908      	bls.n	800653e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800652c:	4b78      	ldr	r3, [pc, #480]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4975      	ldr	r1, [pc, #468]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800653a:	4313      	orrs	r3, r2
 800653c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d010      	beq.n	800656c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	4b70      	ldr	r3, [pc, #448]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006556:	429a      	cmp	r2, r3
 8006558:	d908      	bls.n	800656c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800655a:	4b6d      	ldr	r3, [pc, #436]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	496a      	ldr	r1, [pc, #424]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006568:	4313      	orrs	r3, r2
 800656a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b00      	cmp	r3, #0
 8006576:	d010      	beq.n	800659a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	4b64      	ldr	r3, [pc, #400]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006584:	429a      	cmp	r2, r3
 8006586:	d908      	bls.n	800659a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006588:	4b61      	ldr	r3, [pc, #388]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	495e      	ldr	r1, [pc, #376]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006596:	4313      	orrs	r3, r2
 8006598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	4b59      	ldr	r3, [pc, #356]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d908      	bls.n	80065c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065b6:	4b56      	ldr	r3, [pc, #344]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	4953      	ldr	r1, [pc, #332]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	4b4d      	ldr	r3, [pc, #308]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d908      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e4:	4b4a      	ldr	r3, [pc, #296]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f023 020f 	bic.w	r2, r3, #15
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4947      	ldr	r1, [pc, #284]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d055      	beq.n	80066ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006602:	4b43      	ldr	r3, [pc, #268]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4940      	ldr	r1, [pc, #256]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006610:	4313      	orrs	r3, r2
 8006612:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d107      	bne.n	800662c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800661c:	4b3c      	ldr	r3, [pc, #240]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d121      	bne.n	800666c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0f6      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d107      	bne.n	8006644 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d115      	bne.n	800666c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0ea      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800664c:	4b30      	ldr	r3, [pc, #192]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0de      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800665c:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0d6      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800666c:	4b28      	ldr	r3, [pc, #160]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f023 0207 	bic.w	r2, r3, #7
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4925      	ldr	r1, [pc, #148]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800667a:	4313      	orrs	r3, r2
 800667c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fb fbaf 	bl	8001de0 <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006684:	e00a      	b.n	800669c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006686:	f7fb fbab 	bl	8001de0 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f241 3288 	movw	r2, #5000	; 0x1388
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e0be      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669c:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d1eb      	bne.n	8006686 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d010      	beq.n	80066dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d208      	bcs.n	80066dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f023 020f 	bic.w	r2, r3, #15
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	490e      	ldr	r1, [pc, #56]	; (8006710 <HAL_RCC_ClockConfig+0x244>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d214      	bcs.n	8006714 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 020f 	bic.w	r2, r3, #15
 80066f2:	4906      	ldr	r1, [pc, #24]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e086      	b.n	800681a <HAL_RCC_ClockConfig+0x34e>
 800670c:	52002000 	.word	0x52002000
 8006710:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d010      	beq.n	8006742 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	4b3f      	ldr	r3, [pc, #252]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800672c:	429a      	cmp	r2, r3
 800672e:	d208      	bcs.n	8006742 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006730:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	4939      	ldr	r1, [pc, #228]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 800673e:	4313      	orrs	r3, r2
 8006740:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d010      	beq.n	8006770 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800675a:	429a      	cmp	r2, r3
 800675c:	d208      	bcs.n	8006770 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800675e:	4b31      	ldr	r3, [pc, #196]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	492e      	ldr	r1, [pc, #184]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 800676c:	4313      	orrs	r3, r2
 800676e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d010      	beq.n	800679e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	4b28      	ldr	r3, [pc, #160]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006788:	429a      	cmp	r2, r3
 800678a:	d208      	bcs.n	800679e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	4922      	ldr	r1, [pc, #136]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 800679a:	4313      	orrs	r3, r2
 800679c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d010      	beq.n	80067cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d208      	bcs.n	80067cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	4917      	ldr	r1, [pc, #92]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067cc:	f000 f834 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	4912      	ldr	r1, [pc, #72]	; (8006828 <HAL_RCC_ClockConfig+0x35c>)
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
 80067e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067ea:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <HAL_RCC_ClockConfig+0x35c>)
 80067f4:	5cd3      	ldrb	r3, [r2, r3]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006800:	4a0a      	ldr	r2, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x360>)
 8006802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006804:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <HAL_RCC_ClockConfig+0x364>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_RCC_ClockConfig+0x368>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fb fa9c 	bl	8001d4c <HAL_InitTick>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
 8006828:	0800b318 	.word	0x0800b318
 800682c:	24000004 	.word	0x24000004
 8006830:	24000000 	.word	0x24000000
 8006834:	2400001c 	.word	0x2400001c

08006838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	; 0x24
 800683c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800683e:	4bb3      	ldr	r3, [pc, #716]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006846:	2b18      	cmp	r3, #24
 8006848:	f200 8155 	bhi.w	8006af6 <HAL_RCC_GetSysClockFreq+0x2be>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <HAL_RCC_GetSysClockFreq+0x1c>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	080068b9 	.word	0x080068b9
 8006858:	08006af7 	.word	0x08006af7
 800685c:	08006af7 	.word	0x08006af7
 8006860:	08006af7 	.word	0x08006af7
 8006864:	08006af7 	.word	0x08006af7
 8006868:	08006af7 	.word	0x08006af7
 800686c:	08006af7 	.word	0x08006af7
 8006870:	08006af7 	.word	0x08006af7
 8006874:	080068df 	.word	0x080068df
 8006878:	08006af7 	.word	0x08006af7
 800687c:	08006af7 	.word	0x08006af7
 8006880:	08006af7 	.word	0x08006af7
 8006884:	08006af7 	.word	0x08006af7
 8006888:	08006af7 	.word	0x08006af7
 800688c:	08006af7 	.word	0x08006af7
 8006890:	08006af7 	.word	0x08006af7
 8006894:	080068e5 	.word	0x080068e5
 8006898:	08006af7 	.word	0x08006af7
 800689c:	08006af7 	.word	0x08006af7
 80068a0:	08006af7 	.word	0x08006af7
 80068a4:	08006af7 	.word	0x08006af7
 80068a8:	08006af7 	.word	0x08006af7
 80068ac:	08006af7 	.word	0x08006af7
 80068b0:	08006af7 	.word	0x08006af7
 80068b4:	080068eb 	.word	0x080068eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b8:	4b94      	ldr	r3, [pc, #592]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c4:	4b91      	ldr	r3, [pc, #580]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	4a90      	ldr	r2, [pc, #576]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80068d6:	e111      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068d8:	4b8d      	ldr	r3, [pc, #564]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068da:	61bb      	str	r3, [r7, #24]
    break;
 80068dc:	e10e      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80068de:	4b8d      	ldr	r3, [pc, #564]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068e0:	61bb      	str	r3, [r7, #24]
    break;
 80068e2:	e10b      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80068e4:	4b8c      	ldr	r3, [pc, #560]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80068e6:	61bb      	str	r3, [r7, #24]
    break;
 80068e8:	e108      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068ea:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80068f4:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006900:	4b82      	ldr	r3, [pc, #520]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800690a:	4b80      	ldr	r3, [pc, #512]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	08db      	lsrs	r3, r3, #3
 8006910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80e1 	beq.w	8006af0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b02      	cmp	r3, #2
 8006932:	f000 8083 	beq.w	8006a3c <HAL_RCC_GetSysClockFreq+0x204>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b02      	cmp	r3, #2
 800693a:	f200 80a1 	bhi.w	8006a80 <HAL_RCC_GetSysClockFreq+0x248>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x114>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d056      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800694a:	e099      	b.n	8006a80 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800694c:	4b6f      	ldr	r3, [pc, #444]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d02d      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006958:	4b6c      	ldr	r3, [pc, #432]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	4a6b      	ldr	r2, [pc, #428]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b62      	ldr	r3, [pc, #392]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a02 	vldr	s12, [r7, #8]
 8006996:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069b2:	e087      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b20 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c6:	4b51      	ldr	r3, [pc, #324]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069da:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f6:	e065      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0a:	4b40      	ldr	r3, [pc, #256]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3a:	e043      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4e:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7e:	e021      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a92:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	0a5b      	lsrs	r3, r3, #9
 8006aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ace:	3301      	adds	r3, #1
 8006ad0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae8:	ee17 3a90 	vmov	r3, s15
 8006aec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006aee:	e005      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
    break;
 8006af4:	e002      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006af6:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006af8:	61bb      	str	r3, [r7, #24]
    break;
 8006afa:	bf00      	nop
  }

  return sysclockfreq;
 8006afc:	69bb      	ldr	r3, [r7, #24]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	03d09000 	.word	0x03d09000
 8006b14:	003d0900 	.word	0x003d0900
 8006b18:	007a1200 	.word	0x007a1200
 8006b1c:	46000000 	.word	0x46000000
 8006b20:	4c742400 	.word	0x4c742400
 8006b24:	4a742400 	.word	0x4a742400
 8006b28:	4af42400 	.word	0x4af42400

08006b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b32:	f7ff fe81 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 8006b36:	4602      	mov	r2, r0
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	490f      	ldr	r1, [pc, #60]	; (8006b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b44:	5ccb      	ldrb	r3, [r1, r3]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b5a:	5cd3      	ldrb	r3, [r2, r3]
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	fa22 f303 	lsr.w	r3, r2, r3
 8006b66:	4a07      	ldr	r2, [pc, #28]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b6a:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	0800b318 	.word	0x0800b318
 8006b84:	24000004 	.word	0x24000004
 8006b88:	24000000 	.word	0x24000000

08006b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b90:	f7ff ffcc 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	0800b318 	.word	0x0800b318

08006bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bbc:	f7ff ffb6 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	0800b318 	.word	0x0800b318

08006be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d03f      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c08:	d02a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c0e:	d824      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c14:	d018      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c1a:	d81e      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c24:	d007      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c26:	e018      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4bab      	ldr	r3, [pc, #684]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4aaa      	ldr	r2, [pc, #680]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c34:	e015      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f9cf 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c46:	e00c      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fa78 	bl	8008144 <RCCEx_PLL3_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c68:	4b9b      	ldr	r3, [pc, #620]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c74:	4998      	ldr	r1, [pc, #608]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	650b      	str	r3, [r1, #80]	; 0x50
 8006c7a:	e001      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d03d      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d826      	bhi.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cb1 	.word	0x08006cb1
 8006ca0:	08006cbf 	.word	0x08006cbf
 8006ca4:	08006cd1 	.word	0x08006cd1
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006ce9 	.word	0x08006ce9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb0:	4b89      	ldr	r3, [pc, #548]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	4a88      	ldr	r2, [pc, #544]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cbc:	e015      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 f98b 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cce:	e00c      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3324      	adds	r3, #36	; 0x24
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 fa34 	bl	8008144 <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ce0:	e003      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce6:	e000      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf0:	4b79      	ldr	r3, [pc, #484]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	f023 0207 	bic.w	r2, r3, #7
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	4976      	ldr	r1, [pc, #472]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	650b      	str	r3, [r1, #80]	; 0x50
 8006d02:	e001      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d042      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1c:	d02b      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d22:	d825      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d24:	2bc0      	cmp	r3, #192	; 0xc0
 8006d26:	d028      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d28:	2bc0      	cmp	r3, #192	; 0xc0
 8006d2a:	d821      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d016      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d81d      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d007      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006d3c:	e018      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3e:	4b66      	ldr	r3, [pc, #408]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a65      	ldr	r2, [pc, #404]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d4a:	e017      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f944 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e00e      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f9ed 	bl	8008144 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d6e:	e005      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d76:	bf00      	nop
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d82:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	4952      	ldr	r1, [pc, #328]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	650b      	str	r3, [r1, #80]	; 0x50
 8006d94:	e001      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d049      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006db0:	d030      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006db2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006db6:	d82a      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006db8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dbc:	d02c      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dc2:	d824      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc8:	d018      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dce:	d81e      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd8:	d007      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006dda:	e018      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ddc:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	4a3d      	ldr	r2, [pc, #244]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006de8:	e017      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f8f5 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dfa:	e00e      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 f99e 	bl	8008144 <RCCEx_PLL3_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e0c:	e005      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75fb      	strb	r3, [r7, #23]
      break;
 8006e12:	e002      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e2e:	492a      	ldr	r1, [pc, #168]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	658b      	str	r3, [r1, #88]	; 0x58
 8006e34:	e001      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04c      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e50:	d030      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e56:	d82a      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006e5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e62:	d824      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e68:	d018      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6e:	d81e      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e78:	d007      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e7a:	e018      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e88:	e017      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 f8a5 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e9a:	e00e      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 f94e 	bl	8008144 <RCCEx_PLL3_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eac:	e005      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb2:	e002      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10d      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ece:	4902      	ldr	r1, [pc, #8]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ed4:	e004      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006ed6:	bf00      	nop
 8006ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d032      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d01c      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d817      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d00c      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d813      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d016      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d10f      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f08:	4baf      	ldr	r3, [pc, #700]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	4aae      	ldr	r2, [pc, #696]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f14:	e00e      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f85f 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f26:	e005      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2c:	e002      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f3a:	4ba3      	ldr	r3, [pc, #652]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	49a0      	ldr	r1, [pc, #640]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d047      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f66:	d030      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6c:	d82a      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f72:	d02c      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f78:	d824      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7e:	d018      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f84:	d81e      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8e:	d007      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006f90:	e018      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b8d      	ldr	r3, [pc, #564]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	4a8c      	ldr	r2, [pc, #560]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f9e:	e017      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f81a 	bl	8007fe0 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fb0:	e00e      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f8c3 	bl	8008144 <RCCEx_PLL3_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fc2:	e005      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fd6:	4b7c      	ldr	r3, [pc, #496]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fda:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	4979      	ldr	r1, [pc, #484]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	650b      	str	r3, [r1, #80]	; 0x50
 8006fe8:	e001      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d049      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007002:	d02e      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007008:	d828      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800700a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800700e:	d02a      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007014:	d822      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800701a:	d026      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800701c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007020:	d81c      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007026:	d010      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800702c:	d816      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01d      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007036:	d111      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3304      	adds	r3, #4
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f000 ffce 	bl	8007fe0 <RCCEx_PLL2_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007048:	e012      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3324      	adds	r3, #36	; 0x24
 800704e:	2101      	movs	r1, #1
 8007050:	4618      	mov	r0, r3
 8007052:	f001 f877 	bl	8008144 <RCCEx_PLL3_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800705a:	e009      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
      break;
 8007060:	e006      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007062:	bf00      	nop
 8007064:	e004      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007066:	bf00      	nop
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800706e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007076:	4b54      	ldr	r3, [pc, #336]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	4951      	ldr	r1, [pc, #324]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	650b      	str	r3, [r1, #80]	; 0x50
 8007088:	e001      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d04b      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a4:	d02e      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80070a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070aa:	d828      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b0:	d02a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d822      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070bc:	d026      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80070be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070c2:	d81c      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c8:	d010      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d816      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01d      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80070d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d8:	d111      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3304      	adds	r3, #4
 80070de:	2101      	movs	r1, #1
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 ff7d 	bl	8007fe0 <RCCEx_PLL2_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070ea:	e012      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3324      	adds	r3, #36	; 0x24
 80070f0:	2101      	movs	r1, #1
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 f826 	bl	8008144 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070fc:	e009      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
      break;
 8007102:	e006      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007104:	bf00      	nop
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007118:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007126:	4928      	ldr	r1, [pc, #160]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	658b      	str	r3, [r1, #88]	; 0x58
 800712c:	e001      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02f      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007146:	d00e      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800714c:	d814      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d015      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007156:	d10f      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007158:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800715e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007164:	e00c      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	2101      	movs	r1, #1
 800716c:	4618      	mov	r0, r3
 800716e:	f000 ff37 	bl	8007fe0 <RCCEx_PLL2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
      break;
 800717c:	e000      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800717e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007186:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	490d      	ldr	r1, [pc, #52]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007194:	4313      	orrs	r3, r2
 8007196:	650b      	str	r3, [r1, #80]	; 0x50
 8007198:	e001      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d033      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d81c      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071f3 	.word	0x080071f3
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071db 	.word	0x080071db
 80071c4:	080071f3 	.word	0x080071f3
 80071c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071cc:	4bb8      	ldr	r3, [pc, #736]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	4ab7      	ldr	r2, [pc, #732]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071d8:	e00c      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	2102      	movs	r1, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fefd 	bl	8007fe0 <RCCEx_PLL2_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
      break;
 80071f0:	e000      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80071f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071fa:	4bad      	ldr	r3, [pc, #692]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	f023 0203 	bic.w	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	49aa      	ldr	r1, [pc, #680]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007208:	4313      	orrs	r3, r2
 800720a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800720c:	e001      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8086 	beq.w	800732c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007220:	4ba4      	ldr	r3, [pc, #656]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4aa3      	ldr	r2, [pc, #652]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800722c:	f7fa fdd8 	bl	8001de0 <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007232:	e009      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007234:	f7fa fdd4 	bl	8001de0 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b64      	cmp	r3, #100	; 0x64
 8007240:	d902      	bls.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	75fb      	strb	r3, [r7, #23]
        break;
 8007246:	e005      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007248:	4b9a      	ldr	r3, [pc, #616]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0ef      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d166      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800725a:	4b95      	ldr	r3, [pc, #596]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800725c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007264:	4053      	eors	r3, r2
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d013      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800726e:	4b90      	ldr	r3, [pc, #576]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007276:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007278:	4b8d      	ldr	r3, [pc, #564]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	4a8c      	ldr	r2, [pc, #560]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800727e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007282:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007284:	4b8a      	ldr	r3, [pc, #552]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	4a89      	ldr	r2, [pc, #548]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007290:	4a87      	ldr	r2, [pc, #540]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800729c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a0:	d115      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fa fd9d 	bl	8001de0 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a8:	e00b      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072aa:	f7fa fd99 	bl	8001de0 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d902      	bls.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	75fb      	strb	r3, [r7, #23]
            break;
 80072c0:	e005      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c2:	4b7b      	ldr	r3, [pc, #492]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0ed      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d126      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d10d      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80072e4:	4b72      	ldr	r3, [pc, #456]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072f2:	0919      	lsrs	r1, r3, #4
 80072f4:	4b70      	ldr	r3, [pc, #448]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80072f6:	400b      	ands	r3, r1
 80072f8:	496d      	ldr	r1, [pc, #436]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	610b      	str	r3, [r1, #16]
 80072fe:	e005      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007300:	4b6b      	ldr	r3, [pc, #428]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4a6a      	ldr	r2, [pc, #424]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800730a:	6113      	str	r3, [r2, #16]
 800730c:	4b68      	ldr	r3, [pc, #416]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800730e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800731a:	4965      	ldr	r1, [pc, #404]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800731c:	4313      	orrs	r3, r2
 800731e:	670b      	str	r3, [r1, #112]	; 0x70
 8007320:	e004      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	75bb      	strb	r3, [r7, #22]
 8007326:	e001      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d07e      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733c:	2b28      	cmp	r3, #40	; 0x28
 800733e:	d867      	bhi.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007417 	.word	0x08007417
 800734c:	08007411 	.word	0x08007411
 8007350:	08007411 	.word	0x08007411
 8007354:	08007411 	.word	0x08007411
 8007358:	08007411 	.word	0x08007411
 800735c:	08007411 	.word	0x08007411
 8007360:	08007411 	.word	0x08007411
 8007364:	08007411 	.word	0x08007411
 8007368:	080073ed 	.word	0x080073ed
 800736c:	08007411 	.word	0x08007411
 8007370:	08007411 	.word	0x08007411
 8007374:	08007411 	.word	0x08007411
 8007378:	08007411 	.word	0x08007411
 800737c:	08007411 	.word	0x08007411
 8007380:	08007411 	.word	0x08007411
 8007384:	08007411 	.word	0x08007411
 8007388:	080073ff 	.word	0x080073ff
 800738c:	08007411 	.word	0x08007411
 8007390:	08007411 	.word	0x08007411
 8007394:	08007411 	.word	0x08007411
 8007398:	08007411 	.word	0x08007411
 800739c:	08007411 	.word	0x08007411
 80073a0:	08007411 	.word	0x08007411
 80073a4:	08007411 	.word	0x08007411
 80073a8:	08007417 	.word	0x08007417
 80073ac:	08007411 	.word	0x08007411
 80073b0:	08007411 	.word	0x08007411
 80073b4:	08007411 	.word	0x08007411
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007411 	.word	0x08007411
 80073c0:	08007411 	.word	0x08007411
 80073c4:	08007411 	.word	0x08007411
 80073c8:	08007417 	.word	0x08007417
 80073cc:	08007411 	.word	0x08007411
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007411 	.word	0x08007411
 80073d8:	08007411 	.word	0x08007411
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007411 	.word	0x08007411
 80073e4:	08007411 	.word	0x08007411
 80073e8:	08007417 	.word	0x08007417
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	2101      	movs	r1, #1
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fdf4 	bl	8007fe0 <RCCEx_PLL2_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073fc:	e00c      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3324      	adds	r3, #36	; 0x24
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fe9d 	bl	8008144 <RCCEx_PLL3_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800740e:	e003      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	75fb      	strb	r3, [r7, #23]
      break;
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800741e:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007422:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800742a:	4921      	ldr	r1, [pc, #132]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800742c:	4313      	orrs	r3, r2
 800742e:	654b      	str	r3, [r1, #84]	; 0x54
 8007430:	e001      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d03e      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007446:	2b05      	cmp	r3, #5
 8007448:	d820      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007493 	.word	0x08007493
 8007454:	08007469 	.word	0x08007469
 8007458:	0800747b 	.word	0x0800747b
 800745c:	08007493 	.word	0x08007493
 8007460:	08007493 	.word	0x08007493
 8007464:	08007493 	.word	0x08007493
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	2101      	movs	r1, #1
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fdb6 	bl	8007fe0 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007478:	e00c      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	2101      	movs	r1, #1
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fe5f 	bl	8008144 <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800748a:	e003      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e000      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d110      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	f023 0207 	bic.w	r2, r3, #7
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a6:	4902      	ldr	r1, [pc, #8]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	654b      	str	r3, [r1, #84]	; 0x54
 80074ac:	e008      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
 80074b4:	58024800 	.word	0x58024800
 80074b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d039      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d820      	bhi.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	0800751f 	.word	0x0800751f
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	08007507 	.word	0x08007507
 80074e8:	0800751f 	.word	0x0800751f
 80074ec:	0800751f 	.word	0x0800751f
 80074f0:	0800751f 	.word	0x0800751f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fd70 	bl	8007fe0 <RCCEx_PLL2_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007504:	e00c      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3324      	adds	r3, #36	; 0x24
 800750a:	2101      	movs	r1, #1
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fe19 	bl	8008144 <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
      break;
 800751c:	e000      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800751e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007526:	4bb7      	ldr	r3, [pc, #732]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	f023 0207 	bic.w	r2, r3, #7
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007534:	49b3      	ldr	r1, [pc, #716]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007536:	4313      	orrs	r3, r2
 8007538:	658b      	str	r3, [r1, #88]	; 0x58
 800753a:	e001      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d04b      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007556:	d02e      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800755c:	d828      	bhi.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d02a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d822      	bhi.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800756a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800756e:	d026      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007574:	d81c      	bhi.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757a:	d010      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800757c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007580:	d816      	bhi.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d01d      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800758a:	d111      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fd24 	bl	8007fe0 <RCCEx_PLL2_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800759c:	e012      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3324      	adds	r3, #36	; 0x24
 80075a2:	2102      	movs	r1, #2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fdcd 	bl	8008144 <RCCEx_PLL3_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075ae:	e009      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
      break;
 80075b4:	e006      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075b6:	bf00      	nop
 80075b8:	e004      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075ba:	bf00      	nop
 80075bc:	e002      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075be:	bf00      	nop
 80075c0:	e000      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ca:	4b8e      	ldr	r3, [pc, #568]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d8:	498a      	ldr	r1, [pc, #552]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	654b      	str	r3, [r1, #84]	; 0x54
 80075de:	e001      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d04b      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075fa:	d02e      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80075fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007600:	d828      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007606:	d02a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760c:	d822      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800760e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007612:	d026      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007618:	d81c      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800761a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761e:	d010      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d816      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01d      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762e:	d111      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fcd2 	bl	8007fe0 <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007640:	e012      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fd7b 	bl	8008144 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007652:	e009      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	e006      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800765a:	bf00      	nop
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800766e:	4b65      	ldr	r3, [pc, #404]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800767c:	4961      	ldr	r1, [pc, #388]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800767e:	4313      	orrs	r3, r2
 8007680:	658b      	str	r3, [r1, #88]	; 0x58
 8007682:	e001      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	2b00      	cmp	r3, #0
 8007692:	d04b      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800769a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800769e:	d02e      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80076a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076a4:	d828      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076aa:	d02a      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b0:	d822      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076b6:	d026      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80076b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076bc:	d81c      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076c2:	d010      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80076c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076c8:	d816      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01d      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	d111      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fc80 	bl	8007fe0 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076e4:	e012      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3324      	adds	r3, #36	; 0x24
 80076ea:	2102      	movs	r1, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fd29 	bl	8008144 <RCCEx_PLL3_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076f6:	e009      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80076fe:	bf00      	nop
 8007700:	e004      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007702:	bf00      	nop
 8007704:	e002      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800770a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007712:	4b3c      	ldr	r3, [pc, #240]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007720:	4938      	ldr	r1, [pc, #224]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007722:	4313      	orrs	r3, r2
 8007724:	658b      	str	r3, [r1, #88]	; 0x58
 8007726:	e001      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d01a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007742:	d10a      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	2102      	movs	r1, #2
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fcfa 	bl	8008144 <RCCEx_PLL3_Config>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800775a:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	4926      	ldr	r1, [pc, #152]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800776a:	4313      	orrs	r3, r2
 800776c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3324      	adds	r3, #36	; 0x24
 800778a:	2102      	movs	r1, #2
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fcd9 	bl	8008144 <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077aa:	4916      	ldr	r1, [pc, #88]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d036      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d01f      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80077c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077cc:	d817      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80077d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d6:	d009      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80077d8:	e011      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fbfd 	bl	8007fe0 <RCCEx_PLL2_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077ea:	e00e      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	2102      	movs	r1, #2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fca6 	bl	8008144 <RCCEx_PLL3_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077fc:	e005      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
      break;
 8007802:	e002      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007804:	58024400 	.word	0x58024400
      break;
 8007808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007810:	4b93      	ldr	r3, [pc, #588]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800781e:	4990      	ldr	r1, [pc, #576]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007820:	4313      	orrs	r3, r2
 8007822:	658b      	str	r3, [r1, #88]	; 0x58
 8007824:	e001      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d033      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007840:	d01c      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007846:	d816      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800784e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007852:	d007      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007854:	e00f      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007856:	4b82      	ldr	r3, [pc, #520]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a81      	ldr	r2, [pc, #516]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800785c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007862:	e00c      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fc6a 	bl	8008144 <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007874:	e003      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800787c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007884:	4b76      	ldr	r3, [pc, #472]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007892:	4973      	ldr	r1, [pc, #460]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	654b      	str	r3, [r1, #84]	; 0x54
 8007898:	e001      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d029      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80078b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b6:	d007      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80078b8:	e00f      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ba:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a68      	ldr	r2, [pc, #416]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078c6:	e00b      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3304      	adds	r3, #4
 80078cc:	2102      	movs	r1, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fb86 	bl	8007fe0 <RCCEx_PLL2_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
      break;
 80078de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078e6:	4b5e      	ldr	r3, [pc, #376]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f2:	495b      	ldr	r1, [pc, #364]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078f8:	e001      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fc17 	bl	8008144 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d030      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007934:	d017      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793a:	d811      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	d013      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d80b      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d010      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800794c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007950:	d106      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007952:	4b43      	ldr	r3, [pc, #268]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a42      	ldr	r2, [pc, #264]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800795e:	e007      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	75fb      	strb	r3, [r7, #23]
      break;
 8007964:	e004      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800796e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007976:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007982:	4937      	ldr	r1, [pc, #220]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	654b      	str	r3, [r1, #84]	; 0x54
 8007988:	e001      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800799c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	492e      	ldr	r1, [pc, #184]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079c6:	4926      	ldr	r1, [pc, #152]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e4:	491e      	ldr	r1, [pc, #120]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079f6:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a00:	6113      	str	r3, [r2, #16]
 8007a02:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a0c:	4914      	ldr	r1, [pc, #80]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da08      	bge.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	490e      	ldr	r1, [pc, #56]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a46:	4906      	ldr	r1, [pc, #24]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a4c:	7dbb      	ldrb	r3, [r7, #22]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e000      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	58024400 	.word	0x58024400

08007a64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a68:	f7ff f860 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	4904      	ldr	r1, [pc, #16]	; (8007a8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a7a:	5ccb      	ldrb	r3, [r1, r3]
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	0800b318 	.word	0x0800b318

08007a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b089      	sub	sp, #36	; 0x24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a98:	4ba1      	ldr	r3, [pc, #644]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007aa2:	4b9f      	ldr	r3, [pc, #636]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	0b1b      	lsrs	r3, r3, #12
 8007aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aae:	4b9c      	ldr	r3, [pc, #624]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007aba:	4b99      	ldr	r3, [pc, #612]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	fb02 f303 	mul.w	r3, r2, r3
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8111 	beq.w	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	f000 8083 	beq.w	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	f200 80a1 	bhi.w	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d056      	beq.n	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007afa:	e099      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007afc:	4b88      	ldr	r3, [pc, #544]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d02d      	beq.n	8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b08:	4b85      	ldr	r3, [pc, #532]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	08db      	lsrs	r3, r3, #3
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	4a84      	ldr	r2, [pc, #528]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b32:	4b7b      	ldr	r3, [pc, #492]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b62:	e087      	b.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b76:	4b6a      	ldr	r3, [pc, #424]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ba6:	e065      	b.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bba:	4b59      	ldr	r3, [pc, #356]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bea:	e043      	b.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	4b48      	ldr	r3, [pc, #288]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c2e:	e021      	b.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b37      	ldr	r3, [pc, #220]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	0a5b      	lsrs	r3, r3, #9
 8007c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c9a:	ee17 2a90 	vmov	r2, s15
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ca2:	4b1f      	ldr	r3, [pc, #124]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc8:	ee17 2a90 	vmov	r2, s15
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007cd0:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	0e1b      	lsrs	r3, r3, #24
 8007cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf6:	ee17 2a90 	vmov	r2, s15
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cfe:	e008      	b.n	8007d12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	609a      	str	r2, [r3, #8]
}
 8007d12:	bf00      	nop
 8007d14:	3724      	adds	r7, #36	; 0x24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	58024400 	.word	0x58024400
 8007d24:	03d09000 	.word	0x03d09000
 8007d28:	46000000 	.word	0x46000000
 8007d2c:	4c742400 	.word	0x4c742400
 8007d30:	4a742400 	.word	0x4a742400
 8007d34:	4af42400 	.word	0x4af42400

08007d38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b089      	sub	sp, #36	; 0x24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d40:	4ba1      	ldr	r3, [pc, #644]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d4a:	4b9f      	ldr	r3, [pc, #636]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	0d1b      	lsrs	r3, r3, #20
 8007d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d56:	4b9c      	ldr	r3, [pc, #624]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d62:	4b99      	ldr	r3, [pc, #612]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	08db      	lsrs	r3, r3, #3
 8007d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8111 	beq.w	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	f000 8083 	beq.w	8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	f200 80a1 	bhi.w	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d056      	beq.n	8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007da2:	e099      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007da4:	4b88      	ldr	r3, [pc, #544]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0320 	and.w	r3, r3, #32
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02d      	beq.n	8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007db0:	4b85      	ldr	r3, [pc, #532]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	08db      	lsrs	r3, r3, #3
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	4a84      	ldr	r2, [pc, #528]	; (8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dda:	4b7b      	ldr	r3, [pc, #492]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e0a:	e087      	b.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1e:	4b6a      	ldr	r3, [pc, #424]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e4e:	e065      	b.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e62:	4b59      	ldr	r3, [pc, #356]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e92:	e043      	b.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b48      	ldr	r3, [pc, #288]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ed6:	e021      	b.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f1c:	4b2a      	ldr	r3, [pc, #168]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	0a5b      	lsrs	r3, r3, #9
 8007f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f42:	ee17 2a90 	vmov	r2, s15
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f4a:	4b1f      	ldr	r3, [pc, #124]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f70:	ee17 2a90 	vmov	r2, s15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f78:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	0e1b      	lsrs	r3, r3, #24
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9e:	ee17 2a90 	vmov	r2, s15
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fa6:	e008      	b.n	8007fba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
}
 8007fba:	bf00      	nop
 8007fbc:	3724      	adds	r7, #36	; 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	58024400 	.word	0x58024400
 8007fcc:	03d09000 	.word	0x03d09000
 8007fd0:	46000000 	.word	0x46000000
 8007fd4:	4c742400 	.word	0x4c742400
 8007fd8:	4a742400 	.word	0x4a742400
 8007fdc:	4af42400 	.word	0x4af42400

08007fe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fee:	4b53      	ldr	r3, [pc, #332]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d101      	bne.n	8007ffe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e099      	b.n	8008132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ffe:	4b4f      	ldr	r3, [pc, #316]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a4e      	ldr	r2, [pc, #312]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800a:	f7f9 fee9 	bl	8001de0 <HAL_GetTick>
 800800e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008010:	e008      	b.n	8008024 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008012:	f7f9 fee5 	bl	8001de0 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e086      	b.n	8008132 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008024:	4b45      	ldr	r3, [pc, #276]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f0      	bne.n	8008012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008030:	4b42      	ldr	r3, [pc, #264]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	031b      	lsls	r3, r3, #12
 800803e:	493f      	ldr	r1, [pc, #252]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008040:	4313      	orrs	r3, r2
 8008042:	628b      	str	r3, [r1, #40]	; 0x28
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	3b01      	subs	r3, #1
 8008054:	025b      	lsls	r3, r3, #9
 8008056:	b29b      	uxth	r3, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	041b      	lsls	r3, r3, #16
 8008062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	3b01      	subs	r3, #1
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008074:	4931      	ldr	r1, [pc, #196]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	492d      	ldr	r1, [pc, #180]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008088:	4313      	orrs	r3, r2
 800808a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800808c:	4b2b      	ldr	r3, [pc, #172]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	f023 0220 	bic.w	r2, r3, #32
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	4928      	ldr	r1, [pc, #160]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 800809a:	4313      	orrs	r3, r2
 800809c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800809e:	4b27      	ldr	r3, [pc, #156]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080a4:	f023 0310 	bic.w	r3, r3, #16
 80080a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <RCCEx_PLL2_Config+0x160>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	69d2      	ldr	r2, [r2, #28]
 80080b6:	00d2      	lsls	r2, r2, #3
 80080b8:	4920      	ldr	r1, [pc, #128]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080be:	4b1f      	ldr	r3, [pc, #124]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080c4:	f043 0310 	orr.w	r3, r3, #16
 80080c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080dc:	e00f      	b.n	80080fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d106      	bne.n	80080f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080e4:	4b15      	ldr	r3, [pc, #84]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080f0:	e005      	b.n	80080fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	4a11      	ldr	r2, [pc, #68]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 80080f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a0e      	ldr	r2, [pc, #56]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810a:	f7f9 fe69 	bl	8001de0 <HAL_GetTick>
 800810e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008110:	e008      	b.n	8008124 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008112:	f7f9 fe65 	bl	8001de0 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e006      	b.n	8008132 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <RCCEx_PLL2_Config+0x15c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0f0      	beq.n	8008112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	58024400 	.word	0x58024400
 8008140:	ffff0007 	.word	0xffff0007

08008144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008152:	4b53      	ldr	r3, [pc, #332]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	2b03      	cmp	r3, #3
 800815c:	d101      	bne.n	8008162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e099      	b.n	8008296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008162:	4b4f      	ldr	r3, [pc, #316]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a4e      	ldr	r2, [pc, #312]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800816c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816e:	f7f9 fe37 	bl	8001de0 <HAL_GetTick>
 8008172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008174:	e008      	b.n	8008188 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008176:	f7f9 fe33 	bl	8001de0 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e086      	b.n	8008296 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008188:	4b45      	ldr	r3, [pc, #276]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f0      	bne.n	8008176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008194:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	051b      	lsls	r3, r3, #20
 80081a2:	493f      	ldr	r1, [pc, #252]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	628b      	str	r3, [r1, #40]	; 0x28
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	025b      	lsls	r3, r3, #9
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	061b      	lsls	r3, r3, #24
 80081d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081d8:	4931      	ldr	r1, [pc, #196]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081de:	4b30      	ldr	r3, [pc, #192]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	492d      	ldr	r1, [pc, #180]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081f0:	4b2b      	ldr	r3, [pc, #172]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	4928      	ldr	r1, [pc, #160]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008202:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	4a26      	ldr	r2, [pc, #152]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800820c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008212:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <RCCEx_PLL3_Config+0x160>)
 8008214:	4013      	ands	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	69d2      	ldr	r2, [r2, #28]
 800821a:	00d2      	lsls	r2, r2, #3
 800821c:	4920      	ldr	r1, [pc, #128]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800821e:	4313      	orrs	r3, r2
 8008220:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008222:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	4a1e      	ldr	r2, [pc, #120]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	4a19      	ldr	r2, [pc, #100]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800823a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800823e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008240:	e00f      	b.n	8008262 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d106      	bne.n	8008256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4a14      	ldr	r2, [pc, #80]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800824e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008254:	e005      	b.n	8008262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800825c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008260:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 8008268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800826c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826e:	f7f9 fdb7 	bl	8001de0 <HAL_GetTick>
 8008272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008274:	e008      	b.n	8008288 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008276:	f7f9 fdb3 	bl	8001de0 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e006      	b.n	8008296 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <RCCEx_PLL3_Config+0x15c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0f0      	beq.n	8008276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400
 80082a4:	ffff0007 	.word	0xffff0007

080082a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e0eb      	b.n	8008496 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a75      	ldr	r2, [pc, #468]	; (80084a0 <HAL_SPI_Init+0x1f8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00f      	beq.n	80082ee <HAL_SPI_Init+0x46>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a74      	ldr	r2, [pc, #464]	; (80084a4 <HAL_SPI_Init+0x1fc>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00a      	beq.n	80082ee <HAL_SPI_Init+0x46>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a72      	ldr	r2, [pc, #456]	; (80084a8 <HAL_SPI_Init+0x200>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d005      	beq.n	80082ee <HAL_SPI_Init+0x46>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d901      	bls.n	80082ee <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e0d3      	b.n	8008496 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 ff62 	bl	80091b8 <SPI_GetPacketSize>
 80082f4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a69      	ldr	r2, [pc, #420]	; (80084a0 <HAL_SPI_Init+0x1f8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00c      	beq.n	800831a <HAL_SPI_Init+0x72>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a67      	ldr	r2, [pc, #412]	; (80084a4 <HAL_SPI_Init+0x1fc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d007      	beq.n	800831a <HAL_SPI_Init+0x72>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a66      	ldr	r2, [pc, #408]	; (80084a8 <HAL_SPI_Init+0x200>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d002      	beq.n	800831a <HAL_SPI_Init+0x72>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b08      	cmp	r3, #8
 8008318:	d811      	bhi.n	800833e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800831e:	4a60      	ldr	r2, [pc, #384]	; (80084a0 <HAL_SPI_Init+0x1f8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d009      	beq.n	8008338 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a5e      	ldr	r2, [pc, #376]	; (80084a4 <HAL_SPI_Init+0x1fc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d004      	beq.n	8008338 <HAL_SPI_Init+0x90>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a5d      	ldr	r2, [pc, #372]	; (80084a8 <HAL_SPI_Init+0x200>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d104      	bne.n	8008342 <HAL_SPI_Init+0x9a>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b10      	cmp	r3, #16
 800833c:	d901      	bls.n	8008342 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e0a9      	b.n	8008496 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7f9 f9de 	bl	8001718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0201 	bic.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800837c:	d119      	bne.n	80083b2 <HAL_SPI_Init+0x10a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008386:	d103      	bne.n	8008390 <HAL_SPI_Init+0xe8>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10c      	bne.n	80083b2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083a0:	d107      	bne.n	80083b2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69da      	ldr	r2, [r3, #28]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	ea42 0103 	orr.w	r1, r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008412:	ea42 0103 	orr.w	r1, r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d113      	bne.n	8008452 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800843c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008450:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40013000 	.word	0x40013000
 80084a4:	40003800 	.word	0x40003800
 80084a8:	40003c00 	.word	0x40003c00

080084ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3320      	adds	r3, #32
 80084c2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <HAL_SPI_Transmit+0x2a>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e1d7      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084de:	f7f9 fc7f 	bl	8001de0 <HAL_GetTick>
 80084e2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d007      	beq.n	8008500 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
 80084f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80084fc:	7efb      	ldrb	r3, [r7, #27]
 80084fe:	e1c2      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_SPI_Transmit+0x60>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008518:	7efb      	ldrb	r3, [r7, #27]
 800851a:	e1b4      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2203      	movs	r2, #3
 8008520:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800856c:	d107      	bne.n	800857e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	4b96      	ldr	r3, [pc, #600]	; (80087e0 <HAL_SPI_Transmit+0x334>)
 8008586:	4013      	ands	r3, r2
 8008588:	88f9      	ldrh	r1, [r7, #6]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	430b      	orrs	r3, r1
 8008590:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085aa:	d107      	bne.n	80085bc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b0f      	cmp	r3, #15
 80085c2:	d947      	bls.n	8008654 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085c4:	e03f      	b.n	8008646 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d114      	bne.n	80085fe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80085fc:	e023      	b.n	8008646 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085fe:	f7f9 fbef 	bl	8001de0 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d803      	bhi.n	8008616 <HAL_SPI_Transmit+0x16a>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d102      	bne.n	800861c <HAL_SPI_Transmit+0x170>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d114      	bne.n	8008646 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fcfd 	bl	800901c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008630:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e11f      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1b9      	bne.n	80085c6 <HAL_SPI_Transmit+0x11a>
 8008652:	e0f2      	b.n	800883a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b07      	cmp	r3, #7
 800865a:	f240 80e7 	bls.w	800882c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800865e:	e05d      	b.n	800871c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b02      	cmp	r3, #2
 800866c:	d132      	bne.n	80086d4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b01      	cmp	r3, #1
 8008678:	d918      	bls.n	80086ac <HAL_SPI_Transmit+0x200>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d014      	beq.n	80086ac <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b02      	subs	r3, #2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086aa:	e037      	b.n	800871c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b0:	881a      	ldrh	r2, [r3, #0]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ba:	1c9a      	adds	r2, r3, #2
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086d2:	e023      	b.n	800871c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086d4:	f7f9 fb84 	bl	8001de0 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d803      	bhi.n	80086ec <HAL_SPI_Transmit+0x240>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d102      	bne.n	80086f2 <HAL_SPI_Transmit+0x246>
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d114      	bne.n	800871c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fc92 	bl	800901c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0b4      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008722:	b29b      	uxth	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d19b      	bne.n	8008660 <HAL_SPI_Transmit+0x1b4>
 8008728:	e087      	b.n	800883a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b02      	cmp	r3, #2
 8008736:	d155      	bne.n	80087e4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b03      	cmp	r3, #3
 8008742:	d918      	bls.n	8008776 <HAL_SPI_Transmit+0x2ca>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	d914      	bls.n	8008776 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b04      	subs	r3, #4
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008774:	e05a      	b.n	800882c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b01      	cmp	r3, #1
 8008780:	d917      	bls.n	80087b2 <HAL_SPI_Transmit+0x306>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d013      	beq.n	80087b2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878e:	881a      	ldrh	r2, [r3, #0]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b02      	subs	r3, #2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087b0:	e03c      	b.n	800882c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3320      	adds	r3, #32
 80087bc:	7812      	ldrb	r2, [r2, #0]
 80087be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087dc:	e026      	b.n	800882c <HAL_SPI_Transmit+0x380>
 80087de:	bf00      	nop
 80087e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087e4:	f7f9 fafc 	bl	8001de0 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d803      	bhi.n	80087fc <HAL_SPI_Transmit+0x350>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d102      	bne.n	8008802 <HAL_SPI_Transmit+0x356>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d114      	bne.n	800882c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 fc0a 	bl	800901c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e02c      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	f47f af78 	bne.w	800872a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2200      	movs	r2, #0
 8008842:	2108      	movs	r1, #8
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fc89 	bl	800915c <SPI_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008856:	f043 0220 	orr.w	r2, r3, #32
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 fbdb 	bl	800901c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008884:	7efb      	ldrb	r3, [r7, #27]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3720      	adds	r7, #32
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop

08008890 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_SPI_Transmit_DMA+0x20>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e128      	b.n	8008b02 <HAL_SPI_Transmit_DMA+0x272>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d007      	beq.n	80088d4 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
 80088c6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	e116      	b.n	8008b02 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <HAL_SPI_Transmit_DMA+0x50>
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	e108      	b.n	8008b02 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2203      	movs	r2, #3
 80088f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008940:	d107      	bne.n	8008952 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008950:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2b0f      	cmp	r3, #15
 8008958:	d905      	bls.n	8008966 <HAL_SPI_Transmit_DMA+0xd6>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008964:	d10f      	bne.n	8008986 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800896a:	2b07      	cmp	r3, #7
 800896c:	d913      	bls.n	8008996 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008978:	d00d      	beq.n	8008996 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800897e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008984:	d007      	beq.n	8008996 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	e0b5      	b.n	8008b02 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b07      	cmp	r3, #7
 800899c:	d820      	bhi.n	80089e0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a8:	d109      	bne.n	80089be <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3301      	adds	r3, #1
 80089b4:	105b      	asrs	r3, r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c8:	d11e      	bne.n	8008a08 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3303      	adds	r3, #3
 80089d4:	109b      	asrs	r3, r3, #2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089de:	e013      	b.n	8008a08 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b0f      	cmp	r3, #15
 80089e6:	d80f      	bhi.n	8008a08 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f2:	d109      	bne.n	8008a08 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3301      	adds	r3, #1
 80089fe:	105b      	asrs	r3, r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0c:	4a3f      	ldr	r2, [pc, #252]	; (8008b0c <HAL_SPI_Transmit_DMA+0x27c>)
 8008a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a14:	4a3e      	ldr	r2, [pc, #248]	; (8008b10 <HAL_SPI_Transmit_DMA+0x280>)
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1c:	4a3d      	ldr	r2, [pc, #244]	; (8008b14 <HAL_SPI_Transmit_DMA+0x284>)
 8008a1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a24:	2200      	movs	r2, #0
 8008a26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a36:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a40:	4619      	mov	r1, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3320      	adds	r3, #32
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f7f9 fe81 	bl	8002758 <HAL_DMA_Start_IT>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00f      	beq.n	8008a7c <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a62:	f043 0210 	orr.w	r2, r3, #16
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	e042      	b.n	8008b02 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a86:	d108      	bne.n	8008a9a <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6859      	ldr	r1, [r3, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <HAL_SPI_Transmit_DMA+0x288>)
 8008a94:	400b      	ands	r3, r1
 8008a96:	6053      	str	r3, [r2, #4]
 8008a98:	e009      	b.n	8008aae <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <HAL_SPI_Transmit_DMA+0x288>)
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	88f9      	ldrh	r1, [r7, #6]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008abc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008acc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0201 	orr.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ae6:	d107      	bne.n	8008af8 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08008f87 	.word	0x08008f87
 8008b10:	08008f41 	.word	0x08008f41
 8008b14:	08008fa3 	.word	0x08008fa3
 8008b18:	ffff0000 	.word	0xffff0000

08008b1c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b4e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3330      	adds	r3, #48	; 0x30
 8008b56:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d113      	bne.n	8008b8a <HAL_SPI_IRQHandler+0x6e>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10e      	bne.n	8008b8a <HAL_SPI_IRQHandler+0x6e>
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
    handled = 1UL;
 8008b86:	2301      	movs	r3, #1
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10f      	bne.n	8008bb4 <HAL_SPI_IRQHandler+0x98>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <HAL_SPI_IRQHandler+0x98>
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
    handled = 1UL;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10f      	bne.n	8008bde <HAL_SPI_IRQHandler+0xc2>
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <HAL_SPI_IRQHandler+0xc2>
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d105      	bne.n	8008bde <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
    handled = 1UL;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f040 816f 	bne.w	8008ec4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80a0 	beq.w	8008d32 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699a      	ldr	r2, [r3, #24]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0208 	orr.w	r2, r2, #8
 8008c00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0210 	orr.w	r2, r2, #16
 8008c10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c20:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0208 	bic.w	r2, r2, #8
 8008c30:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00f      	beq.n	8008c5c <HAL_SPI_IRQHandler+0x140>
 8008c3c:	7cfb      	ldrb	r3, [r7, #19]
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d004      	beq.n	8008c4c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <HAL_SPI_IRQHandler+0x140>
 8008c4c:	7cfb      	ldrb	r3, [r7, #19]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d059      	beq.n	8008d06 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d154      	bne.n	8008d06 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d13d      	bne.n	8008ce6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8008c6a:	e036      	b.n	8008cda <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b0f      	cmp	r3, #15
 8008c72:	d90b      	bls.n	8008c8c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c7e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c84:	1d1a      	adds	r2, r3, #4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	665a      	str	r2, [r3, #100]	; 0x64
 8008c8a:	e01d      	b.n	8008cc8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	2b07      	cmp	r3, #7
 8008c92:	d90b      	bls.n	8008cac <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	8812      	ldrh	r2, [r2, #0]
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca4:	1c9a      	adds	r2, r3, #2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	665a      	str	r2, [r3, #100]	; 0x64
 8008caa:	e00d      	b.n	8008cc8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb8:	7812      	ldrb	r2, [r2, #0]
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1c2      	bne.n	8008c6c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f998 	bl	800901c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f914 	bl	8008f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008d04:	e0e3      	b.n	8008ece <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008d06:	7cfb      	ldrb	r3, [r7, #19]
 8008d08:	2b05      	cmp	r3, #5
 8008d0a:	d103      	bne.n	8008d14 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8f9 	bl	8008f04 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8008d12:	e0d9      	b.n	8008ec8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008d14:	7cfb      	ldrb	r3, [r7, #19]
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d103      	bne.n	8008d22 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f8e8 	bl	8008ef0 <HAL_SPI_RxCpltCallback>
    return;
 8008d20:	e0d2      	b.n	8008ec8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008d22:	7cfb      	ldrb	r3, [r7, #19]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	f040 80cf 	bne.w	8008ec8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f8d6 	bl	8008edc <HAL_SPI_TxCpltCallback>
    return;
 8008d30:	e0ca      	b.n	8008ec8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00d      	beq.n	8008d58 <HAL_SPI_IRQHandler+0x23c>
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699a      	ldr	r2, [r3, #24]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d54:	619a      	str	r2, [r3, #24]

    return;
 8008d56:	e0ba      	b.n	8008ece <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80b5 	beq.w	8008ece <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00f      	beq.n	8008d8e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d74:	f043 0204 	orr.w	r2, r3, #4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00f      	beq.n	8008db8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008db6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00f      	beq.n	8008de2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc8:	f043 0208 	orr.w	r2, r3, #8
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00f      	beq.n	8008e0c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0220 	orr.w	r2, r2, #32
 8008e0a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d05a      	beq.n	8008ecc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0201 	bic.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6919      	ldr	r1, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <HAL_SPI_IRQHandler+0x3b8>)
 8008e32:	400b      	ands	r3, r1
 8008e34:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e40:	d138      	bne.n	8008eb4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008e50:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d013      	beq.n	8008e82 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <HAL_SPI_IRQHandler+0x3bc>)
 8008e60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fa f9fe 	bl	8003268 <HAL_DMA_Abort_IT>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8e:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <HAL_SPI_IRQHandler+0x3bc>)
 8008e90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fa f9e6 	bl	8003268 <HAL_DMA_Abort_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d014      	beq.n	8008ecc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008eb2:	e00b      	b.n	8008ecc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f835 	bl	8008f2c <HAL_SPI_ErrorCallback>
    return;
 8008ec2:	e003      	b.n	8008ecc <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008ec4:	bf00      	nop
 8008ec6:	e002      	b.n	8008ece <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008ecc:	bf00      	nop
  }
}
 8008ece:	3728      	adds	r7, #40	; 0x28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	fffffc94 	.word	0xfffffc94
 8008ed8:	08008fe9 	.word	0x08008fe9

08008edc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	d011      	beq.n	8008f7e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f64:	d103      	bne.n	8008f6e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff ffb8 	bl	8008edc <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008f6c:	e007      	b.n	8008f7e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	611a      	str	r2, [r3, #16]
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff ffbf 	bl	8008f18 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7fb fac7 	bl	8004544 <HAL_DMA_GetError>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d011      	beq.n	8008fe0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f82d 	bl	800901c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc8:	f043 0210 	orr.w	r2, r3, #16
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff ffa6 	bl	8008f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff ff8c 	bl	8008f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0208 	orr.w	r2, r2, #8
 800903a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0210 	orr.w	r2, r2, #16
 800904a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6919      	ldr	r1, [r3, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	4b3c      	ldr	r3, [pc, #240]	; (8009158 <SPI_CloseTransfer+0x13c>)
 8009068:	400b      	ands	r3, r1
 800906a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800907a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b04      	cmp	r3, #4
 8009086:	d014      	beq.n	80090b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0220 	orr.w	r2, r2, #32
 80090b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d014      	beq.n	80090e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00f      	beq.n	80090e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ce:	f043 0204 	orr.w	r2, r3, #4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00f      	beq.n	8009112 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f8:	f043 0201 	orr.w	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009110:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00f      	beq.n	800913c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009122:	f043 0208 	orr.w	r2, r3, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800913a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800914c:	bf00      	nop
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	fffffc90 	.word	0xfffffc90

0800915c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800916c:	e010      	b.n	8009190 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800916e:	f7f8 fe37 	bl	8001de0 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	429a      	cmp	r2, r3
 800917c:	d803      	bhi.n	8009186 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d102      	bne.n	800918c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e00f      	b.n	80091b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695a      	ldr	r2, [r3, #20]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	4013      	ands	r3, r2
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	429a      	cmp	r2, r3
 800919e:	bf0c      	ite	eq
 80091a0:	2301      	moveq	r3, #1
 80091a2:	2300      	movne	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d0df      	beq.n	800916e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	3301      	adds	r3, #1
 80091d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	3307      	adds	r3, #7
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	fb02 f303 	mul.w	r3, r2, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e042      	b.n	8009286 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7f8 fb46 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2224      	movs	r2, #36	; 0x24
 800921c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fb61 	bl	80098f8 <UART_SetConfig>
 8009236:	4603      	mov	r3, r0
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e022      	b.n	8009286 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f8b5 	bl	800a3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800925c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800926c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0201 	orr.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f93c 	bl	800a4fc <UART_CheckIdleState>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d131      	bne.n	800930c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_UART_Receive_DMA+0x24>
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e02a      	b.n	800930e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_UART_Receive_DMA+0x36>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e023      	b.n	800930e <HAL_UART_Receive_DMA+0x7e>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a0f      	ldr	r2, [pc, #60]	; (8009318 <HAL_UART_Receive_DMA+0x88>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00e      	beq.n	80092fc <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80092fa:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	461a      	mov	r2, r3
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f001 f9c6 	bl	800a694 <UART_Start_Receive_DMA>
 8009308:	4603      	mov	r3, r0
 800930a:	e000      	b.n	800930e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800930c:	2302      	movs	r3, #2
  }
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	58000c00 	.word	0x58000c00

0800931c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009342:	4013      	ands	r3, r2
 8009344:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d118      	bne.n	800937e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d013      	beq.n	800937e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 8282 	beq.w	8009878 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	4798      	blx	r3
      }
      return;
 800937c:	e27c      	b.n	8009878 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80ef 	beq.w	8009564 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4b73      	ldr	r3, [pc, #460]	; (8009558 <HAL_UART_IRQHandler+0x23c>)
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4b72      	ldr	r3, [pc, #456]	; (800955c <HAL_UART_IRQHandler+0x240>)
 8009394:	4013      	ands	r3, r2
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80e4 	beq.w	8009564 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d010      	beq.n	80093c8 <HAL_UART_IRQHandler+0xac>
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2201      	movs	r2, #1
 80093b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093be:	f043 0201 	orr.w	r2, r3, #1
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d010      	beq.n	80093f4 <HAL_UART_IRQHandler+0xd8>
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2202      	movs	r2, #2
 80093e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ea:	f043 0204 	orr.w	r2, r3, #4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	f003 0304 	and.w	r3, r3, #4
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d010      	beq.n	8009420 <HAL_UART_IRQHandler+0x104>
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2204      	movs	r2, #4
 800940e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009416:	f043 0202 	orr.w	r2, r3, #2
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d015      	beq.n	8009456 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f003 0320 	and.w	r3, r3, #32
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4b48      	ldr	r3, [pc, #288]	; (8009558 <HAL_UART_IRQHandler+0x23c>)
 8009438:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2208      	movs	r2, #8
 8009444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944c:	f043 0208 	orr.w	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800945c:	2b00      	cmp	r3, #0
 800945e:	d011      	beq.n	8009484 <HAL_UART_IRQHandler+0x168>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00c      	beq.n	8009484 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 81f6 	beq.w	800987c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	2b40      	cmp	r3, #64	; 0x40
 80094d2:	d004      	beq.n	80094de <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d031      	beq.n	8009542 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 f964 	bl	800a7ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d123      	bne.n	800953a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009500:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d013      	beq.n	8009532 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950e:	4a14      	ldr	r2, [pc, #80]	; (8009560 <HAL_UART_IRQHandler+0x244>)
 8009510:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	4618      	mov	r0, r3
 8009518:	f7f9 fea6 	bl	8003268 <HAL_DMA_Abort_IT>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d017      	beq.n	8009552 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	e00f      	b.n	8009552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9ca 	bl	80098cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009538:	e00b      	b.n	8009552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9c6 	bl	80098cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	e007      	b.n	8009552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9c2 	bl	80098cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009550:	e194      	b.n	800987c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009552:	bf00      	nop
    return;
 8009554:	e192      	b.n	800987c <HAL_UART_IRQHandler+0x560>
 8009556:	bf00      	nop
 8009558:	10000001 	.word	0x10000001
 800955c:	04000120 	.word	0x04000120
 8009560:	0800a95f 	.word	0x0800a95f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	2b01      	cmp	r3, #1
 800956a:	f040 810f 	bne.w	800978c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8109 	beq.w	800978c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8103 	beq.w	800978c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2210      	movs	r2, #16
 800958c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	f040 80bb 	bne.w	8009714 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a96      	ldr	r2, [pc, #600]	; (8009800 <HAL_UART_IRQHandler+0x4e4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d059      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a94      	ldr	r2, [pc, #592]	; (8009804 <HAL_UART_IRQHandler+0x4e8>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d053      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a92      	ldr	r2, [pc, #584]	; (8009808 <HAL_UART_IRQHandler+0x4ec>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d04d      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a90      	ldr	r2, [pc, #576]	; (800980c <HAL_UART_IRQHandler+0x4f0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d047      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a8e      	ldr	r2, [pc, #568]	; (8009810 <HAL_UART_IRQHandler+0x4f4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d041      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a8c      	ldr	r2, [pc, #560]	; (8009814 <HAL_UART_IRQHandler+0x4f8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d03b      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a8a      	ldr	r2, [pc, #552]	; (8009818 <HAL_UART_IRQHandler+0x4fc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d035      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a88      	ldr	r2, [pc, #544]	; (800981c <HAL_UART_IRQHandler+0x500>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d02f      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a86      	ldr	r2, [pc, #536]	; (8009820 <HAL_UART_IRQHandler+0x504>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d029      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a84      	ldr	r2, [pc, #528]	; (8009824 <HAL_UART_IRQHandler+0x508>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d023      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a82      	ldr	r2, [pc, #520]	; (8009828 <HAL_UART_IRQHandler+0x50c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01d      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a80      	ldr	r2, [pc, #512]	; (800982c <HAL_UART_IRQHandler+0x510>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d017      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a7e      	ldr	r2, [pc, #504]	; (8009830 <HAL_UART_IRQHandler+0x514>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d011      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a7c      	ldr	r2, [pc, #496]	; (8009834 <HAL_UART_IRQHandler+0x518>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00b      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a7a      	ldr	r2, [pc, #488]	; (8009838 <HAL_UART_IRQHandler+0x51c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d005      	beq.n	800965e <HAL_UART_IRQHandler+0x342>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a78      	ldr	r2, [pc, #480]	; (800983c <HAL_UART_IRQHandler+0x520>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d105      	bne.n	800966a <HAL_UART_IRQHandler+0x34e>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	b29b      	uxth	r3, r3
 8009668:	e004      	b.n	8009674 <HAL_UART_IRQHandler+0x358>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b29b      	uxth	r3, r3
 8009674:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009676:	893b      	ldrh	r3, [r7, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8101 	beq.w	8009880 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009684:	893a      	ldrh	r2, [r7, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	f080 80fa 	bcs.w	8009880 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	893a      	ldrh	r2, [r7, #8]
 8009690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969e:	d02b      	beq.n	80096f8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0201 	bic.w	r2, r2, #1
 80096be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0210 	bic.w	r2, r2, #16
 80096ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f9 fa9a 	bl	8002c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009704:	b29b      	uxth	r3, r3
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8e7 	bl	80098e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009712:	e0b5      	b.n	8009880 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80a8 	beq.w	8009884 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009734:	897b      	ldrh	r3, [r7, #10]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80a4 	beq.w	8009884 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800974a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6899      	ldr	r1, [r3, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	4b3a      	ldr	r3, [pc, #232]	; (8009840 <HAL_UART_IRQHandler+0x524>)
 8009758:	400b      	ands	r3, r1
 800975a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0210 	bic.w	r2, r2, #16
 800977e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009780:	897b      	ldrh	r3, [r7, #10]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f8ab 	bl	80098e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800978a:	e07b      	b.n	8009884 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00d      	beq.n	80097b2 <HAL_UART_IRQHandler+0x496>
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d008      	beq.n	80097b2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 f907 	bl	800a9be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097b0:	e06b      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d012      	beq.n	80097e2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d104      	bne.n	80097d0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d057      	beq.n	8009888 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
    }
    return;
 80097e0:	e052      	b.n	8009888 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d02b      	beq.n	8009844 <HAL_UART_IRQHandler+0x528>
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d026      	beq.n	8009844 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 f8c7 	bl	800a98a <UART_EndTransmit_IT>
    return;
 80097fc:	e045      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
 80097fe:	bf00      	nop
 8009800:	40020010 	.word	0x40020010
 8009804:	40020028 	.word	0x40020028
 8009808:	40020040 	.word	0x40020040
 800980c:	40020058 	.word	0x40020058
 8009810:	40020070 	.word	0x40020070
 8009814:	40020088 	.word	0x40020088
 8009818:	400200a0 	.word	0x400200a0
 800981c:	400200b8 	.word	0x400200b8
 8009820:	40020410 	.word	0x40020410
 8009824:	40020428 	.word	0x40020428
 8009828:	40020440 	.word	0x40020440
 800982c:	40020458 	.word	0x40020458
 8009830:	40020470 	.word	0x40020470
 8009834:	40020488 	.word	0x40020488
 8009838:	400204a0 	.word	0x400204a0
 800983c:	400204b8 	.word	0x400204b8
 8009840:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d008      	beq.n	8009860 <HAL_UART_IRQHandler+0x544>
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 f8c4 	bl	800a9e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800985e:	e014      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00f      	beq.n	800988a <HAL_UART_IRQHandler+0x56e>
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da0c      	bge.n	800988a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f8ae 	bl	800a9d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009876:	e008      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
      return;
 8009878:	bf00      	nop
 800987a:	e006      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
    return;
 800987c:	bf00      	nop
 800987e:	e004      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
      return;
 8009880:	bf00      	nop
 8009882:	e002      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
      return;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <HAL_UART_IRQHandler+0x56e>
    return;
 8009888:	bf00      	nop
  }
}
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f8:	b5b0      	push	{r4, r5, r7, lr}
 80098fa:	b08e      	sub	sp, #56	; 0x38
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	4313      	orrs	r3, r2
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4bbf      	ldr	r3, [pc, #764]	; (8009c24 <UART_SetConfig+0x32c>)
 8009926:	4013      	ands	r3, r2
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6812      	ldr	r2, [r2, #0]
 800992c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800992e:	430b      	orrs	r3, r1
 8009930:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4ab5      	ldr	r2, [pc, #724]	; (8009c28 <UART_SetConfig+0x330>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d004      	beq.n	8009962 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800995e:	4313      	orrs	r3, r2
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	4bb0      	ldr	r3, [pc, #704]	; (8009c2c <UART_SetConfig+0x334>)
 800996a:	4013      	ands	r3, r2
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	6812      	ldr	r2, [r2, #0]
 8009970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009972:	430b      	orrs	r3, r1
 8009974:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	f023 010f 	bic.w	r1, r3, #15
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4aa7      	ldr	r2, [pc, #668]	; (8009c30 <UART_SetConfig+0x338>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d176      	bne.n	8009a84 <UART_SetConfig+0x18c>
 8009996:	4ba7      	ldr	r3, [pc, #668]	; (8009c34 <UART_SetConfig+0x33c>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800999e:	2b28      	cmp	r3, #40	; 0x28
 80099a0:	d86c      	bhi.n	8009a7c <UART_SetConfig+0x184>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0xb0>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a7d 	.word	0x08009a7d
 80099b0:	08009a7d 	.word	0x08009a7d
 80099b4:	08009a7d 	.word	0x08009a7d
 80099b8:	08009a7d 	.word	0x08009a7d
 80099bc:	08009a7d 	.word	0x08009a7d
 80099c0:	08009a7d 	.word	0x08009a7d
 80099c4:	08009a7d 	.word	0x08009a7d
 80099c8:	08009a55 	.word	0x08009a55
 80099cc:	08009a7d 	.word	0x08009a7d
 80099d0:	08009a7d 	.word	0x08009a7d
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009a7d 	.word	0x08009a7d
 80099e0:	08009a7d 	.word	0x08009a7d
 80099e4:	08009a7d 	.word	0x08009a7d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a7d 	.word	0x08009a7d
 80099f0:	08009a7d 	.word	0x08009a7d
 80099f4:	08009a7d 	.word	0x08009a7d
 80099f8:	08009a7d 	.word	0x08009a7d
 80099fc:	08009a7d 	.word	0x08009a7d
 8009a00:	08009a7d 	.word	0x08009a7d
 8009a04:	08009a7d 	.word	0x08009a7d
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a7d 	.word	0x08009a7d
 8009a10:	08009a7d 	.word	0x08009a7d
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	08009a7d 	.word	0x08009a7d
 8009a1c:	08009a7d 	.word	0x08009a7d
 8009a20:	08009a7d 	.word	0x08009a7d
 8009a24:	08009a7d 	.word	0x08009a7d
 8009a28:	08009a6d 	.word	0x08009a6d
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a7d 	.word	0x08009a7d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e222      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e21e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e21a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6a:	e216      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	e212      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e20e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e20a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a6b      	ldr	r2, [pc, #428]	; (8009c38 <UART_SetConfig+0x340>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x1f8>
 8009a8e:	4b69      	ldr	r3, [pc, #420]	; (8009c34 <UART_SetConfig+0x33c>)
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x1f0>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x1a8>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e1ec      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e1e8      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e1e4      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e1e0      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e1dc      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e1d8      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e1d4      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a51      	ldr	r2, [pc, #324]	; (8009c3c <UART_SetConfig+0x344>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d130      	bne.n	8009b5c <UART_SetConfig+0x264>
 8009afa:	4b4e      	ldr	r3, [pc, #312]	; (8009c34 <UART_SetConfig+0x33c>)
 8009afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d826      	bhi.n	8009b54 <UART_SetConfig+0x25c>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <UART_SetConfig+0x214>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b25 	.word	0x08009b25
 8009b10:	08009b2d 	.word	0x08009b2d
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009b3d 	.word	0x08009b3d
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b4d 	.word	0x08009b4d
 8009b24:	2300      	movs	r3, #0
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e1b6      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e1b2      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b34:	2308      	movs	r3, #8
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e1ae      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e1aa      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b44:	2320      	movs	r3, #32
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e1a6      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e1a2      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b54:	2380      	movs	r3, #128	; 0x80
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e19e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a37      	ldr	r2, [pc, #220]	; (8009c40 <UART_SetConfig+0x348>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d130      	bne.n	8009bc8 <UART_SetConfig+0x2d0>
 8009b66:	4b33      	ldr	r3, [pc, #204]	; (8009c34 <UART_SetConfig+0x33c>)
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d826      	bhi.n	8009bc0 <UART_SetConfig+0x2c8>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <UART_SetConfig+0x280>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009b91 	.word	0x08009b91
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e180      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e17c      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e178      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e174      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e170      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e16c      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e168      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <UART_SetConfig+0x34c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d142      	bne.n	8009c58 <UART_SetConfig+0x360>
 8009bd2:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <UART_SetConfig+0x33c>)
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d838      	bhi.n	8009c50 <UART_SetConfig+0x358>
 8009bde:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <UART_SetConfig+0x2ec>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009bfd 	.word	0x08009bfd
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c0d 	.word	0x08009c0d
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c1d 	.word	0x08009c1d
 8009bf8:	08009c49 	.word	0x08009c49
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e14a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c04:	2304      	movs	r3, #4
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e146      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c0c:	2308      	movs	r3, #8
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e142      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c14:	2310      	movs	r3, #16
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e13e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c1c:	2320      	movs	r3, #32
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e13a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c24:	cfff69f3 	.word	0xcfff69f3
 8009c28:	58000c00 	.word	0x58000c00
 8009c2c:	11fff4ff 	.word	0x11fff4ff
 8009c30:	40011000 	.word	0x40011000
 8009c34:	58024400 	.word	0x58024400
 8009c38:	40004400 	.word	0x40004400
 8009c3c:	40004800 	.word	0x40004800
 8009c40:	40004c00 	.word	0x40004c00
 8009c44:	40005000 	.word	0x40005000
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e124      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e120      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4acc      	ldr	r2, [pc, #816]	; (8009f90 <UART_SetConfig+0x698>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d176      	bne.n	8009d50 <UART_SetConfig+0x458>
 8009c62:	4bcc      	ldr	r3, [pc, #816]	; (8009f94 <UART_SetConfig+0x69c>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c6a:	2b28      	cmp	r3, #40	; 0x28
 8009c6c:	d86c      	bhi.n	8009d48 <UART_SetConfig+0x450>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x37c>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009d49 	.word	0x08009d49
 8009c7c:	08009d49 	.word	0x08009d49
 8009c80:	08009d49 	.word	0x08009d49
 8009c84:	08009d49 	.word	0x08009d49
 8009c88:	08009d49 	.word	0x08009d49
 8009c8c:	08009d49 	.word	0x08009d49
 8009c90:	08009d49 	.word	0x08009d49
 8009c94:	08009d21 	.word	0x08009d21
 8009c98:	08009d49 	.word	0x08009d49
 8009c9c:	08009d49 	.word	0x08009d49
 8009ca0:	08009d49 	.word	0x08009d49
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d49 	.word	0x08009d49
 8009cac:	08009d49 	.word	0x08009d49
 8009cb0:	08009d49 	.word	0x08009d49
 8009cb4:	08009d29 	.word	0x08009d29
 8009cb8:	08009d49 	.word	0x08009d49
 8009cbc:	08009d49 	.word	0x08009d49
 8009cc0:	08009d49 	.word	0x08009d49
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009d49 	.word	0x08009d49
 8009ccc:	08009d49 	.word	0x08009d49
 8009cd0:	08009d49 	.word	0x08009d49
 8009cd4:	08009d31 	.word	0x08009d31
 8009cd8:	08009d49 	.word	0x08009d49
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009d49 	.word	0x08009d49
 8009ce8:	08009d49 	.word	0x08009d49
 8009cec:	08009d49 	.word	0x08009d49
 8009cf0:	08009d49 	.word	0x08009d49
 8009cf4:	08009d39 	.word	0x08009d39
 8009cf8:	08009d49 	.word	0x08009d49
 8009cfc:	08009d49 	.word	0x08009d49
 8009d00:	08009d49 	.word	0x08009d49
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d49 	.word	0x08009d49
 8009d0c:	08009d49 	.word	0x08009d49
 8009d10:	08009d49 	.word	0x08009d49
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e0bc      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d20:	2304      	movs	r3, #4
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e0b8      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d28:	2308      	movs	r3, #8
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e0b4      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d30:	2310      	movs	r3, #16
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e0b0      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e0ac      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e0a8      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d48:	2380      	movs	r3, #128	; 0x80
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e0a4      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a90      	ldr	r2, [pc, #576]	; (8009f98 <UART_SetConfig+0x6a0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d130      	bne.n	8009dbc <UART_SetConfig+0x4c4>
 8009d5a:	4b8e      	ldr	r3, [pc, #568]	; (8009f94 <UART_SetConfig+0x69c>)
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	d826      	bhi.n	8009db4 <UART_SetConfig+0x4bc>
 8009d66:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <UART_SetConfig+0x474>)
 8009d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009d8d 	.word	0x08009d8d
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009da5 	.word	0x08009da5
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	2300      	movs	r3, #0
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e086      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	e082      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d94:	2308      	movs	r3, #8
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e07e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	e07a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009da4:	2320      	movs	r3, #32
 8009da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009daa:	e076      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db2:	e072      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dba:	e06e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a76      	ldr	r2, [pc, #472]	; (8009f9c <UART_SetConfig+0x6a4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d130      	bne.n	8009e28 <UART_SetConfig+0x530>
 8009dc6:	4b73      	ldr	r3, [pc, #460]	; (8009f94 <UART_SetConfig+0x69c>)
 8009dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d826      	bhi.n	8009e20 <UART_SetConfig+0x528>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <UART_SetConfig+0x4e0>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009df9 	.word	0x08009df9
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e09 	.word	0x08009e09
 8009de8:	08009e11 	.word	0x08009e11
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e050      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e04c      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e00:	2308      	movs	r3, #8
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e048      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e044      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e10:	2320      	movs	r3, #32
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e040      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e03c      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e038      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a5c      	ldr	r2, [pc, #368]	; (8009fa0 <UART_SetConfig+0x6a8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d130      	bne.n	8009e94 <UART_SetConfig+0x59c>
 8009e32:	4b58      	ldr	r3, [pc, #352]	; (8009f94 <UART_SetConfig+0x69c>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d826      	bhi.n	8009e8c <UART_SetConfig+0x594>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0x54c>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e5d 	.word	0x08009e5d
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e01a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e64:	2304      	movs	r3, #4
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e016      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e012      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e00e      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	e00a      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e006      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e92:	e002      	b.n	8009e9a <UART_SetConfig+0x5a2>
 8009e94:	2380      	movs	r3, #128	; 0x80
 8009e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a40      	ldr	r2, [pc, #256]	; (8009fa0 <UART_SetConfig+0x6a8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	f040 80ef 	bne.w	800a084 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eaa:	2b20      	cmp	r3, #32
 8009eac:	dc46      	bgt.n	8009f3c <UART_SetConfig+0x644>
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	f2c0 8081 	blt.w	8009fb6 <UART_SetConfig+0x6be>
 8009eb4:	3b02      	subs	r3, #2
 8009eb6:	2b1e      	cmp	r3, #30
 8009eb8:	d87d      	bhi.n	8009fb6 <UART_SetConfig+0x6be>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x5c8>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009f43 	.word	0x08009f43
 8009ec4:	08009fb7 	.word	0x08009fb7
 8009ec8:	08009f4b 	.word	0x08009f4b
 8009ecc:	08009fb7 	.word	0x08009fb7
 8009ed0:	08009fb7 	.word	0x08009fb7
 8009ed4:	08009fb7 	.word	0x08009fb7
 8009ed8:	08009f5b 	.word	0x08009f5b
 8009edc:	08009fb7 	.word	0x08009fb7
 8009ee0:	08009fb7 	.word	0x08009fb7
 8009ee4:	08009fb7 	.word	0x08009fb7
 8009ee8:	08009fb7 	.word	0x08009fb7
 8009eec:	08009fb7 	.word	0x08009fb7
 8009ef0:	08009fb7 	.word	0x08009fb7
 8009ef4:	08009fb7 	.word	0x08009fb7
 8009ef8:	08009f6b 	.word	0x08009f6b
 8009efc:	08009fb7 	.word	0x08009fb7
 8009f00:	08009fb7 	.word	0x08009fb7
 8009f04:	08009fb7 	.word	0x08009fb7
 8009f08:	08009fb7 	.word	0x08009fb7
 8009f0c:	08009fb7 	.word	0x08009fb7
 8009f10:	08009fb7 	.word	0x08009fb7
 8009f14:	08009fb7 	.word	0x08009fb7
 8009f18:	08009fb7 	.word	0x08009fb7
 8009f1c:	08009fb7 	.word	0x08009fb7
 8009f20:	08009fb7 	.word	0x08009fb7
 8009f24:	08009fb7 	.word	0x08009fb7
 8009f28:	08009fb7 	.word	0x08009fb7
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	08009fb7 	.word	0x08009fb7
 8009f34:	08009fb7 	.word	0x08009fb7
 8009f38:	08009fa9 	.word	0x08009fa9
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d036      	beq.n	8009fae <UART_SetConfig+0x6b6>
 8009f40:	e039      	b.n	8009fb6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f42:	f7fd fd8f 	bl	8007a64 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f48:	e03b      	b.n	8009fc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f4a:	f107 0314 	add.w	r3, r7, #20
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fd fd9e 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f58:	e033      	b.n	8009fc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5a:	f107 0308 	add.w	r3, r7, #8
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd feea 	bl	8007d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f68:	e02b      	b.n	8009fc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <UART_SetConfig+0x69c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f76:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <UART_SetConfig+0x69c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	08db      	lsrs	r3, r3, #3
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	4a08      	ldr	r2, [pc, #32]	; (8009fa4 <UART_SetConfig+0x6ac>)
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f88:	e01b      	b.n	8009fc2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009f8a:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <UART_SetConfig+0x6ac>)
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f8e:	e018      	b.n	8009fc2 <UART_SetConfig+0x6ca>
 8009f90:	40011400 	.word	0x40011400
 8009f94:	58024400 	.word	0x58024400
 8009f98:	40007800 	.word	0x40007800
 8009f9c:	40007c00 	.word	0x40007c00
 8009fa0:	58000c00 	.word	0x58000c00
 8009fa4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fa8:	4bc4      	ldr	r3, [pc, #784]	; (800a2bc <UART_SetConfig+0x9c4>)
 8009faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fac:	e009      	b.n	8009fc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fb4:	e005      	b.n	8009fc2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009fc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 81da 	beq.w	800a37e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	4abc      	ldr	r2, [pc, #752]	; (800a2c0 <UART_SetConfig+0x9c8>)
 8009fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fdc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	4413      	add	r3, r2
 8009fe8:	6a3a      	ldr	r2, [r7, #32]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d305      	bcc.n	8009ffa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d903      	bls.n	800a002 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a000:	e1bd      	b.n	800a37e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	4618      	mov	r0, r3
 800a006:	f04f 0100 	mov.w	r1, #0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	4aac      	ldr	r2, [pc, #688]	; (800a2c0 <UART_SetConfig+0x9c8>)
 800a010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a014:	b29a      	uxth	r2, r3
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	f7f6 f95d 	bl	80002d8 <__aeabi_uldivmod>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	020b      	lsls	r3, r1, #8
 800a030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a034:	0202      	lsls	r2, r0, #8
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	6849      	ldr	r1, [r1, #4]
 800a03a:	0849      	lsrs	r1, r1, #1
 800a03c:	4608      	mov	r0, r1
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	1814      	adds	r4, r2, r0
 800a044:	eb43 0501 	adc.w	r5, r3, r1
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	461a      	mov	r2, r3
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	4620      	mov	r0, r4
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 f93f 	bl	80002d8 <__aeabi_uldivmod>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4613      	mov	r3, r2
 800a060:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a068:	d308      	bcc.n	800a07c <UART_SetConfig+0x784>
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a070:	d204      	bcs.n	800a07c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a078:	60da      	str	r2, [r3, #12]
 800a07a:	e180      	b.n	800a37e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a082:	e17c      	b.n	800a37e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a08c:	f040 80bf 	bne.w	800a20e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a090:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a094:	2b20      	cmp	r3, #32
 800a096:	dc49      	bgt.n	800a12c <UART_SetConfig+0x834>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	db7c      	blt.n	800a196 <UART_SetConfig+0x89e>
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d87a      	bhi.n	800a196 <UART_SetConfig+0x89e>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x7b0>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a133 	.word	0x0800a133
 800a0ac:	0800a13b 	.word	0x0800a13b
 800a0b0:	0800a197 	.word	0x0800a197
 800a0b4:	0800a197 	.word	0x0800a197
 800a0b8:	0800a143 	.word	0x0800a143
 800a0bc:	0800a197 	.word	0x0800a197
 800a0c0:	0800a197 	.word	0x0800a197
 800a0c4:	0800a197 	.word	0x0800a197
 800a0c8:	0800a153 	.word	0x0800a153
 800a0cc:	0800a197 	.word	0x0800a197
 800a0d0:	0800a197 	.word	0x0800a197
 800a0d4:	0800a197 	.word	0x0800a197
 800a0d8:	0800a197 	.word	0x0800a197
 800a0dc:	0800a197 	.word	0x0800a197
 800a0e0:	0800a197 	.word	0x0800a197
 800a0e4:	0800a197 	.word	0x0800a197
 800a0e8:	0800a163 	.word	0x0800a163
 800a0ec:	0800a197 	.word	0x0800a197
 800a0f0:	0800a197 	.word	0x0800a197
 800a0f4:	0800a197 	.word	0x0800a197
 800a0f8:	0800a197 	.word	0x0800a197
 800a0fc:	0800a197 	.word	0x0800a197
 800a100:	0800a197 	.word	0x0800a197
 800a104:	0800a197 	.word	0x0800a197
 800a108:	0800a197 	.word	0x0800a197
 800a10c:	0800a197 	.word	0x0800a197
 800a110:	0800a197 	.word	0x0800a197
 800a114:	0800a197 	.word	0x0800a197
 800a118:	0800a197 	.word	0x0800a197
 800a11c:	0800a197 	.word	0x0800a197
 800a120:	0800a197 	.word	0x0800a197
 800a124:	0800a197 	.word	0x0800a197
 800a128:	0800a189 	.word	0x0800a189
 800a12c:	2b40      	cmp	r3, #64	; 0x40
 800a12e:	d02e      	beq.n	800a18e <UART_SetConfig+0x896>
 800a130:	e031      	b.n	800a196 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a132:	f7fc fd2b 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 800a136:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a138:	e033      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a13a:	f7fc fd3d 	bl	8006bb8 <HAL_RCC_GetPCLK2Freq>
 800a13e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a140:	e02f      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a142:	f107 0314 	add.w	r3, r7, #20
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd fca2 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a150:	e027      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4618      	mov	r0, r3
 800a158:	f7fd fdee 	bl	8007d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a160:	e01f      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a162:	4b58      	ldr	r3, [pc, #352]	; (800a2c4 <UART_SetConfig+0x9cc>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a16e:	4b55      	ldr	r3, [pc, #340]	; (800a2c4 <UART_SetConfig+0x9cc>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	08db      	lsrs	r3, r3, #3
 800a174:	f003 0303 	and.w	r3, r3, #3
 800a178:	4a53      	ldr	r2, [pc, #332]	; (800a2c8 <UART_SetConfig+0x9d0>)
 800a17a:	fa22 f303 	lsr.w	r3, r2, r3
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a180:	e00f      	b.n	800a1a2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a182:	4b51      	ldr	r3, [pc, #324]	; (800a2c8 <UART_SetConfig+0x9d0>)
 800a184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a186:	e00c      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a188:	4b4c      	ldr	r3, [pc, #304]	; (800a2bc <UART_SetConfig+0x9c4>)
 800a18a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a18c:	e009      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a194:	e005      	b.n	800a1a2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80ea 	beq.w	800a37e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	4a44      	ldr	r2, [pc, #272]	; (800a2c0 <UART_SetConfig+0x9c8>)
 800a1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1bc:	005a      	lsls	r2, r3, #1
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	2b0f      	cmp	r3, #15
 800a1d6:	d916      	bls.n	800a206 <UART_SetConfig+0x90e>
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1de:	d212      	bcs.n	800a206 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f023 030f 	bic.w	r3, r3, #15
 800a1e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	085b      	lsrs	r3, r3, #1
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	e0bb      	b.n	800a37e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a20c:	e0b7      	b.n	800a37e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a20e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a212:	2b20      	cmp	r3, #32
 800a214:	dc4a      	bgt.n	800a2ac <UART_SetConfig+0x9b4>
 800a216:	2b00      	cmp	r3, #0
 800a218:	f2c0 8086 	blt.w	800a328 <UART_SetConfig+0xa30>
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	f200 8083 	bhi.w	800a328 <UART_SetConfig+0xa30>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <UART_SetConfig+0x930>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a2b3 	.word	0x0800a2b3
 800a22c:	0800a2cd 	.word	0x0800a2cd
 800a230:	0800a329 	.word	0x0800a329
 800a234:	0800a329 	.word	0x0800a329
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a329 	.word	0x0800a329
 800a240:	0800a329 	.word	0x0800a329
 800a244:	0800a329 	.word	0x0800a329
 800a248:	0800a2e5 	.word	0x0800a2e5
 800a24c:	0800a329 	.word	0x0800a329
 800a250:	0800a329 	.word	0x0800a329
 800a254:	0800a329 	.word	0x0800a329
 800a258:	0800a329 	.word	0x0800a329
 800a25c:	0800a329 	.word	0x0800a329
 800a260:	0800a329 	.word	0x0800a329
 800a264:	0800a329 	.word	0x0800a329
 800a268:	0800a2f5 	.word	0x0800a2f5
 800a26c:	0800a329 	.word	0x0800a329
 800a270:	0800a329 	.word	0x0800a329
 800a274:	0800a329 	.word	0x0800a329
 800a278:	0800a329 	.word	0x0800a329
 800a27c:	0800a329 	.word	0x0800a329
 800a280:	0800a329 	.word	0x0800a329
 800a284:	0800a329 	.word	0x0800a329
 800a288:	0800a329 	.word	0x0800a329
 800a28c:	0800a329 	.word	0x0800a329
 800a290:	0800a329 	.word	0x0800a329
 800a294:	0800a329 	.word	0x0800a329
 800a298:	0800a329 	.word	0x0800a329
 800a29c:	0800a329 	.word	0x0800a329
 800a2a0:	0800a329 	.word	0x0800a329
 800a2a4:	0800a329 	.word	0x0800a329
 800a2a8:	0800a31b 	.word	0x0800a31b
 800a2ac:	2b40      	cmp	r3, #64	; 0x40
 800a2ae:	d037      	beq.n	800a320 <UART_SetConfig+0xa28>
 800a2b0:	e03a      	b.n	800a328 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b2:	f7fc fc6b 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 800a2b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2b8:	e03c      	b.n	800a334 <UART_SetConfig+0xa3c>
 800a2ba:	bf00      	nop
 800a2bc:	003d0900 	.word	0x003d0900
 800a2c0:	0800b330 	.word	0x0800b330
 800a2c4:	58024400 	.word	0x58024400
 800a2c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2cc:	f7fc fc74 	bl	8006bb8 <HAL_RCC_GetPCLK2Freq>
 800a2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2d2:	e02f      	b.n	800a334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d4:	f107 0314 	add.w	r3, r7, #20
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fd fbd9 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e2:	e027      	b.n	800a334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fd fd25 	bl	8007d38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f2:	e01f      	b.n	800a334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f4:	4b2c      	ldr	r3, [pc, #176]	; (800a3a8 <UART_SetConfig+0xab0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d009      	beq.n	800a314 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a300:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <UART_SetConfig+0xab0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a28      	ldr	r2, [pc, #160]	; (800a3ac <UART_SetConfig+0xab4>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a312:	e00f      	b.n	800a334 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a314:	4b25      	ldr	r3, [pc, #148]	; (800a3ac <UART_SetConfig+0xab4>)
 800a316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a318:	e00c      	b.n	800a334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a31a:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <UART_SetConfig+0xab8>)
 800a31c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a31e:	e009      	b.n	800a334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a326:	e005      	b.n	800a334 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a332:	bf00      	nop
    }

    if (pclk != 0U)
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d021      	beq.n	800a37e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <UART_SetConfig+0xabc>)
 800a340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a344:	461a      	mov	r2, r3
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	fbb3 f2f2 	udiv	r2, r3, r2
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	085b      	lsrs	r3, r3, #1
 800a352:	441a      	add	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	2b0f      	cmp	r3, #15
 800a364:	d908      	bls.n	800a378 <UART_SetConfig+0xa80>
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36c:	d204      	bcs.n	800a378 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	e002      	b.n	800a37e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a39a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3738      	adds	r7, #56	; 0x38
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	58024400 	.word	0x58024400
 800a3ac:	03d09000 	.word	0x03d09000
 800a3b0:	003d0900 	.word	0x003d0900
 800a3b4:	0800b330 	.word	0x0800b330

0800a3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42a:	f003 0308 	and.w	r3, r3, #8
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00a      	beq.n	800a448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0310 	and.w	r3, r3, #16
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4b6:	d10a      	bne.n	800a4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	605a      	str	r2, [r3, #4]
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af02      	add	r7, sp, #8
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a50c:	f7f7 fc68 	bl	8001de0 <HAL_GetTick>
 800a510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d10e      	bne.n	800a53e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f82f 	bl	800a592 <UART_WaitOnFlagUntilTimeout>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e025      	b.n	800a58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d10e      	bne.n	800a56a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f819 	bl	800a592 <UART_WaitOnFlagUntilTimeout>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e00f      	b.n	800a58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	603b      	str	r3, [r7, #0]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a2:	e062      	b.n	800a66a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d05e      	beq.n	800a66a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ac:	f7f7 fc18 	bl	8001de0 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d302      	bcc.n	800a5c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d11d      	bne.n	800a5fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0201 	bic.w	r2, r2, #1
 800a5e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e045      	b.n	800a68a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d02e      	beq.n	800a66a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61a:	d126      	bne.n	800a66a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a634:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2220      	movs	r2, #32
 800a64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2220      	movs	r2, #32
 800a652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2220      	movs	r2, #32
 800a65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e00f      	b.n	800a68a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	69da      	ldr	r2, [r3, #28]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4013      	ands	r3, r2
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	bf0c      	ite	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	2300      	movne	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	429a      	cmp	r2, r3
 800a686:	d08d      	beq.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	88fa      	ldrh	r2, [r7, #6]
 800a6ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2222      	movs	r2, #34	; 0x22
 800a6bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d02c      	beq.n	800a722 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6cc:	4a25      	ldr	r2, [pc, #148]	; (800a764 <UART_Start_Receive_DMA+0xd0>)
 800a6ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d4:	4a24      	ldr	r2, [pc, #144]	; (800a768 <UART_Start_Receive_DMA+0xd4>)
 800a6d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6dc:	4a23      	ldr	r2, [pc, #140]	; (800a76c <UART_Start_Receive_DMA+0xd8>)
 800a6de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3324      	adds	r3, #36	; 0x24
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	f7f8 f82c 	bl	8002758 <HAL_DMA_Start_IT>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00d      	beq.n	800a722 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2210      	movs	r2, #16
 800a70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e01c      	b.n	800a75c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a738:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a758:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	0800a811 	.word	0x0800a811
 800a768:	0800a8a7 	.word	0x0800a8a7
 800a76c:	0800a8df 	.word	0x0800a8df

0800a770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a786:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a796:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6899      	ldr	r1, [r3, #8]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <UART_EndRxTransfer+0x60>)
 800a7d0:	400b      	ands	r3, r1
 800a7d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d107      	bne.n	800a7ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0210 	bic.w	r2, r2, #16
 800a7ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	effffffe 	.word	0xeffffffe

0800a810 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a826:	d02b      	beq.n	800a880 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a83e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689a      	ldr	r2, [r3, #8]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689a      	ldr	r2, [r3, #8]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a85e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2220      	movs	r2, #32
 800a864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d107      	bne.n	800a880 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0210 	bic.w	r2, r2, #16
 800a87e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a884:	2b01      	cmp	r3, #1
 800a886:	d107      	bne.n	800a898 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff f825 	bl	80098e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a896:	e002      	b.n	800a89e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff f803 	bl	80098a4 <HAL_UART_RxCpltCallback>
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d109      	bne.n	800a8d0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8c2:	085b      	lsrs	r3, r3, #1
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff f809 	bl	80098e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8ce:	e002      	b.n	800a8d6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7fe fff1 	bl	80098b8 <HAL_UART_RxHalfCpltCallback>
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a906:	2b80      	cmp	r3, #128	; 0x80
 800a908:	d109      	bne.n	800a91e <UART_DMAError+0x40>
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b21      	cmp	r3, #33	; 0x21
 800a90e:	d106      	bne.n	800a91e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2200      	movs	r2, #0
 800a914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a918:	6978      	ldr	r0, [r7, #20]
 800a91a:	f7ff ff29 	bl	800a770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	d109      	bne.n	800a940 <UART_DMAError+0x62>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b22      	cmp	r3, #34	; 0x22
 800a930:	d106      	bne.n	800a940 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2200      	movs	r2, #0
 800a936:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a93a:	6978      	ldr	r0, [r7, #20]
 800a93c:	f7ff ff36 	bl	800a7ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a946:	f043 0210 	orr.w	r2, r3, #16
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a950:	6978      	ldr	r0, [r7, #20]
 800a952:	f7fe ffbb 	bl	80098cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a956:	bf00      	nop
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fe ffa5 	bl	80098cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a982:	bf00      	nop
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7fe ff6d 	bl	8009890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d101      	bne.n	800aa10 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	e027      	b.n	800aa60 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2224      	movs	r2, #36	; 0x24
 800aa1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0201 	bic.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e02d      	b.n	800aae0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2224      	movs	r2, #36	; 0x24
 800aa90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 0201 	bic.w	r2, r2, #1
 800aaaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f84f 	bl	800ab64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e02d      	b.n	800ab5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2224      	movs	r2, #36	; 0x24
 800ab0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0201 	bic.w	r2, r2, #1
 800ab26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f811 	bl	800ab64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d108      	bne.n	800ab86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab84:	e031      	b.n	800abea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab86:	2310      	movs	r3, #16
 800ab88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	0e5b      	lsrs	r3, r3, #25
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	0f5b      	lsrs	r3, r3, #29
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	7b3a      	ldrb	r2, [r7, #12]
 800abb2:	4911      	ldr	r1, [pc, #68]	; (800abf8 <UARTEx_SetNbDataToProcess+0x94>)
 800abb4:	5c8a      	ldrb	r2, [r1, r2]
 800abb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abba:	7b3a      	ldrb	r2, [r7, #12]
 800abbc:	490f      	ldr	r1, [pc, #60]	; (800abfc <UARTEx_SetNbDataToProcess+0x98>)
 800abbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	7b7a      	ldrb	r2, [r7, #13]
 800abd0:	4909      	ldr	r1, [pc, #36]	; (800abf8 <UARTEx_SetNbDataToProcess+0x94>)
 800abd2:	5c8a      	ldrb	r2, [r1, r2]
 800abd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abd8:	7b7a      	ldrb	r2, [r7, #13]
 800abda:	4908      	ldr	r1, [pc, #32]	; (800abfc <UARTEx_SetNbDataToProcess+0x98>)
 800abdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abde:	fb93 f3f2 	sdiv	r3, r3, r2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	0800b348 	.word	0x0800b348
 800abfc:	0800b350 	.word	0x0800b350

0800ac00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac00:	b084      	sub	sp, #16
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	f107 001c 	add.w	r0, r7, #28
 800ac0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d120      	bne.n	800ac5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68da      	ldr	r2, [r3, #12]
 800ac28:	4b2a      	ldr	r3, [pc, #168]	; (800acd4 <USB_CoreInit+0xd4>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d105      	bne.n	800ac4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fa60 	bl	800b114 <USB_CoreReset>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
 800ac58:	e01a      	b.n	800ac90 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa54 	bl	800b114 <USB_CoreReset>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	639a      	str	r2, [r3, #56]	; 0x38
 800ac82:	e005      	b.n	800ac90 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d116      	bne.n	800acc4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aca4:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <USB_CoreInit+0xd8>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f043 0206 	orr.w	r2, r3, #6
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f043 0220 	orr.w	r2, r3, #32
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acd0:	b004      	add	sp, #16
 800acd2:	4770      	bx	lr
 800acd4:	ffbdffbf 	.word	0xffbdffbf
 800acd8:	03ee0000 	.word	0x03ee0000

0800acdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f023 0201 	bic.w	r2, r3, #1
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d106      	bne.n	800ad2a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60da      	str	r2, [r3, #12]
 800ad28:	e00b      	b.n	800ad42 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d106      	bne.n	800ad3e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60da      	str	r2, [r3, #12]
 800ad3c:	e001      	b.n	800ad42 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e003      	b.n	800ad4a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ad42:	2032      	movs	r0, #50	; 0x32
 800ad44:	f7f7 f858 	bl	8001df8 <HAL_Delay>

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad54:	b084      	sub	sp, #16
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b086      	sub	sp, #24
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad6e:	2300      	movs	r3, #0
 800ad70:	613b      	str	r3, [r7, #16]
 800ad72:	e009      	b.n	800ad88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	3340      	adds	r3, #64	; 0x40
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	2200      	movs	r2, #0
 800ad80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	3301      	adds	r3, #1
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2b0e      	cmp	r3, #14
 800ad8c:	d9f2      	bls.n	800ad74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d11c      	bne.n	800adce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ada2:	f043 0302 	orr.w	r3, r3, #2
 800ada6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	e005      	b.n	800adda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ade0:	461a      	mov	r2, r3
 800ade2:	2300      	movs	r3, #0
 800ade4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adec:	4619      	mov	r1, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf4:	461a      	mov	r2, r3
 800adf6:	680b      	ldr	r3, [r1, #0]
 800adf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d10c      	bne.n	800ae1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d104      	bne.n	800ae10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae06:	2100      	movs	r1, #0
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f949 	bl	800b0a0 <USB_SetDevSpeed>
 800ae0e:	e008      	b.n	800ae22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae10:	2101      	movs	r1, #1
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f944 	bl	800b0a0 <USB_SetDevSpeed>
 800ae18:	e003      	b.n	800ae22 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae1a:	2103      	movs	r1, #3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f93f 	bl	800b0a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae22:	2110      	movs	r1, #16
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f8f3 	bl	800b010 <USB_FlushTxFifo>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f911 	bl	800b05c <USB_FlushRxFifo>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae56:	461a      	mov	r2, r3
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae62:	461a      	mov	r2, r3
 800ae64:	2300      	movs	r3, #0
 800ae66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	e043      	b.n	800aef6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae84:	d118      	bne.n	800aeb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	e013      	b.n	800aeca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	e008      	b.n	800aeca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec4:	461a      	mov	r2, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed6:	461a      	mov	r2, r3
 800aed8:	2300      	movs	r3, #0
 800aeda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee8:	461a      	mov	r2, r3
 800aeea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aeee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	3301      	adds	r3, #1
 800aef4:	613b      	str	r3, [r7, #16]
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d3b7      	bcc.n	800ae6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aefe:	2300      	movs	r3, #0
 800af00:	613b      	str	r3, [r7, #16]
 800af02:	e043      	b.n	800af8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af1a:	d118      	bne.n	800af4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2e:	461a      	mov	r2, r3
 800af30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	e013      	b.n	800af60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	461a      	mov	r2, r3
 800af46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	e008      	b.n	800af60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5a:	461a      	mov	r2, r3
 800af5c:	2300      	movs	r3, #0
 800af5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6c:	461a      	mov	r2, r3
 800af6e:	2300      	movs	r3, #0
 800af70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7e:	461a      	mov	r2, r3
 800af80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3301      	adds	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	429a      	cmp	r2, r3
 800af92:	d3b7      	bcc.n	800af04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800afb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	f043 0210 	orr.w	r2, r3, #16
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699a      	ldr	r2, [r3, #24]
 800afcc:	4b0e      	ldr	r3, [pc, #56]	; (800b008 <USB_DevInit+0x2b4>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800afd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f043 0208 	orr.w	r2, r3, #8
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800afe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d105      	bne.n	800aff8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	699a      	ldr	r2, [r3, #24]
 800aff0:	4b06      	ldr	r3, [pc, #24]	; (800b00c <USB_DevInit+0x2b8>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b004:	b004      	add	sp, #16
 800b006:	4770      	bx	lr
 800b008:	803c3800 	.word	0x803c3800
 800b00c:	40000004 	.word	0x40000004

0800b010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	019b      	lsls	r3, r3, #6
 800b022:	f043 0220 	orr.w	r2, r3, #32
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4a09      	ldr	r2, [pc, #36]	; (800b058 <USB_FlushTxFifo+0x48>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d901      	bls.n	800b03c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	e006      	b.n	800b04a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b20      	cmp	r3, #32
 800b046:	d0f0      	beq.n	800b02a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	00030d40 	.word	0x00030d40

0800b05c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2210      	movs	r2, #16
 800b06c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3301      	adds	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4a09      	ldr	r2, [pc, #36]	; (800b09c <USB_FlushRxFifo+0x40>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d901      	bls.n	800b080 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e006      	b.n	800b08e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d0f0      	beq.n	800b06e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	00030d40 	.word	0x00030d40

0800b0a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	78fb      	ldrb	r3, [r7, #3]
 800b0ba:	68f9      	ldr	r1, [r7, #12]
 800b0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0ec:	f023 0303 	bic.w	r3, r3, #3
 800b0f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b100:	f043 0302 	orr.w	r3, r3, #2
 800b104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4a13      	ldr	r2, [pc, #76]	; (800b178 <USB_CoreReset+0x64>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d901      	bls.n	800b132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e01b      	b.n	800b16a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	daf2      	bge.n	800b120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f043 0201 	orr.w	r2, r3, #1
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4a09      	ldr	r2, [pc, #36]	; (800b178 <USB_CoreReset+0x64>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d901      	bls.n	800b15c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e006      	b.n	800b16a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	2b01      	cmp	r3, #1
 800b166:	d0f0      	beq.n	800b14a <USB_CoreReset+0x36>

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	00030d40 	.word	0x00030d40

0800b17c <calloc>:
 800b17c:	4b02      	ldr	r3, [pc, #8]	; (800b188 <calloc+0xc>)
 800b17e:	460a      	mov	r2, r1
 800b180:	4601      	mov	r1, r0
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	f000 b834 	b.w	800b1f0 <_calloc_r>
 800b188:	24000024 	.word	0x24000024

0800b18c <__errno>:
 800b18c:	4b01      	ldr	r3, [pc, #4]	; (800b194 <__errno+0x8>)
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	24000024 	.word	0x24000024

0800b198 <__libc_init_array>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4d0d      	ldr	r5, [pc, #52]	; (800b1d0 <__libc_init_array+0x38>)
 800b19c:	4c0d      	ldr	r4, [pc, #52]	; (800b1d4 <__libc_init_array+0x3c>)
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	42a6      	cmp	r6, r4
 800b1a6:	d109      	bne.n	800b1bc <__libc_init_array+0x24>
 800b1a8:	4d0b      	ldr	r5, [pc, #44]	; (800b1d8 <__libc_init_array+0x40>)
 800b1aa:	4c0c      	ldr	r4, [pc, #48]	; (800b1dc <__libc_init_array+0x44>)
 800b1ac:	f000 f8a8 	bl	800b300 <_init>
 800b1b0:	1b64      	subs	r4, r4, r5
 800b1b2:	10a4      	asrs	r4, r4, #2
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	42a6      	cmp	r6, r4
 800b1b8:	d105      	bne.n	800b1c6 <__libc_init_array+0x2e>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c0:	4798      	blx	r3
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	e7ee      	b.n	800b1a4 <__libc_init_array+0xc>
 800b1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ca:	4798      	blx	r3
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	e7f2      	b.n	800b1b6 <__libc_init_array+0x1e>
 800b1d0:	0800b360 	.word	0x0800b360
 800b1d4:	0800b360 	.word	0x0800b360
 800b1d8:	0800b360 	.word	0x0800b360
 800b1dc:	0800b364 	.word	0x0800b364

0800b1e0 <memset>:
 800b1e0:	4402      	add	r2, r0
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d100      	bne.n	800b1ea <memset+0xa>
 800b1e8:	4770      	bx	lr
 800b1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ee:	e7f9      	b.n	800b1e4 <memset+0x4>

0800b1f0 <_calloc_r>:
 800b1f0:	b513      	push	{r0, r1, r4, lr}
 800b1f2:	434a      	muls	r2, r1
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	9201      	str	r2, [sp, #4]
 800b1f8:	f000 f80a 	bl	800b210 <_malloc_r>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	b118      	cbz	r0, 800b208 <_calloc_r+0x18>
 800b200:	9a01      	ldr	r2, [sp, #4]
 800b202:	2100      	movs	r1, #0
 800b204:	f7ff ffec 	bl	800b1e0 <memset>
 800b208:	4620      	mov	r0, r4
 800b20a:	b002      	add	sp, #8
 800b20c:	bd10      	pop	{r4, pc}
	...

0800b210 <_malloc_r>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	1ccd      	adds	r5, r1, #3
 800b214:	f025 0503 	bic.w	r5, r5, #3
 800b218:	3508      	adds	r5, #8
 800b21a:	2d0c      	cmp	r5, #12
 800b21c:	bf38      	it	cc
 800b21e:	250c      	movcc	r5, #12
 800b220:	2d00      	cmp	r5, #0
 800b222:	4606      	mov	r6, r0
 800b224:	db01      	blt.n	800b22a <_malloc_r+0x1a>
 800b226:	42a9      	cmp	r1, r5
 800b228:	d903      	bls.n	800b232 <_malloc_r+0x22>
 800b22a:	230c      	movs	r3, #12
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	2000      	movs	r0, #0
 800b230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b232:	f000 f857 	bl	800b2e4 <__malloc_lock>
 800b236:	4921      	ldr	r1, [pc, #132]	; (800b2bc <_malloc_r+0xac>)
 800b238:	680a      	ldr	r2, [r1, #0]
 800b23a:	4614      	mov	r4, r2
 800b23c:	b99c      	cbnz	r4, 800b266 <_malloc_r+0x56>
 800b23e:	4f20      	ldr	r7, [pc, #128]	; (800b2c0 <_malloc_r+0xb0>)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	b923      	cbnz	r3, 800b24e <_malloc_r+0x3e>
 800b244:	4621      	mov	r1, r4
 800b246:	4630      	mov	r0, r6
 800b248:	f000 f83c 	bl	800b2c4 <_sbrk_r>
 800b24c:	6038      	str	r0, [r7, #0]
 800b24e:	4629      	mov	r1, r5
 800b250:	4630      	mov	r0, r6
 800b252:	f000 f837 	bl	800b2c4 <_sbrk_r>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	d123      	bne.n	800b2a2 <_malloc_r+0x92>
 800b25a:	230c      	movs	r3, #12
 800b25c:	6033      	str	r3, [r6, #0]
 800b25e:	4630      	mov	r0, r6
 800b260:	f000 f846 	bl	800b2f0 <__malloc_unlock>
 800b264:	e7e3      	b.n	800b22e <_malloc_r+0x1e>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	1b5b      	subs	r3, r3, r5
 800b26a:	d417      	bmi.n	800b29c <_malloc_r+0x8c>
 800b26c:	2b0b      	cmp	r3, #11
 800b26e:	d903      	bls.n	800b278 <_malloc_r+0x68>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	441c      	add	r4, r3
 800b274:	6025      	str	r5, [r4, #0]
 800b276:	e004      	b.n	800b282 <_malloc_r+0x72>
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	42a2      	cmp	r2, r4
 800b27c:	bf0c      	ite	eq
 800b27e:	600b      	streq	r3, [r1, #0]
 800b280:	6053      	strne	r3, [r2, #4]
 800b282:	4630      	mov	r0, r6
 800b284:	f000 f834 	bl	800b2f0 <__malloc_unlock>
 800b288:	f104 000b 	add.w	r0, r4, #11
 800b28c:	1d23      	adds	r3, r4, #4
 800b28e:	f020 0007 	bic.w	r0, r0, #7
 800b292:	1ac2      	subs	r2, r0, r3
 800b294:	d0cc      	beq.n	800b230 <_malloc_r+0x20>
 800b296:	1a1b      	subs	r3, r3, r0
 800b298:	50a3      	str	r3, [r4, r2]
 800b29a:	e7c9      	b.n	800b230 <_malloc_r+0x20>
 800b29c:	4622      	mov	r2, r4
 800b29e:	6864      	ldr	r4, [r4, #4]
 800b2a0:	e7cc      	b.n	800b23c <_malloc_r+0x2c>
 800b2a2:	1cc4      	adds	r4, r0, #3
 800b2a4:	f024 0403 	bic.w	r4, r4, #3
 800b2a8:	42a0      	cmp	r0, r4
 800b2aa:	d0e3      	beq.n	800b274 <_malloc_r+0x64>
 800b2ac:	1a21      	subs	r1, r4, r0
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f000 f808 	bl	800b2c4 <_sbrk_r>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d1dd      	bne.n	800b274 <_malloc_r+0x64>
 800b2b8:	e7cf      	b.n	800b25a <_malloc_r+0x4a>
 800b2ba:	bf00      	nop
 800b2bc:	2400c1c8 	.word	0x2400c1c8
 800b2c0:	2400c1cc 	.word	0x2400c1cc

0800b2c4 <_sbrk_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	; (800b2e0 <_sbrk_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f6 fca0 	bl	8001c14 <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_sbrk_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_sbrk_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	2400c918 	.word	0x2400c918

0800b2e4 <__malloc_lock>:
 800b2e4:	4801      	ldr	r0, [pc, #4]	; (800b2ec <__malloc_lock+0x8>)
 800b2e6:	f000 b809 	b.w	800b2fc <__retarget_lock_acquire_recursive>
 800b2ea:	bf00      	nop
 800b2ec:	2400c920 	.word	0x2400c920

0800b2f0 <__malloc_unlock>:
 800b2f0:	4801      	ldr	r0, [pc, #4]	; (800b2f8 <__malloc_unlock+0x8>)
 800b2f2:	f000 b804 	b.w	800b2fe <__retarget_lock_release_recursive>
 800b2f6:	bf00      	nop
 800b2f8:	2400c920 	.word	0x2400c920

0800b2fc <__retarget_lock_acquire_recursive>:
 800b2fc:	4770      	bx	lr

0800b2fe <__retarget_lock_release_recursive>:
 800b2fe:	4770      	bx	lr

0800b300 <_init>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	bf00      	nop
 800b304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b306:	bc08      	pop	{r3}
 800b308:	469e      	mov	lr, r3
 800b30a:	4770      	bx	lr

0800b30c <_fini>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	bf00      	nop
 800b310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b312:	bc08      	pop	{r3}
 800b314:	469e      	mov	lr, r3
 800b316:	4770      	bx	lr
